
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000d22  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800104  00800104  00000dba  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00001510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142c  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f5  00000000  00000000  00002b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cbc  00000000  00000000  00003211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00003ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  000044c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd0  00000000  00000000  00004935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_1>
   8:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_2>
   c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_3>
  10:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_4>
  14:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_5>
  18:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_6>
  1c:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e2       	ldi	r30, 0x22	; 34
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 39       	cpi	r26, 0x96	; 150
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <main>
  d4:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:
#include <avr/interrupt.h>

char ADC_is_running;

void setupADC() {
	DDRF = 0x00;
  dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | 0b01;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 64       	ori	r24, 0x41	; 65
  fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
  fe:	10 92 04 01 	sts	0x0104, r1
	sei();
 102:	78 94       	sei
}
 104:	08 95       	ret

00000106 <startADC>:

void startADC() {
	ADC_is_running = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 04 01 	sts	0x0104, r24
	ADCSRA |= _BV(ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	sei();
 116:	78 94       	sei
}
 118:	08 95       	ret

0000011a <stopADC>:

void stopADC() {
	ADC_is_running = 0;
 11a:	10 92 04 01 	sts	0x0104, r1
	ADCSRA &= ~_BV(ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <updateAverage>:

void updateAverage(int refl) {
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	fc 01       	movw	r30, r24
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
 138:	80 91 09 01 	lds	r24, 0x0109
 13c:	90 91 0a 01 	lds	r25, 0x010A
 140:	dc 01       	movw	r26, r24
 142:	aa 0f       	add	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	a8 0f       	add	r26, r24
 148:	b9 1f       	adc	r27, r25
 14a:	aa 0f       	add	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a3 5f       	subi	r26, 0xF3	; 243
 150:	be 4f       	sbci	r27, 0xFE	; 254
 152:	14 96       	adiw	r26, 0x04	; 4
 154:	4d 91       	ld	r20, X+
 156:	5c 91       	ld	r21, X
 158:	15 97       	sbiw	r26, 0x05	; 5
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	4d 32       	cpi	r20, 0x2D	; 45
 15e:	50 07       	cpc	r21, r16
 160:	7c f5       	brge	.+94     	; 0x1c0 <updateAverage+0x96>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
 162:	9f 01       	movw	r18, r30
 164:	28 5c       	subi	r18, 0xC8	; 200
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	28 33       	cpi	r18, 0x38	; 56
 16a:	31 05       	cpc	r19, r1
 16c:	48 f5       	brcc	.+82     	; 0x1c0 <updateAverage+0x96>
	// average it out
	long int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
 16e:	ed 01       	movw	r28, r26
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	48 9f       	mul	r20, r24
 176:	b0 01       	movw	r22, r0
 178:	49 9f       	mul	r20, r25
 17a:	70 0d       	add	r23, r0
 17c:	58 9f       	mul	r21, r24
 17e:	70 0d       	add	r23, r0
 180:	11 24       	eor	r1, r1
 182:	cb 01       	movw	r24, r22
 184:	aa 27       	eor	r26, r26
 186:	97 fd       	sbrc	r25, 7
 188:	a0 95       	com	r26
 18a:	ba 2f       	mov	r27, r26
	meanprod += refl;
	ringBuf[currentRefl].reflSamples++;
 18c:	9a 01       	movw	r18, r20
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	3d 83       	std	Y+5, r19	; 0x05
 194:	2c 83       	std	Y+4, r18	; 0x04
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
	// average it out
	long int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
	meanprod += refl;
 196:	af 01       	movw	r20, r30
 198:	66 27       	eor	r22, r22
 19a:	57 fd       	sbrc	r21, 7
 19c:	60 95       	com	r22
 19e:	76 2f       	mov	r23, r22
 1a0:	7a 01       	movw	r14, r20
 1a2:	8b 01       	movw	r16, r22
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	0a 1f       	adc	r16, r26
 1aa:	1b 1f       	adc	r17, r27
 1ac:	c8 01       	movw	r24, r16
 1ae:	b7 01       	movw	r22, r14
	ringBuf[currentRefl].reflSamples++;
	ringBuf[currentRefl].avgRefl = meanprod / ringBuf[currentRefl].reflSamples;
 1b0:	44 27       	eor	r20, r20
 1b2:	37 fd       	sbrc	r19, 7
 1b4:	40 95       	com	r20
 1b6:	54 2f       	mov	r21, r20
 1b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__divmodsi4>
 1bc:	3b 83       	std	Y+3, r19	; 0x03
 1be:	2a 83       	std	Y+2, r18	; 0x02
	return;
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	08 95       	ret

000001ce <__vector_29>:

ISR(ADC_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	0b b6       	in	r0, 0x3b	; 59
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	updateAverage(ADC);
 1f4:	80 91 78 00 	lds	r24, 0x0078
 1f8:	90 91 79 00 	lds	r25, 0x0079
 1fc:	0e 94 95 00 	call	0x12a	; 0x12a <updateAverage>
	ADCSRA |= _BV(ADSC);
 200:	ea e7       	ldi	r30, 0x7A	; 122
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 64       	ori	r24, 0x40	; 64
 208:	80 83       	st	Z, r24
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <setupMotor>:

int motorWaitForStepper;

void setupMotor() {
	// enable port for output
	DDRC |= ~(MOTOR_BITMASK);
 230:	87 b1       	in	r24, 0x07	; 7
 232:	8f 60       	ori	r24, 0x0F	; 15
 234:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 236:	88 b1       	in	r24, 0x08	; 8
 238:	80 7f       	andi	r24, 0xF0	; 240
 23a:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	DDRB = 0xFF;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	84 b9       	out	0x04, r24	; 4
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
 240:	83 ea       	ldi	r24, 0xA3	; 163
 242:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
 248:	8f e7       	ldi	r24, 0x7F	; 127
 24a:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
 24c:	10 92 06 01 	sts	0x0106, r1
 250:	10 92 05 01 	sts	0x0105, r1
}
 254:	08 95       	ret

00000256 <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
 256:	87 bd       	out	0x27, r24	; 39
}
 258:	08 95       	ret

0000025a <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	88 b9       	out	0x08, r24	; 8
}
 262:	08 95       	ret

00000264 <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
 264:	88 b1       	in	r24, 0x08	; 8
 266:	80 7f       	andi	r24, 0xF0	; 240
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	88 b9       	out	0x08, r24	; 8
}
 26c:	08 95       	ret

0000026e <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 26e:	88 b1       	in	r24, 0x08	; 8
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	88 b9       	out	0x08, r24	; 8
}
 274:	08 95       	ret

00000276 <setMotorCoast>:

void setMotorCoast() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
 276:	88 b1       	in	r24, 0x08	; 8
 278:	80 7f       	andi	r24, 0xF0	; 240
 27a:	86 60       	ori	r24, 0x06	; 6
 27c:	88 b9       	out	0x08, r24	; 8
 27e:	08 95       	ret

00000280 <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
 280:	8d b3       	in	r24, 0x1d	; 29
 282:	80 78       	andi	r24, 0x80	; 128
 284:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
 286:	8a b1       	in	r24, 0x0a	; 10
 288:	80 7f       	andi	r24, 0xF0	; 240
 28a:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
 28c:	8d b1       	in	r24, 0x0d	; 13
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Falling-edge interrupt
	EICRA |= _BV(ISC01);
 292:	e9 e6       	ldi	r30, 0x69	; 105
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
 29c:	80 81       	ld	r24, Z
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
 2a2:	80 81       	ld	r24, Z
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
 2a8:	80 81       	ld	r24, Z
 2aa:	8b 7f       	andi	r24, 0xFB	; 251
 2ac:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
 2ae:	80 81       	ld	r24, Z
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 2b4:	80 81       	ld	r24, Z
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
 2ba:	80 81       	ld	r24, Z
 2bc:	80 68       	ori	r24, 0x80	; 128
 2be:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
 2c0:	80 81       	ld	r24, Z
 2c2:	8f 7b       	andi	r24, 0xBF	; 191
 2c4:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
 2c6:	ea e6       	ldi	r30, 0x6A	; 106
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	82 60       	ori	r24, 0x02	; 2
 2ce:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
 2d0:	80 81       	ld	r24, Z
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
 2d6:	80 81       	ld	r24, Z
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
 2dc:	80 81       	ld	r24, Z
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
 2e2:	80 81       	ld	r24, Z
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
 2e8:	80 81       	ld	r24, Z
 2ea:	8f 7e       	andi	r24, 0xEF	; 239
 2ec:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
 2ee:	8d b3       	in	r24, 0x1d	; 29
 2f0:	8f 67       	ori	r24, 0x7F	; 127
 2f2:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
 2f4:	8c b3       	in	r24, 0x1c	; 28
 2f6:	8f 67       	ori	r24, 0x7F	; 127
 2f8:	8c bb       	out	0x1c, r24	; 28
	sei();
 2fa:	78 94       	sei
}
 2fc:	08 95       	ret

000002fe <makeDecision>:

void makeDecision(int index) {
	if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
 2fe:	fc 01       	movw	r30, r24
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	e8 0f       	add	r30, r24
 306:	f9 1f       	adc	r31, r25
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e3 5f       	subi	r30, 0xF3	; 243
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	24 81       	ldd	r18, Z+4	; 0x04
 312:	35 81       	ldd	r19, Z+5	; 0x05
 314:	25 30       	cpi	r18, 0x05	; 5
 316:	31 05       	cpc	r19, r1
 318:	e4 f0       	brlt	.+56     	; 0x352 <makeDecision+0x54>
	char refl = ringBuf[index].avgRefl;
 31a:	fc 01       	movw	r30, r24
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	e8 0f       	add	r30, r24
 322:	f9 1f       	adc	r31, r25
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	e3 5f       	subi	r30, 0xF3	; 243
 32a:	fe 4f       	sbci	r31, 0xFE	; 254
 32c:	32 81       	ldd	r19, Z+2	; 0x02
	if(ringBuf[index].metal == 1) {
 32e:	21 81       	ldd	r18, Z+1	; 0x01
 330:	21 30       	cpi	r18, 0x01	; 1
 332:	79 f4       	brne	.+30     	; 0x352 <makeDecision+0x54>
		if((refl < STEEL_MAX) && (refl > STEEL_MIN)) {
			ringBuf[index].type = STEEL;
		}
		if((refl < ALUMINUM_MAX) && (refl > ALUMINUM_MIN)) {
 334:	30 54       	subi	r19, 0x40	; 64
 336:	30 31       	cpi	r19, 0x10	; 16
 338:	60 f4       	brcc	.+24     	; 0x352 <makeDecision+0x54>
			ringBuf[index].type = ALUMINUM;
 33a:	fc 01       	movw	r30, r24
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	8e 0f       	add	r24, r30
 342:	9f 1f       	adc	r25, r31
 344:	fc 01       	movw	r30, r24
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	e3 5f       	subi	r30, 0xF3	; 243
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	80 83       	st	Z, r24
 352:	08 95       	ret

00000354 <firstLaserHandler>:

/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	currentMetal = newRingBufItem();
 354:	0e 94 2a 04 	call	0x854	; 0x854 <newRingBufItem>
 358:	90 93 90 02 	sts	0x0290, r25
 35c:	80 93 8f 02 	sts	0x028F, r24
}
 360:	08 95       	ret

00000362 <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	ringBuf[currentMetal].metal = 1;
 362:	80 91 8f 02 	lds	r24, 0x028F
 366:	90 91 90 02 	lds	r25, 0x0290
 36a:	fc 01       	movw	r30, r24
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	8e 0f       	add	r24, r30
 372:	9f 1f       	adc	r25, r31
 374:	fc 01       	movw	r30, r24
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	e3 5f       	subi	r30, 0xF3	; 243
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	81 83       	std	Z+1, r24	; 0x01
}
 382:	08 95       	ret

00000384 <secondLaserHandler>:
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
 384:	80 91 04 01 	lds	r24, 0x0104
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	79 f4       	brne	.+30     	; 0x3aa <secondLaserHandler+0x26>
		// debounce
		delaynms(DEBOUNCE_DELAY);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
		if((PIND & 0b00000100) == 0) return;
 394:	4a 9b       	sbis	0x09, 2	; 9
 396:	19 c0       	rjmp	.+50     	; 0x3ca <secondLaserHandler+0x46>
		// stop ADC
		stopADC();
 398:	0e 94 8d 00 	call	0x11a	; 0x11a <stopADC>
		makeDecision(currentRefl);
 39c:	80 91 09 01 	lds	r24, 0x0109
 3a0:	90 91 0a 01 	lds	r25, 0x010A
 3a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <makeDecision>
 3a8:	08 95       	ret
		// TODO
	} else {
		delaynms(DEBOUNCE_DELAY);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
		if((PIND & 0b00000100) == 0b100) return;
 3b2:	4a 99       	sbic	0x09, 2	; 9
 3b4:	0a c0       	rjmp	.+20     	; 0x3ca <secondLaserHandler+0x46>
		currentRefl = currentMetal;
 3b6:	80 91 8f 02 	lds	r24, 0x028F
 3ba:	90 91 90 02 	lds	r25, 0x0290
 3be:	90 93 0a 01 	sts	0x010A, r25
 3c2:	80 93 09 01 	sts	0x0109, r24
		startADC();
 3c6:	0e 94 83 00 	call	0x106	; 0x106 <startADC>
 3ca:	08 95       	ret

000003cc <exitHandler>:

/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	writeDecInt(bufLength);
 3cc:	80 91 8d 02 	lds	r24, 0x028D
 3d0:	90 91 8e 02 	lds	r25, 0x028E
 3d4:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
	// is there an item on the queue?
	if(bufLength==0) return; // Throw an error here
 3d8:	80 91 8d 02 	lds	r24, 0x028D
 3dc:	90 91 8e 02 	lds	r25, 0x028E
 3e0:	00 97       	sbiw	r24, 0x00	; 0
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <exitHandler+0x1a>
 3e4:	4a c0       	rjmp	.+148    	; 0x47a <exitHandler+0xae>
	// are we in position?
	switch(ringBuf[ringTop].type) {
 3e6:	80 91 0b 01 	lds	r24, 0x010B
 3ea:	90 91 0c 01 	lds	r25, 0x010C
 3ee:	fc 01       	movw	r30, r24
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	8e 0f       	add	r24, r30
 3f6:	9f 1f       	adc	r25, r31
 3f8:	fc 01       	movw	r30, r24
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e3 5f       	subi	r30, 0xF3	; 243
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	80 81       	ld	r24, Z
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	39 f1       	breq	.+78     	; 0x456 <exitHandler+0x8a>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	18 f4       	brcc	.+6      	; 0x412 <exitHandler+0x46>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	69 f5       	brne	.+90     	; 0x46a <exitHandler+0x9e>
 410:	05 c0       	rjmp	.+10     	; 0x41c <exitHandler+0x50>
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	61 f0       	breq	.+24     	; 0x42e <exitHandler+0x62>
 416:	84 30       	cpi	r24, 0x04	; 4
 418:	41 f5       	brne	.+80     	; 0x46a <exitHandler+0x9e>
 41a:	13 c0       	rjmp	.+38     	; 0x442 <exitHandler+0x76>
		case BLACK:
			if(steps==BLACK_POSITION) {
 41c:	80 91 93 02 	lds	r24, 0x0293
 420:	90 91 94 02 	lds	r25, 0x0294
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	09 f5       	brne	.+66     	; 0x46a <exitHandler+0x9e>
				popBuf();
 428:	0e 94 0e 04 	call	0x81c	; 0x81c <popBuf>
				return;
 42c:	08 95       	ret
			}
			break;
		case STEEL:
			if(steps==STEEL_POSITION) {
 42e:	80 91 93 02 	lds	r24, 0x0293
 432:	90 91 94 02 	lds	r25, 0x0294
 436:	86 39       	cpi	r24, 0x96	; 150
 438:	91 05       	cpc	r25, r1
 43a:	b9 f4       	brne	.+46     	; 0x46a <exitHandler+0x9e>
				popBuf();
 43c:	0e 94 0e 04 	call	0x81c	; 0x81c <popBuf>
				return;
 440:	08 95       	ret
			}
			break;
		case ALUMINUM:
			if(steps==ALUMINUM_POSIITION) {
 442:	80 91 93 02 	lds	r24, 0x0293
 446:	90 91 94 02 	lds	r25, 0x0294
 44a:	82 33       	cpi	r24, 0x32	; 50
 44c:	91 05       	cpc	r25, r1
 44e:	69 f4       	brne	.+26     	; 0x46a <exitHandler+0x9e>
				popBuf();
 450:	0e 94 0e 04 	call	0x81c	; 0x81c <popBuf>
				return;
 454:	08 95       	ret
			}
			break;
		case WHITE:
			if(steps==WHITE_POSITION) {
 456:	80 91 93 02 	lds	r24, 0x0293
 45a:	90 91 94 02 	lds	r25, 0x0294
 45e:	84 36       	cpi	r24, 0x64	; 100
 460:	91 05       	cpc	r25, r1
 462:	19 f4       	brne	.+6      	; 0x46a <exitHandler+0x9e>
				popBuf();
 464:	0e 94 0e 04 	call	0x81c	; 0x81c <popBuf>
				return;
 468:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
 46a:	0e 94 37 01 	call	0x26e	; 0x26e <setMotorBrake>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 06 01 	sts	0x0106, r25
 476:	80 93 05 01 	sts	0x0105, r24
 47a:	08 95       	ret

0000047c <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	0b b6       	in	r0, 0x3b	; 59
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PIND & 0b1) == 0) firstLaserHandler();
 4aa:	48 99       	sbic	0x09, 0	; 9
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__vector_1+0x36>
 4ae:	0e 94 aa 01 	call	0x354	; 0x354 <firstLaserHandler>
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PIND & (1 << 1)) == 0) metalHandler();
 506:	49 99       	sbic	0x09, 1	; 9
 508:	02 c0       	rjmp	.+4      	; 0x50e <__vector_2+0x36>
 50a:	0e 94 b1 01 	call	0x362	; 0x362 <metalHandler>
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	0b be       	out	0x3b, r0	; 59
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
 534:	1f 92       	push	r1
 536:	0f 92       	push	r0
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	0f 92       	push	r0
 53c:	0b b6       	in	r0, 0x3b	; 59
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	2f 93       	push	r18
 544:	3f 93       	push	r19
 546:	4f 93       	push	r20
 548:	5f 93       	push	r21
 54a:	6f 93       	push	r22
 54c:	7f 93       	push	r23
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	af 93       	push	r26
 554:	bf 93       	push	r27
 556:	ef 93       	push	r30
 558:	ff 93       	push	r31
	// debounce is handled by function call
	secondLaserHandler();
 55a:	0e 94 c2 01 	call	0x384	; 0x384 <secondLaserHandler>
}
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0b be       	out	0x3b, r0	; 59
 57a:	0f 90       	pop	r0
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	0f 90       	pop	r0
 580:	1f 90       	pop	r1
 582:	18 95       	reti

00000584 <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
 584:	1f 92       	push	r1
 586:	0f 92       	push	r0
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	0f 92       	push	r0
 58c:	0b b6       	in	r0, 0x3b	; 59
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PIND & (1 << 3)) == 0) exitHandler();
 5b2:	4b 99       	sbic	0x09, 3	; 9
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__vector_4+0x36>
 5b6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <exitHandler>
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0b be       	out	0x3b, r0	; 59
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PINE & (1 << 4)) == 0) hallLow = 1;
 60e:	64 99       	sbic	0x0c, 4	; 12
 610:	03 c0       	rjmp	.+6      	; 0x618 <__vector_5+0x38>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 95 02 	sts	0x0295, r24
}
 618:	ff 91       	pop	r31
 61a:	ef 91       	pop	r30
 61c:	bf 91       	pop	r27
 61e:	af 91       	pop	r26
 620:	9f 91       	pop	r25
 622:	8f 91       	pop	r24
 624:	7f 91       	pop	r23
 626:	6f 91       	pop	r22
 628:	5f 91       	pop	r21
 62a:	4f 91       	pop	r20
 62c:	3f 91       	pop	r19
 62e:	2f 91       	pop	r18
 630:	0f 90       	pop	r0
 632:	0b be       	out	0x3b, r0	; 59
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	0b b6       	in	r0, 0x3b	; 59
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 664:	84 e1       	ldi	r24, 0x14	; 20
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PINE & (1 << 5)) == 0) writeDecInt(5);
 66c:	65 99       	sbic	0x0c, 5	; 12
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_6+0x3a>
 670:	85 e0       	ldi	r24, 0x05	; 5
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
}
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	7f 91       	pop	r23
 686:	6f 91       	pop	r22
 688:	5f 91       	pop	r21
 68a:	4f 91       	pop	r20
 68c:	3f 91       	pop	r19
 68e:	2f 91       	pop	r18
 690:	0f 90       	pop	r0
 692:	0b be       	out	0x3b, r0	; 59
 694:	0f 90       	pop	r0
 696:	0f be       	out	0x3f, r0	; 63
 698:	0f 90       	pop	r0
 69a:	1f 90       	pop	r1
 69c:	18 95       	reti

0000069e <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
 69e:	1f 92       	push	r1
 6a0:	0f 92       	push	r0
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	0f 92       	push	r0
 6a6:	0b b6       	in	r0, 0x3b	; 59
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 6c4:	84 e1       	ldi	r24, 0x14	; 20
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if((PINE & (1 << 6)) == 0) writeDecInt(6);
 6cc:	66 99       	sbic	0x0c, 6	; 12
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <__vector_7+0x3a>
 6d0:	86 e0       	ldi	r24, 0x06	; 6
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0b be       	out	0x3b, r0	; 59
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
 6fe:	e1 e6       	ldi	r30, 0x61	; 97
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 e8       	ldi	r24, 0x80	; 128
 704:	80 83       	st	Z, r24
	CLKPR = 0;
 706:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
 708:	0e 94 04 06 	call	0xc08	; 0xc08 <initializeTimer>
	
	delaynms(1000);
 70c:	88 ee       	ldi	r24, 0xE8	; 232
 70e:	93 e0       	ldi	r25, 0x03	; 3
 710:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	
	writeHexInt(0x50);
 714:	80 e5       	ldi	r24, 0x50	; 80
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>
	
	// Initialize ring buffer
	initRingBuf();
 71c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <initRingBuf>
	
	writeHexInt(0x51);
 720:	81 e5       	ldi	r24, 0x51	; 81
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>
	
	// enable output for stepper and display.
	DDRA = 0xFF;
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
 72c:	0e 94 40 01 	call	0x280	; 0x280 <vectorInterrupts>
	
	writeHexInt(0x52);
 730:	82 e5       	ldi	r24, 0x52	; 82
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>

	// init stepper
	initalizeStepper();
 738:	0e 94 07 05 	call	0xa0e	; 0xa0e <initalizeStepper>
	
	writeHexInt(0x53);
 73c:	83 e5       	ldi	r24, 0x53	; 83
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>

	// zero stepper
	while(steps != 0){
 744:	80 91 93 02 	lds	r24, 0x0293
 748:	90 91 94 02 	lds	r25, 0x0294
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	89 f0       	breq	.+34     	; 0x772 <main+0x74>
		stepTime(20,0);
 750:	84 e1       	ldi	r24, 0x14	; 20
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	0e 94 1b 05 	call	0xa36	; 0xa36 <stepTime>
		writeHexInt(steps);
 75a:	80 91 93 02 	lds	r24, 0x0293
 75e:	90 91 94 02 	lds	r25, 0x0294
 762:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>
	initalizeStepper();
	
	writeHexInt(0x53);

	// zero stepper
	while(steps != 0){
 766:	80 91 93 02 	lds	r24, 0x0293
 76a:	90 91 94 02 	lds	r25, 0x0294
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	79 f7       	brne	.-34     	; 0x750 <main+0x52>
		stepTime(20,0);
		writeHexInt(steps);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
 772:	10 92 94 02 	sts	0x0294, r1
 776:	10 92 93 02 	sts	0x0293, r1
	// reset hall effect check
	hallLow = 0;
 77a:	10 92 95 02 	sts	0x0295, r1
	

	setupADC();
 77e:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>

	// wait one second
	delaynms(1000);
 782:	88 ee       	ldi	r24, 0xE8	; 232
 784:	93 e0       	ldi	r25, 0x03	; 3
 786:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	
	// start the motor
	setupMotor();
 78a:	0e 94 18 01 	call	0x230	; 0x230 <setupMotor>
	writeHexInt(0x54);
 78e:	84 e5       	ldi	r24, 0x54	; 84
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 db 04 	call	0x9b6	; 0x9b6 <writeHexInt>
	setMotorFwd();
 796:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorFwd>
	
	stepperMoveTo(STEEL_POSITION);
 79a:	86 e9       	ldi	r24, 0x96	; 150
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 b3 05 	call	0xb66	; 0xb66 <stepperMoveTo>
	delaynms(4000);
 7a2:	80 ea       	ldi	r24, 0xA0	; 160
 7a4:	9f e0       	ldi	r25, 0x0F	; 15
 7a6:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	stepperMoveTo(BLACK_POSITION);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 b3 05 	call	0xb66	; 0xb66 <stepperMoveTo>
	delaynms(4000);
 7b2:	80 ea       	ldi	r24, 0xA0	; 160
 7b4:	9f e0       	ldi	r25, 0x0F	; 15
 7b6:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	stepperMoveTo(ALUMINUM_POSIITION);
 7ba:	82 e3       	ldi	r24, 0x32	; 50
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 b3 05 	call	0xb66	; 0xb66 <stepperMoveTo>
	delaynms(4000);
 7c2:	80 ea       	ldi	r24, 0xA0	; 160
 7c4:	9f e0       	ldi	r25, 0x0F	; 15
 7c6:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	stepperMoveTo(STEEL_POSITION);
 7ca:	86 e9       	ldi	r24, 0x96	; 150
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 b3 05 	call	0xb66	; 0xb66 <stepperMoveTo>
	setMotorBrake();
 7d2:	0e 94 37 01 	call	0x26e	; 0x26e <setMotorBrake>
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <main+0xd8>

000007d8 <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
 7d8:	10 92 0c 01 	sts	0x010C, r1
 7dc:	10 92 0b 01 	sts	0x010B, r1
	ringBottom = 0;
 7e0:	10 92 08 01 	sts	0x0108, r1
 7e4:	10 92 07 01 	sts	0x0107, r1
	currentMetal = 0;
 7e8:	10 92 90 02 	sts	0x0290, r1
 7ec:	10 92 8f 02 	sts	0x028F, r1
	currentRefl = 0;
 7f0:	10 92 0a 01 	sts	0x010A, r1
 7f4:	10 92 09 01 	sts	0x0109, r1
	bufLength = 0;
 7f8:	10 92 8e 02 	sts	0x028E, r1
 7fc:	10 92 8d 02 	sts	0x028D, r1
}
 800:	08 95       	ret

00000802 <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
 802:	86 0f       	add	r24, r22
 804:	97 1f       	adc	r25, r23
 806:	80 34       	cpi	r24, 0x40	; 64
 808:	91 05       	cpc	r25, r1
 80a:	1c f0       	brlt	.+6      	; 0x812 <getBufOffset+0x10>
		return ((index + offset) - RING_BUF_SIZE);
 80c:	80 54       	subi	r24, 0x40	; 64
 80e:	90 40       	sbci	r25, 0x00	; 0
 810:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 812:	99 23       	and	r25, r25
 814:	14 f4       	brge	.+4      	; 0x81a <getBufOffset+0x18>
		return ((index + offset) + RING_BUF_SIZE);
 816:	80 5c       	subi	r24, 0xC0	; 192
 818:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
 81a:	08 95       	ret

0000081c <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
 820:	c0 91 8d 02 	lds	r28, 0x028D
 824:	d0 91 8e 02 	lds	r29, 0x028E
 828:	20 97       	sbiw	r28, 0x00	; 0
 82a:	89 f0       	breq	.+34     	; 0x84e <popBuf+0x32>
	ringTop = getBufOffset(ringTop, 1);
 82c:	80 91 0b 01 	lds	r24, 0x010B
 830:	90 91 0c 01 	lds	r25, 0x010C
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	0e 94 01 04 	call	0x802	; 0x802 <getBufOffset>
 83c:	90 93 0c 01 	sts	0x010C, r25
 840:	80 93 0b 01 	sts	0x010B, r24
	bufLength--;
 844:	21 97       	sbiw	r28, 0x01	; 1
 846:	d0 93 8e 02 	sts	0x028E, r29
 84a:	c0 93 8d 02 	sts	0x028D, r28
}
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	08 95       	ret

00000854 <newRingBufItem>:

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
	ringBottom = getBufOffset(ringBottom, 1);
 854:	80 91 07 01 	lds	r24, 0x0107
 858:	90 91 08 01 	lds	r25, 0x0108
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	0e 94 01 04 	call	0x802	; 0x802 <getBufOffset>
 864:	90 93 08 01 	sts	0x0108, r25
 868:	80 93 07 01 	sts	0x0107, r24
	bufLength++;
 86c:	20 91 8d 02 	lds	r18, 0x028D
 870:	30 91 8e 02 	lds	r19, 0x028E
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	30 93 8e 02 	sts	0x028E, r19
 87c:	20 93 8d 02 	sts	0x028D, r18
	ringBuf[ringBottom].avgRefl = 0;
 880:	fc 01       	movw	r30, r24
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	8e 0f       	add	r24, r30
 888:	9f 1f       	adc	r25, r31
 88a:	fc 01       	movw	r30, r24
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	e3 5f       	subi	r30, 0xF3	; 243
 892:	fe 4f       	sbci	r31, 0xFE	; 254
 894:	13 82       	std	Z+3, r1	; 0x03
 896:	12 82       	std	Z+2, r1	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
 898:	15 82       	std	Z+5, r1	; 0x05
 89a:	14 82       	std	Z+4, r1	; 0x04
	ringBuf[ringBottom].metal = 0;
 89c:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
 89e:	10 82       	st	Z, r1
	writeDecInt(bufLength);
 8a0:	c9 01       	movw	r24, r18
 8a2:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
	return ringBottom;
}
 8a6:	80 91 07 01 	lds	r24, 0x0107
 8aa:	90 91 08 01 	lds	r25, 0x0108
 8ae:	08 95       	ret

000008b0 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
 8b0:	87 30       	cpi	r24, 0x07	; 7
 8b2:	71 f1       	breq	.+92     	; 0x910 <getPatFomHex+0x60>
 8b4:	88 30       	cpi	r24, 0x08	; 8
 8b6:	70 f4       	brcc	.+28     	; 0x8d4 <getPatFomHex+0x24>
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	11 f1       	breq	.+68     	; 0x900 <getPatFomHex+0x50>
 8bc:	84 30       	cpi	r24, 0x04	; 4
 8be:	28 f4       	brcc	.+10     	; 0x8ca <getPatFomHex+0x1a>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	d1 f1       	breq	.+116    	; 0x938 <getPatFomHex+0x88>
 8c4:	82 30       	cpi	r24, 0x02	; 2
 8c6:	d0 f4       	brcc	.+52     	; 0x8fc <getPatFomHex+0x4c>
 8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <getPatFomHex+0x48>
 8ca:	85 30       	cpi	r24, 0x05	; 5
 8cc:	e9 f0       	breq	.+58     	; 0x908 <getPatFomHex+0x58>
 8ce:	86 30       	cpi	r24, 0x06	; 6
 8d0:	e8 f4       	brcc	.+58     	; 0x90c <getPatFomHex+0x5c>
 8d2:	18 c0       	rjmp	.+48     	; 0x904 <getPatFomHex+0x54>
 8d4:	8b 30       	cpi	r24, 0x0B	; 11
 8d6:	21 f1       	breq	.+72     	; 0x920 <getPatFomHex+0x70>
 8d8:	8c 30       	cpi	r24, 0x0C	; 12
 8da:	28 f4       	brcc	.+10     	; 0x8e6 <getPatFomHex+0x36>
 8dc:	89 30       	cpi	r24, 0x09	; 9
 8de:	e1 f0       	breq	.+56     	; 0x918 <getPatFomHex+0x68>
 8e0:	8a 30       	cpi	r24, 0x0A	; 10
 8e2:	e0 f4       	brcc	.+56     	; 0x91c <getPatFomHex+0x6c>
 8e4:	17 c0       	rjmp	.+46     	; 0x914 <getPatFomHex+0x64>
 8e6:	8d 30       	cpi	r24, 0x0D	; 13
 8e8:	f9 f0       	breq	.+62     	; 0x928 <getPatFomHex+0x78>
 8ea:	8d 30       	cpi	r24, 0x0D	; 13
 8ec:	d8 f0       	brcs	.+54     	; 0x924 <getPatFomHex+0x74>
 8ee:	8e 30       	cpi	r24, 0x0E	; 14
 8f0:	e9 f0       	breq	.+58     	; 0x92c <getPatFomHex+0x7c>
 8f2:	8f 30       	cpi	r24, 0x0F	; 15
 8f4:	f9 f4       	brne	.+62     	; 0x934 <getPatFomHex+0x84>
 8f6:	1c c0       	rjmp	.+56     	; 0x930 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
 8f8:	8c ef       	ldi	r24, 0xFC	; 252
 8fa:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
 8fc:	8a ed       	ldi	r24, 0xDA	; 218
 8fe:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
 900:	82 ef       	ldi	r24, 0xF2	; 242
 902:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
 904:	86 e6       	ldi	r24, 0x66	; 102
 906:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
 908:	86 eb       	ldi	r24, 0xB6	; 182
 90a:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
 90c:	8e eb       	ldi	r24, 0xBE	; 190
 90e:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
 910:	80 ee       	ldi	r24, 0xE0	; 224
 912:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
 914:	8e ef       	ldi	r24, 0xFE	; 254
 916:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
 918:	86 ee       	ldi	r24, 0xE6	; 230
 91a:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
 91c:	8e ee       	ldi	r24, 0xEE	; 238
 91e:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
 920:	8e e3       	ldi	r24, 0x3E	; 62
 922:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
 924:	8c e9       	ldi	r24, 0x9C	; 156
 926:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
 928:	8a e7       	ldi	r24, 0x7A	; 122
 92a:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
 92c:	8e e9       	ldi	r24, 0x9E	; 158
 92e:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
 930:	8e e8       	ldi	r24, 0x8E	; 142
 932:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
 938:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
 93a:	08 95       	ret

0000093c <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
 940:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 942:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
 944:	ac 01       	movw	r20, r24
 946:	02 2e       	mov	r0, r18
 948:	02 c0       	rjmp	.+4      	; 0x94e <writePattern+0x12>
 94a:	55 95       	asr	r21
 94c:	47 95       	ror	r20
 94e:	0a 94       	dec	r0
 950:	e2 f7       	brpl	.-8      	; 0x94a <writePattern+0xe>
 952:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 954:	42 95       	swap	r20
 956:	44 0f       	add	r20, r20
 958:	44 0f       	add	r20, r20
 95a:	40 7c       	andi	r20, 0xC0	; 192
 95c:	56 2f       	mov	r21, r22
 95e:	5f 7b       	andi	r21, 0xBF	; 191
 960:	45 2b       	or	r20, r21
 962:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
 964:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
 966:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 968:	2f 5f       	subi	r18, 0xFF	; 255
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	28 30       	cpi	r18, 0x08	; 8
 96e:	31 05       	cpc	r19, r1
 970:	41 f7       	brne	.-48     	; 0x942 <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
 972:	08 95       	ret

00000974 <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
 974:	ef 92       	push	r14
 976:	ff 92       	push	r15
 978:	0f 93       	push	r16
 97a:	1f 93       	push	r17
 97c:	cf 93       	push	r28
 97e:	df 93       	push	r29
 980:	c3 e0       	ldi	r28, 0x03	; 3
 982:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
 984:	0f 2e       	mov	r0, r31
 986:	fa e0       	ldi	r31, 0x0A	; 10
 988:	ef 2e       	mov	r14, r31
 98a:	ff 24       	eor	r15, r15
 98c:	f0 2d       	mov	r31, r0
 98e:	b7 01       	movw	r22, r14
 990:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 994:	16 2f       	mov	r17, r22
 996:	07 2f       	mov	r16, r23
 998:	0e 94 58 04 	call	0x8b0	; 0x8b0 <getPatFomHex>
 99c:	0e 94 9e 04 	call	0x93c	; 0x93c <writePattern>
		number = number / 10;
 9a0:	81 2f       	mov	r24, r17
 9a2:	90 2f       	mov	r25, r16
 9a4:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 9a6:	99 f7       	brne	.-26     	; 0x98e <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	08 95       	ret

000009b6 <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
 9b6:	ef 92       	push	r14
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	ec 01       	movw	r28, r24
 9c4:	03 e0       	ldi	r16, 0x03	; 3
 9c6:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
 9c8:	ee 24       	eor	r14, r14
 9ca:	ff 24       	eor	r15, r15
 9cc:	68 94       	set
 9ce:	e4 f8       	bld	r14, 4
 9d0:	ce 01       	movw	r24, r28
 9d2:	b7 01       	movw	r22, r14
 9d4:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
 9d8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <getPatFomHex>
 9dc:	0e 94 9e 04 	call	0x93c	; 0x93c <writePattern>
		number = number / 16;
 9e0:	ce 01       	movw	r24, r28
 9e2:	dd 23       	and	r29, r29
 9e4:	0c f4       	brge	.+2      	; 0x9e8 <writeHexInt+0x32>
 9e6:	0f 96       	adiw	r24, 0x0f	; 15
 9e8:	ec 01       	movw	r28, r24
 9ea:	d5 95       	asr	r29
 9ec:	c7 95       	ror	r28
 9ee:	d5 95       	asr	r29
 9f0:	c7 95       	ror	r28
 9f2:	d5 95       	asr	r29
 9f4:	c7 95       	ror	r28
 9f6:	d5 95       	asr	r29
 9f8:	c7 95       	ror	r28
 9fa:	01 50       	subi	r16, 0x01	; 1
 9fc:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 9fe:	41 f7       	brne	.-48     	; 0x9d0 <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	ff 90       	pop	r15
 a0a:	ef 90       	pop	r14
 a0c:	08 95       	ret

00000a0e <initalizeStepper>:


// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
 a0e:	81 b1       	in	r24, 0x01	; 1
 a10:	8f 63       	ori	r24, 0x3F	; 63
 a12:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
 a14:	10 92 92 02 	sts	0x0292, r1
 a18:	10 92 91 02 	sts	0x0291, r1
	PORTA = (PORTA & 0b11000000) | states[currentState];
 a1c:	82 b1       	in	r24, 0x02	; 2
 a1e:	80 7c       	andi	r24, 0xC0	; 192
 a20:	80 63       	ori	r24, 0x30	; 48
 a22:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
 a24:	10 92 95 02 	sts	0x0295, r1
	steps = 1;
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	90 93 94 02 	sts	0x0294, r25
 a30:	80 93 93 02 	sts	0x0293, r24
}
 a34:	08 95       	ret

00000a36 <stepTime>:


void stepTime(int stepTime, char direction) {
 a36:	cf 93       	push	r28
 a38:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
 a3a:	0e 94 0a 06 	call	0xc14	; 0xc14 <delaynms>
	if(direction == 0) { //forward direction
 a3e:	cc 23       	and	r28, r28
 a40:	79 f5       	brne	.+94     	; 0xaa0 <stepTime+0x6a>
		currentState++;
 a42:	80 91 91 02 	lds	r24, 0x0291
 a46:	90 91 92 02 	lds	r25, 0x0292
 a4a:	01 96       	adiw	r24, 0x01	; 1
 a4c:	90 93 92 02 	sts	0x0292, r25
 a50:	80 93 91 02 	sts	0x0291, r24
		if (currentState==4) currentState = 0;
 a54:	84 30       	cpi	r24, 0x04	; 4
 a56:	91 05       	cpc	r25, r1
 a58:	21 f4       	brne	.+8      	; 0xa62 <stepTime+0x2c>
 a5a:	10 92 92 02 	sts	0x0292, r1
 a5e:	10 92 91 02 	sts	0x0291, r1
		PORTA = (PORTA & 0b11000000) | states[currentState];
 a62:	82 b1       	in	r24, 0x02	; 2
 a64:	e0 91 91 02 	lds	r30, 0x0291
 a68:	f0 91 92 02 	lds	r31, 0x0292
 a6c:	e0 50       	subi	r30, 0x00	; 0
 a6e:	ff 4f       	sbci	r31, 0xFF	; 255
 a70:	80 7c       	andi	r24, 0xC0	; 192
 a72:	90 81       	ld	r25, Z
 a74:	89 2b       	or	r24, r25
 a76:	82 b9       	out	0x02, r24	; 2
		steps++;
 a78:	80 91 93 02 	lds	r24, 0x0293
 a7c:	90 91 94 02 	lds	r25, 0x0294
 a80:	01 96       	adiw	r24, 0x01	; 1
 a82:	90 93 94 02 	sts	0x0294, r25
 a86:	80 93 93 02 	sts	0x0293, r24
		if(hallLow == 1) {
 a8a:	80 91 95 02 	lds	r24, 0x0295
 a8e:	81 30       	cpi	r24, 0x01	; 1
 a90:	c1 f5       	brne	.+112    	; 0xb02 <stepTime+0xcc>
			steps = 0;
 a92:	10 92 94 02 	sts	0x0294, r1
 a96:	10 92 93 02 	sts	0x0293, r1
			hallLow = 0;
 a9a:	10 92 95 02 	sts	0x0295, r1
 a9e:	31 c0       	rjmp	.+98     	; 0xb02 <stepTime+0xcc>
		}
	}
	else { //reverse direction
		currentState--;
 aa0:	80 91 91 02 	lds	r24, 0x0291
 aa4:	90 91 92 02 	lds	r25, 0x0292
 aa8:	01 97       	sbiw	r24, 0x01	; 1
 aaa:	90 93 92 02 	sts	0x0292, r25
 aae:	80 93 91 02 	sts	0x0291, r24
		if (currentState==-1) currentState = 3;
 ab2:	2f ef       	ldi	r18, 0xFF	; 255
 ab4:	8f 3f       	cpi	r24, 0xFF	; 255
 ab6:	92 07       	cpc	r25, r18
 ab8:	31 f4       	brne	.+12     	; 0xac6 <stepTime+0x90>
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	90 93 92 02 	sts	0x0292, r25
 ac2:	80 93 91 02 	sts	0x0291, r24
		PORTA = (PORTA & 0b11000000) | states[currentState];
 ac6:	82 b1       	in	r24, 0x02	; 2
 ac8:	e0 91 91 02 	lds	r30, 0x0291
 acc:	f0 91 92 02 	lds	r31, 0x0292
 ad0:	e0 50       	subi	r30, 0x00	; 0
 ad2:	ff 4f       	sbci	r31, 0xFF	; 255
 ad4:	80 7c       	andi	r24, 0xC0	; 192
 ad6:	90 81       	ld	r25, Z
 ad8:	89 2b       	or	r24, r25
 ada:	82 b9       	out	0x02, r24	; 2
		steps--;
 adc:	80 91 93 02 	lds	r24, 0x0293
 ae0:	90 91 94 02 	lds	r25, 0x0294
 ae4:	01 97       	sbiw	r24, 0x01	; 1
 ae6:	90 93 94 02 	sts	0x0294, r25
 aea:	80 93 93 02 	sts	0x0293, r24
		if(hallLow == 1) {
 aee:	80 91 95 02 	lds	r24, 0x0295
 af2:	81 30       	cpi	r24, 0x01	; 1
 af4:	31 f4       	brne	.+12     	; 0xb02 <stepTime+0xcc>
			steps = 0;
 af6:	10 92 94 02 	sts	0x0294, r1
 afa:	10 92 93 02 	sts	0x0293, r1
			hallLow = 0;
 afe:	10 92 95 02 	sts	0x0295, r1
		}				
	}
}
 b02:	cf 91       	pop	r28
 b04:	08 95       	ret

00000b06 <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
 b06:	86 17       	cp	r24, r22
 b08:	97 07       	cpc	r25, r23
 b0a:	4c f4       	brge	.+18     	; 0xb1e <forwardSteps+0x18>
 b0c:	68 1b       	sub	r22, r24
 b0e:	79 0b       	sbc	r23, r25
 b10:	1a f4       	brpl	.+6      	; 0xb18 <forwardSteps+0x12>
 b12:	70 95       	com	r23
 b14:	61 95       	neg	r22
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	86 2f       	mov	r24, r22
 b1a:	97 2f       	mov	r25, r23
 b1c:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - (target - current));
 b1e:	86 1b       	sub	r24, r22
 b20:	97 0b       	sbc	r25, r23
 b22:	9c 01       	movw	r18, r24
 b24:	28 53       	subi	r18, 0x38	; 56
 b26:	3f 4f       	sbci	r19, 0xFF	; 255
 b28:	1a f4       	brpl	.+6      	; 0xb30 <forwardSteps+0x2a>
 b2a:	30 95       	com	r19
 b2c:	21 95       	neg	r18
 b2e:	3f 4f       	sbci	r19, 0xFF	; 255
 b30:	82 2f       	mov	r24, r18
 b32:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 b34:	08 95       	ret

00000b36 <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
 b36:	68 17       	cp	r22, r24
 b38:	79 07       	cpc	r23, r25
 b3a:	4c f4       	brge	.+18     	; 0xb4e <reverseSteps+0x18>
 b3c:	68 1b       	sub	r22, r24
 b3e:	79 0b       	sbc	r23, r25
 b40:	1a f4       	brpl	.+6      	; 0xb48 <reverseSteps+0x12>
 b42:	70 95       	com	r23
 b44:	61 95       	neg	r22
 b46:	7f 4f       	sbci	r23, 0xFF	; 255
 b48:	86 2f       	mov	r24, r22
 b4a:	97 2f       	mov	r25, r23
 b4c:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - (target - current));
 b4e:	86 1b       	sub	r24, r22
 b50:	97 0b       	sbc	r25, r23
 b52:	9c 01       	movw	r18, r24
 b54:	28 53       	subi	r18, 0x38	; 56
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	1a f4       	brpl	.+6      	; 0xb60 <reverseSteps+0x2a>
 b5a:	30 95       	com	r19
 b5c:	21 95       	neg	r18
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	82 2f       	mov	r24, r18
 b62:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 b64:	08 95       	ret

00000b66 <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
 b66:	ef 92       	push	r14
 b68:	ff 92       	push	r15
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	7c 01       	movw	r14, r24
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
 b74:	c0 91 93 02 	lds	r28, 0x0293
 b78:	d0 91 94 02 	lds	r29, 0x0294
 b7c:	ce 01       	movw	r24, r28
 b7e:	b7 01       	movw	r22, r14
 b80:	0e 94 83 05 	call	0xb06	; 0xb06 <forwardSteps>
 b84:	8c 01       	movw	r16, r24
 b86:	ce 01       	movw	r24, r28
 b88:	b7 01       	movw	r22, r14
 b8a:	0e 94 9b 05 	call	0xb36	; 0xb36 <reverseSteps>
 b8e:	ec 01       	movw	r28, r24
 b90:	08 17       	cp	r16, r24
 b92:	19 07       	cpc	r17, r25
 b94:	94 f4       	brge	.+36     	; 0xbba <stepperMoveTo+0x54>
		int j = forwardSteps(steps, nextPosition);
		writeDecInt(j);
 b96:	c8 01       	movw	r24, r16
 b98:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
		for(int i = 0;i < j;i++) {
 b9c:	10 16       	cp	r1, r16
 b9e:	11 06       	cpc	r1, r17
 ba0:	ec f4       	brge	.+58     	; 0xbdc <stepperMoveTo+0x76>
 ba2:	c0 e0       	ldi	r28, 0x00	; 0
 ba4:	d0 e0       	ldi	r29, 0x00	; 0
			stepTime(15,0);
 ba6:	8f e0       	ldi	r24, 0x0F	; 15
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	0e 94 1b 05 	call	0xa36	; 0xa36 <stepTime>
// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
		int j = forwardSteps(steps, nextPosition);
		writeDecInt(j);
		for(int i = 0;i < j;i++) {
 bb0:	21 96       	adiw	r28, 0x01	; 1
 bb2:	c0 17       	cp	r28, r16
 bb4:	d1 07       	cpc	r29, r17
 bb6:	b9 f7       	brne	.-18     	; 0xba6 <stepperMoveTo+0x40>
 bb8:	11 c0       	rjmp	.+34     	; 0xbdc <stepperMoveTo+0x76>
		}
	}
	
	else {
		int j = reverseSteps(steps, nextPosition);
		writeDecInt(j);
 bba:	0e 94 ba 04 	call	0x974	; 0x974 <writeDecInt>
		for(int i = 0;i < j;i++) {
 bbe:	1c 16       	cp	r1, r28
 bc0:	1d 06       	cpc	r1, r29
 bc2:	64 f4       	brge	.+24     	; 0xbdc <stepperMoveTo+0x76>
 bc4:	00 e0       	ldi	r16, 0x00	; 0
 bc6:	10 e0       	ldi	r17, 0x00	; 0
			stepTime(15,1);
 bc8:	8f e0       	ldi	r24, 0x0F	; 15
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	61 e0       	ldi	r22, 0x01	; 1
 bce:	0e 94 1b 05 	call	0xa36	; 0xa36 <stepTime>
	}
	
	else {
		int j = reverseSteps(steps, nextPosition);
		writeDecInt(j);
		for(int i = 0;i < j;i++) {
 bd2:	0f 5f       	subi	r16, 0xFF	; 255
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	0c 17       	cp	r16, r28
 bd8:	1d 07       	cpc	r17, r29
 bda:	b1 f7       	brne	.-20     	; 0xbc8 <stepperMoveTo+0x62>
			stepTime(15,1);
		}
	}
	
	if(motorWaitForStepper == 1) {
 bdc:	80 91 05 01 	lds	r24, 0x0105
 be0:	90 91 06 01 	lds	r25, 0x0106
 be4:	81 30       	cpi	r24, 0x01	; 1
 be6:	91 05       	cpc	r25, r1
 be8:	41 f4       	brne	.+16     	; 0xbfa <stepperMoveTo+0x94>
		// start the motor back up
		setMotorFwd();
 bea:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
 bee:	10 92 06 01 	sts	0x0106, r1
 bf2:	10 92 05 01 	sts	0x0105, r1
		// fire the exit logic again
		exitHandler();
 bf6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <exitHandler>
	}
}
 bfa:	df 91       	pop	r29
 bfc:	cf 91       	pop	r28
 bfe:	1f 91       	pop	r17
 c00:	0f 91       	pop	r16
 c02:	ff 90       	pop	r15
 c04:	ef 90       	pop	r14
 c06:	08 95       	ret

00000c08 <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
 c08:	e1 e8       	ldi	r30, 0x81	; 129
 c0a:	f0 e0       	ldi	r31, 0x00	; 0
 c0c:	80 81       	ld	r24, Z
 c0e:	81 60       	ori	r24, 0x01	; 1
 c10:	80 83       	st	Z, r24
} 
 c12:	08 95       	ret

00000c14 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
 c14:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
 c16:	e1 e8       	ldi	r30, 0x81	; 129
 c18:	f0 e0       	ldi	r31, 0x00	; 0
 c1a:	80 81       	ld	r24, Z
 c1c:	88 60       	ori	r24, 0x08	; 8
 c1e:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
 c20:	80 81       	ld	r24, Z
 c22:	83 60       	ori	r24, 0x03	; 3
 c24:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
 c26:	12 16       	cp	r1, r18
 c28:	13 06       	cpc	r1, r19
 c2a:	a4 f4       	brge	.+40     	; 0xc54 <delaynms+0x40>
 c2c:	80 e0       	ldi	r24, 0x00	; 0
 c2e:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 c30:	e8 e8       	ldi	r30, 0x88	; 136
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	4d e7       	ldi	r20, 0x7D	; 125
 c36:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
 c38:	a4 e8       	ldi	r26, 0x84	; 132
 c3a:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 c3c:	51 83       	std	Z+1, r21	; 0x01
 c3e:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
 c40:	11 96       	adiw	r26, 0x01	; 1
 c42:	1c 92       	st	X, r1
 c44:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
 c46:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
 c48:	b1 9b       	sbis	0x16, 1	; 22
 c4a:	fe cf       	rjmp	.-4      	; 0xc48 <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
 c4c:	01 96       	adiw	r24, 0x01	; 1
 c4e:	82 17       	cp	r24, r18
 c50:	93 07       	cpc	r25, r19
 c52:	a1 f7       	brne	.-24     	; 0xc3c <delaynms+0x28>
 c54:	08 95       	ret

00000c56 <__divmodhi4>:
 c56:	97 fb       	bst	r25, 7
 c58:	09 2e       	mov	r0, r25
 c5a:	07 26       	eor	r0, r23
 c5c:	0a d0       	rcall	.+20     	; 0xc72 <__divmodhi4_neg1>
 c5e:	77 fd       	sbrc	r23, 7
 c60:	04 d0       	rcall	.+8      	; 0xc6a <__divmodhi4_neg2>
 c62:	27 d0       	rcall	.+78     	; 0xcb2 <__udivmodhi4>
 c64:	06 d0       	rcall	.+12     	; 0xc72 <__divmodhi4_neg1>
 c66:	00 20       	and	r0, r0
 c68:	1a f4       	brpl	.+6      	; 0xc70 <__divmodhi4_exit>

00000c6a <__divmodhi4_neg2>:
 c6a:	70 95       	com	r23
 c6c:	61 95       	neg	r22
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255

00000c70 <__divmodhi4_exit>:
 c70:	08 95       	ret

00000c72 <__divmodhi4_neg1>:
 c72:	f6 f7       	brtc	.-4      	; 0xc70 <__divmodhi4_exit>
 c74:	90 95       	com	r25
 c76:	81 95       	neg	r24
 c78:	9f 4f       	sbci	r25, 0xFF	; 255
 c7a:	08 95       	ret

00000c7c <__divmodsi4>:
 c7c:	97 fb       	bst	r25, 7
 c7e:	09 2e       	mov	r0, r25
 c80:	05 26       	eor	r0, r21
 c82:	0e d0       	rcall	.+28     	; 0xca0 <__divmodsi4_neg1>
 c84:	57 fd       	sbrc	r21, 7
 c86:	04 d0       	rcall	.+8      	; 0xc90 <__divmodsi4_neg2>
 c88:	28 d0       	rcall	.+80     	; 0xcda <__udivmodsi4>
 c8a:	0a d0       	rcall	.+20     	; 0xca0 <__divmodsi4_neg1>
 c8c:	00 1c       	adc	r0, r0
 c8e:	38 f4       	brcc	.+14     	; 0xc9e <__divmodsi4_exit>

00000c90 <__divmodsi4_neg2>:
 c90:	50 95       	com	r21
 c92:	40 95       	com	r20
 c94:	30 95       	com	r19
 c96:	21 95       	neg	r18
 c98:	3f 4f       	sbci	r19, 0xFF	; 255
 c9a:	4f 4f       	sbci	r20, 0xFF	; 255
 c9c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c9e <__divmodsi4_exit>:
 c9e:	08 95       	ret

00000ca0 <__divmodsi4_neg1>:
 ca0:	f6 f7       	brtc	.-4      	; 0xc9e <__divmodsi4_exit>
 ca2:	90 95       	com	r25
 ca4:	80 95       	com	r24
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	08 95       	ret

00000cb2 <__udivmodhi4>:
 cb2:	aa 1b       	sub	r26, r26
 cb4:	bb 1b       	sub	r27, r27
 cb6:	51 e1       	ldi	r21, 0x11	; 17
 cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <__udivmodhi4_ep>

00000cba <__udivmodhi4_loop>:
 cba:	aa 1f       	adc	r26, r26
 cbc:	bb 1f       	adc	r27, r27
 cbe:	a6 17       	cp	r26, r22
 cc0:	b7 07       	cpc	r27, r23
 cc2:	10 f0       	brcs	.+4      	; 0xcc8 <__udivmodhi4_ep>
 cc4:	a6 1b       	sub	r26, r22
 cc6:	b7 0b       	sbc	r27, r23

00000cc8 <__udivmodhi4_ep>:
 cc8:	88 1f       	adc	r24, r24
 cca:	99 1f       	adc	r25, r25
 ccc:	5a 95       	dec	r21
 cce:	a9 f7       	brne	.-22     	; 0xcba <__udivmodhi4_loop>
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	bc 01       	movw	r22, r24
 cd6:	cd 01       	movw	r24, r26
 cd8:	08 95       	ret

00000cda <__udivmodsi4>:
 cda:	a1 e2       	ldi	r26, 0x21	; 33
 cdc:	1a 2e       	mov	r1, r26
 cde:	aa 1b       	sub	r26, r26
 ce0:	bb 1b       	sub	r27, r27
 ce2:	fd 01       	movw	r30, r26
 ce4:	0d c0       	rjmp	.+26     	; 0xd00 <__udivmodsi4_ep>

00000ce6 <__udivmodsi4_loop>:
 ce6:	aa 1f       	adc	r26, r26
 ce8:	bb 1f       	adc	r27, r27
 cea:	ee 1f       	adc	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	a2 17       	cp	r26, r18
 cf0:	b3 07       	cpc	r27, r19
 cf2:	e4 07       	cpc	r30, r20
 cf4:	f5 07       	cpc	r31, r21
 cf6:	20 f0       	brcs	.+8      	; 0xd00 <__udivmodsi4_ep>
 cf8:	a2 1b       	sub	r26, r18
 cfa:	b3 0b       	sbc	r27, r19
 cfc:	e4 0b       	sbc	r30, r20
 cfe:	f5 0b       	sbc	r31, r21

00000d00 <__udivmodsi4_ep>:
 d00:	66 1f       	adc	r22, r22
 d02:	77 1f       	adc	r23, r23
 d04:	88 1f       	adc	r24, r24
 d06:	99 1f       	adc	r25, r25
 d08:	1a 94       	dec	r1
 d0a:	69 f7       	brne	.-38     	; 0xce6 <__udivmodsi4_loop>
 d0c:	60 95       	com	r22
 d0e:	70 95       	com	r23
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	9b 01       	movw	r18, r22
 d16:	ac 01       	movw	r20, r24
 d18:	bd 01       	movw	r22, r26
 d1a:	cf 01       	movw	r24, r30
 d1c:	08 95       	ret

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
