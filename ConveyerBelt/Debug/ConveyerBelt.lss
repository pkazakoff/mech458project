
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000f16  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800104  00800104  00000fae  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001708  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014eb  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00002db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3d  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  000041c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  0000482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d5f  00000000  00000000  00004d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_1>
   8:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_2>
   c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_3>
  10:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_4>
  14:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_5>
  18:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_6>
  1c:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e1       	ldi	r30, 0x16	; 22
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	aa 3a       	cpi	r26, 0xAA	; 170
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 01 04 	call	0x802	; 0x802 <main>
  d4:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:

char ADC_is_running;
char Ignore_ADC_samples;

void setupADC() {
	DDRF = 0x00;
  dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | 0b01;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 64       	ori	r24, 0x41	; 65
  fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
  fe:	10 92 05 01 	sts	0x0105, r1
	Ignore_ADC_samples = 0;
 102:	10 92 04 01 	sts	0x0104, r1
	sei();
 106:	78 94       	sei
}
 108:	08 95       	ret

0000010a <startADC>:

void startADC() {
	ADC_is_running = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 05 01 	sts	0x0105, r24
	ADCSRA |= _BV(ADSC);
 110:	ea e7       	ldi	r30, 0x7A	; 122
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
	sei();
 11a:	78 94       	sei
}
 11c:	08 95       	ret

0000011e <stopADC>:

void stopADC() {
	ADC_is_running = 0;
 11e:	10 92 05 01 	sts	0x0105, r1
	ADCSRA &= ~_BV(ADSC);
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	80 83       	st	Z, r24
}
 12c:	08 95       	ret

0000012e <updateMinimum>:

void updateMinimum(int refl) {
 12e:	9c 01       	movw	r18, r24
	// are we to ignore samples?
	if(Ignore_ADC_samples == 1) return;
 130:	80 91 04 01 	lds	r24, 0x0104
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f4       	brne	.+2      	; 0x13a <updateMinimum+0xc>
 138:	41 c0       	rjmp	.+130    	; 0x1bc <updateMinimum+0x8e>
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples >= REFL_MAX_SAMPLES) return;
 13a:	80 91 60 01 	lds	r24, 0x0160
 13e:	90 91 61 01 	lds	r25, 0x0161
 142:	fc 01       	movw	r30, r24
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e8 0f       	add	r30, r24
 14a:	f9 1f       	adc	r31, r25
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ec 59       	subi	r30, 0x9C	; 156
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	44 81       	ldd	r20, Z+4	; 0x04
 156:	55 81       	ldd	r21, Z+5	; 0x05
 158:	48 3c       	cpi	r20, 0xC8	; 200
 15a:	51 05       	cpc	r21, r1
 15c:	7c f5       	brge	.+94     	; 0x1bc <updateMinimum+0x8e>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
 15e:	a9 01       	movw	r20, r18
 160:	42 53       	subi	r20, 0x32	; 50
 162:	50 40       	sbci	r21, 0x00	; 0
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	4f 3c       	cpi	r20, 0xCF	; 207
 168:	56 07       	cpc	r21, r22
 16a:	40 f5       	brcc	.+80     	; 0x1bc <updateMinimum+0x8e>
	/*long int meanprod = (long)ringBuf[currentRefl].avgRefl * (long)ringBuf[currentRefl].reflSamples;
	meanprod += refl;
	ringBuf[currentRefl].reflSamples++;
	ringBuf[currentRefl].avgRefl = meanprod / ringBuf[currentRefl].reflSamples;
	delaynms(1);*/
	if(ringBuf[currentRefl].minRefl > refl) ringBuf[currentRefl].minRefl = refl;
 16c:	fc 01       	movw	r30, r24
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e8 0f       	add	r30, r24
 174:	f9 1f       	adc	r31, r25
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ec 59       	subi	r30, 0x9C	; 156
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	42 81       	ldd	r20, Z+2	; 0x02
 180:	53 81       	ldd	r21, Z+3	; 0x03
 182:	24 17       	cp	r18, r20
 184:	35 07       	cpc	r19, r21
 186:	5c f4       	brge	.+22     	; 0x19e <updateMinimum+0x70>
 188:	fc 01       	movw	r30, r24
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	ec 59       	subi	r30, 0x9C	; 156
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	33 83       	std	Z+3, r19	; 0x03
 19c:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[currentRefl].reflSamples++;
 19e:	fc 01       	movw	r30, r24
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	8e 0f       	add	r24, r30
 1a6:	9f 1f       	adc	r25, r31
 1a8:	fc 01       	movw	r30, r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	ec 59       	subi	r30, 0x9C	; 156
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	84 81       	ldd	r24, Z+4	; 0x04
 1b4:	95 81       	ldd	r25, Z+5	; 0x05
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	95 83       	std	Z+5, r25	; 0x05
 1ba:	84 83       	std	Z+4, r24	; 0x04
 1bc:	08 95       	ret

000001be <__vector_29>:
	return;
}

ISR(ADC_vect) {
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	0b b6       	in	r0, 0x3b	; 59
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	updateMinimum(ADC);
 1e4:	80 91 78 00 	lds	r24, 0x0078
 1e8:	90 91 79 00 	lds	r25, 0x0079
 1ec:	0e 94 97 00 	call	0x12e	; 0x12e <updateMinimum>
	ADCSRA |= _BV(ADSC);
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	80 83       	st	Z, r24
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0b be       	out	0x3b, r0	; 59
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <setupMotor>:

char motorWaitForStepper;

void setupMotor() {
	// enable port for output
	DDRC |= ~(MOTOR_BITMASK);
 220:	87 b1       	in	r24, 0x07	; 7
 222:	8f 60       	ori	r24, 0x0F	; 15
 224:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 226:	88 b1       	in	r24, 0x08	; 8
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	DDRB = 0xFF;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	84 b9       	out	0x04, r24	; 4
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
 230:	83 ea       	ldi	r24, 0xA3	; 163
 232:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
 238:	8f e9       	ldi	r24, 0x9F	; 159
 23a:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
 23c:	10 92 06 01 	sts	0x0106, r1
}
 240:	08 95       	ret

00000242 <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
 242:	87 bd       	out	0x27, r24	; 39
}
 244:	08 95       	ret

00000246 <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
 246:	88 b1       	in	r24, 0x08	; 8
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	88 b9       	out	0x08, r24	; 8
}
 24e:	08 95       	ret

00000250 <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
 250:	88 b1       	in	r24, 0x08	; 8
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	81 60       	ori	r24, 0x01	; 1
 256:	88 b9       	out	0x08, r24	; 8
}
 258:	08 95       	ret

0000025a <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	88 b9       	out	0x08, r24	; 8
}
 260:	08 95       	ret

00000262 <setMotorCoast>:

void setMotorCoast() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
 262:	88 b1       	in	r24, 0x08	; 8
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	86 60       	ori	r24, 0x06	; 6
 268:	88 b9       	out	0x08, r24	; 8
 26a:	08 95       	ret

0000026c <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
 26c:	8d b3       	in	r24, 0x1d	; 29
 26e:	80 78       	andi	r24, 0x80	; 128
 270:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
 278:	8d b1       	in	r24, 0x0d	; 13
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Falling-edge interrupt
	EICRA |= _BV(ISC01);
 27e:	e9 e6       	ldi	r30, 0x69	; 105
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
 288:	80 81       	ld	r24, Z
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
 28e:	80 81       	ld	r24, Z
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
 294:	80 81       	ld	r24, Z
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
 29a:	80 81       	ld	r24, Z
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 2a0:	80 81       	ld	r24, Z
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
 2a6:	80 81       	ld	r24, Z
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
 2ac:	80 81       	ld	r24, Z
 2ae:	8f 7b       	andi	r24, 0xBF	; 191
 2b0:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
 2b2:	ea e6       	ldi	r30, 0x6A	; 106
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
 2bc:	80 81       	ld	r24, Z
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
 2c2:	80 81       	ld	r24, Z
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
 2c8:	80 81       	ld	r24, Z
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
 2ce:	80 81       	ld	r24, Z
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 7e       	andi	r24, 0xEF	; 239
 2d8:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
 2da:	8d b3       	in	r24, 0x1d	; 29
 2dc:	8f 67       	ori	r24, 0x7F	; 127
 2de:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
 2e0:	8c b3       	in	r24, 0x1c	; 28
 2e2:	8f 67       	ori	r24, 0x7F	; 127
 2e4:	8c bb       	out	0x1c, r24	; 28
	sei();
 2e6:	78 94       	sei
}
 2e8:	08 95       	ret

000002ea <makeDecision>:

void makeDecision(int index) {
	//if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
	//writeHexInt(ringBuf[index].avgRefl);
	int refl = ringBuf[index].minRefl;
 2ea:	fc 01       	movw	r30, r24
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e8 0f       	add	r30, r24
 2f2:	f9 1f       	adc	r31, r25
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	ec 59       	subi	r30, 0x9C	; 156
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	52 81       	ldd	r21, Z+2	; 0x02
 2fe:	43 81       	ldd	r20, Z+3	; 0x03
	if(ringBuf[index].metal == 1) {
 300:	21 81       	ldd	r18, Z+1	; 0x01
 302:	21 30       	cpi	r18, 0x01	; 1
 304:	41 f5       	brne	.+80     	; 0x356 <makeDecision+0x6c>
		if((refl < STEEL_MAX) && (refl > STEEL_MIN)) {
 306:	25 2f       	mov	r18, r21
 308:	34 2f       	mov	r19, r20
 30a:	a9 01       	movw	r20, r18
 30c:	45 55       	subi	r20, 0x55	; 85
 30e:	51 40       	sbci	r21, 0x01	; 1
 310:	41 3d       	cpi	r20, 0xD1	; 209
 312:	51 05       	cpc	r21, r1
 314:	68 f4       	brcc	.+26     	; 0x330 <makeDecision+0x46>
			ringBuf[index].type = STEEL;
 316:	fc 01       	movw	r30, r24
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	8e 0f       	add	r24, r30
 31e:	9f 1f       	adc	r25, r31
 320:	fc 01       	movw	r30, r24
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	ec 59       	subi	r30, 0x9C	; 156
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	80 83       	st	Z, r24
			return;
 32e:	08 95       	ret
		}
		if((refl < ALUMINUM_MAX) && (refl > ALUMINUM_MIN)) {
 330:	26 50       	subi	r18, 0x06	; 6
 332:	30 40       	sbci	r19, 0x00	; 0
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	26 32       	cpi	r18, 0x26	; 38
 338:	34 07       	cpc	r19, r20
 33a:	a0 f5       	brcc	.+104    	; 0x3a4 <makeDecision+0xba>
			ringBuf[index].type = ALUMINUM;
 33c:	fc 01       	movw	r30, r24
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	8e 0f       	add	r24, r30
 344:	9f 1f       	adc	r25, r31
 346:	fc 01       	movw	r30, r24
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ec 59       	subi	r30, 0x9C	; 156
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	84 e0       	ldi	r24, 0x04	; 4
 352:	80 83       	st	Z, r24
			return;
 354:	08 95       	ret
		}
	} else {	
		if((refl < BLACK_MAX) && (refl > BLACK_MIN)) {
 356:	25 2f       	mov	r18, r21
 358:	34 2f       	mov	r19, r20
 35a:	a9 01       	movw	r20, r18
 35c:	41 58       	subi	r20, 0x81	; 129
 35e:	52 40       	sbci	r21, 0x02	; 2
 360:	47 32       	cpi	r20, 0x27	; 39
 362:	51 05       	cpc	r21, r1
 364:	68 f4       	brcc	.+26     	; 0x380 <makeDecision+0x96>
			ringBuf[index].type = BLACK;
 366:	fc 01       	movw	r30, r24
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	8e 0f       	add	r24, r30
 36e:	9f 1f       	adc	r25, r31
 370:	fc 01       	movw	r30, r24
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ec 59       	subi	r30, 0x9C	; 156
 378:	fe 4f       	sbci	r31, 0xFE	; 254
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 83       	st	Z, r24
			return;
 37e:	08 95       	ret
		}
		if((refl < WHITE_MAX) && (refl > WHITE_MIN)) {
 380:	29 55       	subi	r18, 0x59	; 89
 382:	32 40       	sbci	r19, 0x02	; 2
 384:	25 32       	cpi	r18, 0x25	; 37
 386:	31 05       	cpc	r19, r1
 388:	68 f4       	brcc	.+26     	; 0x3a4 <makeDecision+0xba>
			ringBuf[index].type = WHITE;
 38a:	fc 01       	movw	r30, r24
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	8e 0f       	add	r24, r30
 392:	9f 1f       	adc	r25, r31
 394:	fc 01       	movw	r30, r24
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	ec 59       	subi	r30, 0x9C	; 156
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	80 83       	st	Z, r24
			return;
 3a2:	08 95       	ret
		}
	}
	writeHexInt(0xEF);	
 3a4:	8f ee       	ldi	r24, 0xEF	; 239
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
 3ac:	08 95       	ret

000003ae <firstLaserHandler>:
/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	// no pending item
	if(currentMetal == -1) {
 3ae:	80 91 a3 01 	lds	r24, 0x01A3
 3b2:	90 91 a4 01 	lds	r25, 0x01A4
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	92 07       	cpc	r25, r18
 3bc:	39 f4       	brne	.+14     	; 0x3cc <firstLaserHandler+0x1e>
		currentMetal = newRingBufItem();
 3be:	0e 94 56 05 	call	0xaac	; 0xaac <newRingBufItem>
 3c2:	90 93 a4 01 	sts	0x01A4, r25
 3c6:	80 93 a3 01 	sts	0x01A3, r24
 3ca:	08 95       	ret
	} else {
		//item in conversion
		
		// place the currently converting item on the queue
		newMetal(currentMetal);
 3cc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <newMetal>
		
		// make the new item and start conversion
		currentMetal = newRingBufItem();
 3d0:	0e 94 56 05 	call	0xaac	; 0xaac <newRingBufItem>
 3d4:	90 93 a4 01 	sts	0x01A4, r25
 3d8:	80 93 a3 01 	sts	0x01A3, r24
 3dc:	08 95       	ret

000003de <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	if(currentMetal != -1) ringBuf[currentMetal].metal = 1;
 3de:	80 91 a3 01 	lds	r24, 0x01A3
 3e2:	90 91 a4 01 	lds	r25, 0x01A4
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ea:	92 07       	cpc	r25, r18
 3ec:	61 f0       	breq	.+24     	; 0x406 <metalHandler+0x28>
 3ee:	fc 01       	movw	r30, r24
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	8e 0f       	add	r24, r30
 3f6:	9f 1f       	adc	r25, r31
 3f8:	fc 01       	movw	r30, r24
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	ec 59       	subi	r30, 0x9C	; 156
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	81 83       	std	Z+1, r24	; 0x01
 406:	08 95       	ret

00000408 <secondLaserHandler>:
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
 408:	80 91 05 01 	lds	r24, 0x0105
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	99 f4       	brne	.+38     	; 0x436 <secondLaserHandler+0x2e>
		// debounce
		Ignore_ADC_samples = 1;
 410:	80 93 04 01 	sts	0x0104, r24
		delaynms(DEBOUNCE_DELAY);
 414:	83 e0       	ldi	r24, 0x03	; 3
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
		Ignore_ADC_samples = 0;
 41c:	10 92 04 01 	sts	0x0104, r1
		if((PIND & 0b00000100) == 0b100) return;
 420:	4a 99       	sbic	0x09, 2	; 9
 422:	2c c0       	rjmp	.+88     	; 0x47c <secondLaserHandler+0x74>
		// stop ADC
		stopADC();
 424:	0e 94 8f 00 	call	0x11e	; 0x11e <stopADC>
		makeDecision(currentRefl);
 428:	80 91 60 01 	lds	r24, 0x0160
 42c:	90 91 61 01 	lds	r25, 0x0161
 430:	0e 94 75 01 	call	0x2ea	; 0x2ea <makeDecision>
 434:	08 95       	ret
		// TODO
	} else {
		delaynms(DEBOUNCE_DELAY);
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
		if((PIND & 0b00000100) == 0) return;
 43e:	4a 9b       	sbis	0x09, 2	; 9
 440:	1d c0       	rjmp	.+58     	; 0x47c <secondLaserHandler+0x74>
		if(metalCount == 0) {
 442:	80 91 0b 01 	lds	r24, 0x010B
 446:	90 91 0c 01 	lds	r25, 0x010C
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	79 f4       	brne	.+30     	; 0x46c <secondLaserHandler+0x64>
			currentRefl = currentMetal;
 44e:	80 91 a3 01 	lds	r24, 0x01A3
 452:	90 91 a4 01 	lds	r25, 0x01A4
 456:	90 93 61 01 	sts	0x0161, r25
 45a:	80 93 60 01 	sts	0x0160, r24
			currentMetal = -1;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	90 93 a4 01 	sts	0x01A4, r25
 466:	80 93 a3 01 	sts	0x01A3, r24
 46a:	06 c0       	rjmp	.+12     	; 0x478 <secondLaserHandler+0x70>
		} else {
			currentRefl = popMetal();
 46c:	0e 94 a8 04 	call	0x950	; 0x950 <popMetal>
 470:	90 93 61 01 	sts	0x0161, r25
 474:	80 93 60 01 	sts	0x0160, r24
		}			
		startADC();
 478:	0e 94 85 00 	call	0x10a	; 0x10a <startADC>
 47c:	08 95       	ret

0000047e <exitHandler>:

/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	writeDecInt(bufLength);
 47e:	80 91 a1 01 	lds	r24, 0x01A1
 482:	90 91 a2 01 	lds	r25, 0x01A2
 486:	0e 94 f5 05 	call	0xbea	; 0xbea <writeDecInt>
	// is there an item on the queue?
	if(bufLength==0) return; // Throw an error here
 48a:	80 91 a1 01 	lds	r24, 0x01A1
 48e:	90 91 a2 01 	lds	r25, 0x01A2
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	09 f4       	brne	.+2      	; 0x498 <exitHandler+0x1a>
 496:	69 c0       	rjmp	.+210    	; 0x56a <exitHandler+0xec>
	// are we in position?
	switch(ringBuf[ringTop].type) {
 498:	80 91 62 01 	lds	r24, 0x0162
 49c:	90 91 63 01 	lds	r25, 0x0163
 4a0:	fc 01       	movw	r30, r24
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	8e 0f       	add	r24, r30
 4a8:	9f 1f       	adc	r25, r31
 4aa:	fc 01       	movw	r30, r24
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ec 59       	subi	r30, 0x9C	; 156
 4b2:	fe 4f       	sbci	r31, 0xFE	; 254
 4b4:	80 81       	ld	r24, Z
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	99 f1       	breq	.+102    	; 0x520 <exitHandler+0xa2>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <exitHandler+0x46>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	e9 f5       	brne	.+122    	; 0x53c <exitHandler+0xbe>
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <exitHandler+0x50>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	81 f0       	breq	.+32     	; 0x4e8 <exitHandler+0x6a>
 4c8:	84 30       	cpi	r24, 0x04	; 4
 4ca:	c1 f5       	brne	.+112    	; 0x53c <exitHandler+0xbe>
 4cc:	1b c0       	rjmp	.+54     	; 0x504 <exitHandler+0x86>
		case BLACK:
			writeHexInt(0xEB);
 4ce:	8b ee       	ldi	r24, 0xEB	; 235
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
			if(steps==BLACK_POSITION) {
 4d6:	80 91 a7 01 	lds	r24, 0x01A7
 4da:	90 91 a8 01 	lds	r25, 0x01A8
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	69 f5       	brne	.+90     	; 0x53c <exitHandler+0xbe>
				popBuf();
 4e2:	0e 94 32 05 	call	0xa64	; 0xa64 <popBuf>
				return;
 4e6:	08 95       	ret
			}
			break;
		case STEEL:
			writeHexInt(0xE5);
 4e8:	85 ee       	ldi	r24, 0xE5	; 229
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
			if(steps==STEEL_POSITION) {
 4f0:	80 91 a7 01 	lds	r24, 0x01A7
 4f4:	90 91 a8 01 	lds	r25, 0x01A8
 4f8:	86 39       	cpi	r24, 0x96	; 150
 4fa:	91 05       	cpc	r25, r1
 4fc:	f9 f4       	brne	.+62     	; 0x53c <exitHandler+0xbe>
				popBuf();
 4fe:	0e 94 32 05 	call	0xa64	; 0xa64 <popBuf>
				return;
 502:	08 95       	ret
			}
			break;
		case ALUMINUM:
			writeHexInt(0xEA);
 504:	8a ee       	ldi	r24, 0xEA	; 234
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
			if(steps==ALUMINUM_POSIITION) {
 50c:	80 91 a7 01 	lds	r24, 0x01A7
 510:	90 91 a8 01 	lds	r25, 0x01A8
 514:	82 33       	cpi	r24, 0x32	; 50
 516:	91 05       	cpc	r25, r1
 518:	89 f4       	brne	.+34     	; 0x53c <exitHandler+0xbe>
				popBuf();
 51a:	0e 94 32 05 	call	0xa64	; 0xa64 <popBuf>
				return;
 51e:	08 95       	ret
			}
			break;
		case WHITE:
			writeHexInt(0xE0);
 520:	80 ee       	ldi	r24, 0xE0	; 224
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
			if(steps==WHITE_POSITION) {
 528:	80 91 a7 01 	lds	r24, 0x01A7
 52c:	90 91 a8 01 	lds	r25, 0x01A8
 530:	84 36       	cpi	r24, 0x64	; 100
 532:	91 05       	cpc	r25, r1
 534:	19 f4       	brne	.+6      	; 0x53c <exitHandler+0xbe>
				popBuf();
 536:	0e 94 32 05 	call	0xa64	; 0xa64 <popBuf>
				return;
 53a:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
 53c:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorBrake>
	writeDecInt(ringBuf[ringTop].minRefl);
 540:	80 91 62 01 	lds	r24, 0x0162
 544:	90 91 63 01 	lds	r25, 0x0163
 548:	fc 01       	movw	r30, r24
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	8e 0f       	add	r24, r30
 550:	9f 1f       	adc	r25, r31
 552:	fc 01       	movw	r30, r24
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	ec 59       	subi	r30, 0x9C	; 156
 55a:	fe 4f       	sbci	r31, 0xFE	; 254
 55c:	82 81       	ldd	r24, Z+2	; 0x02
 55e:	93 81       	ldd	r25, Z+3	; 0x03
 560:	0e 94 f5 05 	call	0xbea	; 0xbea <writeDecInt>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 06 01 	sts	0x0106, r24
 56a:	08 95       	ret

0000056c <shutdownHandler>:
}

void shutdownHandler() {
	if(bufLength == 0) {
 56c:	80 91 a1 01 	lds	r24, 0x01A1
 570:	90 91 a2 01 	lds	r25, 0x01A2
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	39 f4       	brne	.+14     	; 0x586 <shutdownHandler+0x1a>
		delaynms(500);
 578:	84 ef       	ldi	r24, 0xF4	; 244
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
		setMotorBrake();
 580:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorBrake>
 584:	ff cf       	rjmp	.-2      	; 0x584 <shutdownHandler+0x18>
 586:	08 95       	ret

00000588 <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	0b b6       	in	r0, 0x3b	; 59
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 5ae:	83 e0       	ldi	r24, 0x03	; 3
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PIND & 0b1) == 0) firstLaserHandler();
 5b6:	48 99       	sbic	0x09, 0	; 9
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__vector_1+0x36>
 5ba:	0e 94 d7 01 	call	0x3ae	; 0x3ae <firstLaserHandler>
}
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0b be       	out	0x3b, r0	; 59
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
 5e4:	1f 92       	push	r1
 5e6:	0f 92       	push	r0
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	0f 92       	push	r0
 5ec:	0b b6       	in	r0, 0x3b	; 59
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PIND & (1 << 1)) == 0) metalHandler();
 612:	49 99       	sbic	0x09, 1	; 9
 614:	02 c0       	rjmp	.+4      	; 0x61a <__vector_2+0x36>
 616:	0e 94 ef 01 	call	0x3de	; 0x3de <metalHandler>
}
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0b be       	out	0x3b, r0	; 59
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	0b b6       	in	r0, 0x3b	; 59
 64a:	0f 92       	push	r0
 64c:	11 24       	eor	r1, r1
 64e:	2f 93       	push	r18
 650:	3f 93       	push	r19
 652:	4f 93       	push	r20
 654:	5f 93       	push	r21
 656:	6f 93       	push	r22
 658:	7f 93       	push	r23
 65a:	8f 93       	push	r24
 65c:	9f 93       	push	r25
 65e:	af 93       	push	r26
 660:	bf 93       	push	r27
 662:	ef 93       	push	r30
 664:	ff 93       	push	r31
	// debounce is handled by function call
	secondLaserHandler();
 666:	0e 94 04 02 	call	0x408	; 0x408 <secondLaserHandler>
}
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	0f 90       	pop	r0
 684:	0b be       	out	0x3b, r0	; 59
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	0b b6       	in	r0, 0x3b	; 59
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PIND & (1 << 3)) == 0) exitHandler();
 6be:	4b 99       	sbic	0x09, 3	; 9
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__vector_4+0x36>
 6c2:	0e 94 3f 02 	call	0x47e	; 0x47e <exitHandler>
}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0b be       	out	0x3b, r0	; 59
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	0b b6       	in	r0, 0x3b	; 59
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PINE & (1 << 4)) == 0) hallLow = 1;
 71a:	64 99       	sbic	0x0c, 4	; 12
 71c:	03 c0       	rjmp	.+6      	; 0x724 <__vector_5+0x38>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	80 93 a9 01 	sts	0x01A9, r24
}
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	7f 91       	pop	r23
 732:	6f 91       	pop	r22
 734:	5f 91       	pop	r21
 736:	4f 91       	pop	r20
 738:	3f 91       	pop	r19
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0b be       	out	0x3b, r0	; 59
 740:	0f 90       	pop	r0
 742:	0f be       	out	0x3f, r0	; 63
 744:	0f 90       	pop	r0
 746:	1f 90       	pop	r1
 748:	18 95       	reti

0000074a <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	0f 92       	push	r0
 752:	0b b6       	in	r0, 0x3b	; 59
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	2f 93       	push	r18
 75a:	3f 93       	push	r19
 75c:	4f 93       	push	r20
 75e:	5f 93       	push	r21
 760:	6f 93       	push	r22
 762:	7f 93       	push	r23
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	af 93       	push	r26
 76a:	bf 93       	push	r27
 76c:	ef 93       	push	r30
 76e:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 770:	84 e1       	ldi	r24, 0x14	; 20
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PINE & (1 << 5)) == 0) {
 778:	65 99       	sbic	0x0c, 5	; 12
 77a:	05 c0       	rjmp	.+10     	; 0x786 <__vector_6+0x3c>
		shutdown = 1;
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 a0 01 	sts	0x01A0, r24
		shutdownHandler();
 782:	0e 94 b6 02 	call	0x56c	; 0x56c <shutdownHandler>
	}
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0b be       	out	0x3b, r0	; 59
 7a2:	0f 90       	pop	r0
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	0f 90       	pop	r0
 7a8:	1f 90       	pop	r1
 7aa:	18 95       	reti

000007ac <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	0b b6       	in	r0, 0x3b	; 59
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 7d2:	84 e1       	ldi	r24, 0x14	; 20
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if((PINE & (1 << 6)) == 0) {
 7da:	8c b1       	in	r24, 0x0c	; 12
		
	}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0b be       	out	0x3b, r0	; 59
 7f8:	0f 90       	pop	r0
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	0f 90       	pop	r0
 7fe:	1f 90       	pop	r1
 800:	18 95       	reti

00000802 <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
 802:	e1 e6       	ldi	r30, 0x61	; 97
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 e8       	ldi	r24, 0x80	; 128
 808:	80 83       	st	Z, r24
	CLKPR = 0;
 80a:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
 80c:	0e 94 3b 07 	call	0xe76	; 0xe76 <initializeTimer>
	
	delaynms(1000);
 810:	88 ee       	ldi	r24, 0xE8	; 232
 812:	93 e0       	ldi	r25, 0x03	; 3
 814:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	
	writeHexInt(0x50);
 818:	80 e5       	ldi	r24, 0x50	; 80
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
	
	// Initialize ring buffer
	initRingBuf();
 820:	0e 94 0c 05 	call	0xa18	; 0xa18 <initRingBuf>
	
	// Initialize metal queue
	initMetalQueue();
 824:	0e 94 8c 04 	call	0x918	; 0x918 <initMetalQueue>
	
	writeHexInt(0x51);
 828:	81 e5       	ldi	r24, 0x51	; 81
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
	
	// enable output for stepper and display.
	DDRA = 0xFF;
 830:	8f ef       	ldi	r24, 0xFF	; 255
 832:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
 834:	0e 94 36 01 	call	0x26c	; 0x26c <vectorInterrupts>
	
	writeHexInt(0x52);
 838:	82 e5       	ldi	r24, 0x52	; 82
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>

	// init stepper
	initalizeStepper();
 840:	0e 94 42 06 	call	0xc84	; 0xc84 <initalizeStepper>
	
	writeHexInt(0x53);
 844:	83 e5       	ldi	r24, 0x53	; 83
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>

	// zero stepper
	while(steps != 0){
 84c:	80 91 a7 01 	lds	r24, 0x01A7
 850:	90 91 a8 01 	lds	r25, 0x01A8
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	89 f0       	breq	.+34     	; 0x87a <main+0x78>
		stepTime(20,0);
 858:	84 e1       	ldi	r24, 0x14	; 20
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	0e 94 56 06 	call	0xcac	; 0xcac <stepTime>
		writeHexInt(steps);
 862:	80 91 a7 01 	lds	r24, 0x01A7
 866:	90 91 a8 01 	lds	r25, 0x01A8
 86a:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
	initalizeStepper();
	
	writeHexInt(0x53);

	// zero stepper
	while(steps != 0){
 86e:	80 91 a7 01 	lds	r24, 0x01A7
 872:	90 91 a8 01 	lds	r25, 0x01A8
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	79 f7       	brne	.-34     	; 0x858 <main+0x56>
		stepTime(20,0);
		writeHexInt(steps);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
 87a:	10 92 a8 01 	sts	0x01A8, r1
 87e:	10 92 a7 01 	sts	0x01A7, r1
	// reset hall effect check
	hallLow = 0;
 882:	10 92 a9 01 	sts	0x01A9, r1
	

	setupADC();
 886:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>

	// wait one second
	delaynms(1000);
 88a:	88 ee       	ldi	r24, 0xE8	; 232
 88c:	93 e0       	ldi	r25, 0x03	; 3
 88e:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	
	// start the motor
	setupMotor();
 892:	0e 94 10 01 	call	0x220	; 0x220 <setupMotor>
	writeHexInt(0x54);
 896:	84 e5       	ldi	r24, 0x54	; 84
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 16 06 	call	0xc2c	; 0xc2c <writeHexInt>
	setMotorFwd();
 89e:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
	
	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		delaynms(100);
		if(bufLength != 0) {
			switch(ringBuf[ringTop].type) {
 8a2:	c4 e6       	ldi	r28, 0x64	; 100
 8a4:	d1 e0       	ldi	r29, 0x01	; 1
	writeHexInt(0x54);
	setMotorFwd();
	
	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		delaynms(100);
 8a6:	84 e6       	ldi	r24, 0x64	; 100
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
		if(bufLength != 0) {
 8ae:	80 91 a1 01 	lds	r24, 0x01A1
 8b2:	90 91 a2 01 	lds	r25, 0x01A2
 8b6:	00 97       	sbiw	r24, 0x00	; 0
 8b8:	b1 f3       	breq	.-20     	; 0x8a6 <main+0xa4>
			switch(ringBuf[ringTop].type) {
 8ba:	80 91 62 01 	lds	r24, 0x0162
 8be:	90 91 63 01 	lds	r25, 0x0163
 8c2:	fc 01       	movw	r30, r24
 8c4:	ee 0f       	add	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	8e 0f       	add	r24, r30
 8ca:	9f 1f       	adc	r25, r31
 8cc:	fc 01       	movw	r30, r24
 8ce:	ee 0f       	add	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	ec 0f       	add	r30, r28
 8d4:	fd 1f       	adc	r31, r29
 8d6:	80 81       	ld	r24, Z
 8d8:	82 30       	cpi	r24, 0x02	; 2
 8da:	79 f0       	breq	.+30     	; 0x8fa <main+0xf8>
 8dc:	83 30       	cpi	r24, 0x03	; 3
 8de:	18 f4       	brcc	.+6      	; 0x8e6 <main+0xe4>
 8e0:	81 30       	cpi	r24, 0x01	; 1
 8e2:	09 f7       	brne	.-62     	; 0x8a6 <main+0xa4>
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <main+0xee>
 8e6:	83 30       	cpi	r24, 0x03	; 3
 8e8:	69 f0       	breq	.+26     	; 0x904 <main+0x102>
 8ea:	84 30       	cpi	r24, 0x04	; 4
 8ec:	e1 f6       	brne	.-72     	; 0x8a6 <main+0xa4>
 8ee:	0f c0       	rjmp	.+30     	; 0x90e <main+0x10c>
				case BLACK:
					stepperMoveTo(BLACK_POSITION);
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 f7 06 	call	0xdee	; 0xdee <stepperMoveTo>
					break;
 8f8:	d6 cf       	rjmp	.-84     	; 0x8a6 <main+0xa4>
				case WHITE:
					stepperMoveTo(WHITE_POSITION);
 8fa:	84 e6       	ldi	r24, 0x64	; 100
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 f7 06 	call	0xdee	; 0xdee <stepperMoveTo>
					break;
 902:	d1 cf       	rjmp	.-94     	; 0x8a6 <main+0xa4>
				case STEEL:
					stepperMoveTo(STEEL_POSITION);
 904:	86 e9       	ldi	r24, 0x96	; 150
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 f7 06 	call	0xdee	; 0xdee <stepperMoveTo>
					break;
 90c:	cc cf       	rjmp	.-104    	; 0x8a6 <main+0xa4>
				case ALUMINUM:
					stepperMoveTo(ALUMINUM_POSIITION);
 90e:	82 e3       	ldi	r24, 0x32	; 50
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 f7 06 	call	0xdee	; 0xdee <stepperMoveTo>
					break;
 916:	c7 cf       	rjmp	.-114    	; 0x8a6 <main+0xa4>

00000918 <initMetalQueue>:

/* void initMetalQueue()
   Purpose: initializes the ring buffer
   */
void initMetalQueue() {
	metalTop = 0;
 918:	10 92 08 01 	sts	0x0108, r1
 91c:	10 92 07 01 	sts	0x0107, r1
	metalBottom = 0;
 920:	10 92 0a 01 	sts	0x010A, r1
 924:	10 92 09 01 	sts	0x0109, r1
	metalCount = 0;
 928:	10 92 0c 01 	sts	0x010C, r1
 92c:	10 92 0b 01 	sts	0x010B, r1
	metalQueue[metalTop] = 0;
 930:	10 92 0e 01 	sts	0x010E, r1
 934:	10 92 0d 01 	sts	0x010D, r1
}
 938:	08 95       	ret

0000093a <getMetalOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getMetalOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (METAL_QUEUE_SIZE - 1)) {
 93a:	86 0f       	add	r24, r22
 93c:	97 1f       	adc	r25, r23
 93e:	88 32       	cpi	r24, 0x28	; 40
 940:	91 05       	cpc	r25, r1
 942:	14 f0       	brlt	.+4      	; 0x948 <getMetalOffset+0xe>
		return ((index + offset) - METAL_QUEUE_SIZE);
 944:	88 97       	sbiw	r24, 0x28	; 40
 946:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 948:	99 23       	and	r25, r25
 94a:	0c f4       	brge	.+2      	; 0x94e <getMetalOffset+0x14>
		return ((index + offset) + METAL_QUEUE_SIZE);
 94c:	88 96       	adiw	r24, 0x28	; 40
	}

	// didn't wrap
	return (index + offset);
 94e:	08 95       	ret

00000950 <popMetal>:
}

/* void popMetal()
   Purpose: pops the top item off the buffer
   */
int popMetal() {
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
	// if the buffer is empty, break
	if (metalCount == 0) return -1;
 958:	c0 91 0b 01 	lds	r28, 0x010B
 95c:	d0 91 0c 01 	lds	r29, 0x010C
 960:	20 97       	sbiw	r28, 0x00	; 0
 962:	c9 f0       	breq	.+50     	; 0x996 <popMetal+0x46>
	int content = metalQueue[metalTop];
 964:	80 91 07 01 	lds	r24, 0x0107
 968:	90 91 08 01 	lds	r25, 0x0108
 96c:	fc 01       	movw	r30, r24
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	e3 5f       	subi	r30, 0xF3	; 243
 974:	fe 4f       	sbci	r31, 0xFE	; 254
 976:	00 81       	ld	r16, Z
 978:	11 81       	ldd	r17, Z+1	; 0x01
	metalTop = getMetalOffset(metalTop, 1);
 97a:	61 e0       	ldi	r22, 0x01	; 1
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	0e 94 9d 04 	call	0x93a	; 0x93a <getMetalOffset>
 982:	90 93 08 01 	sts	0x0108, r25
 986:	80 93 07 01 	sts	0x0107, r24
	metalCount--;
 98a:	21 97       	sbiw	r28, 0x01	; 1
 98c:	d0 93 0c 01 	sts	0x010C, r29
 990:	c0 93 0b 01 	sts	0x010B, r28
	return content;
 994:	02 c0       	rjmp	.+4      	; 0x99a <popMetal+0x4a>
/* void popMetal()
   Purpose: pops the top item off the buffer
   */
int popMetal() {
	// if the buffer is empty, break
	if (metalCount == 0) return -1;
 996:	0f ef       	ldi	r16, 0xFF	; 255
 998:	1f ef       	ldi	r17, 0xFF	; 255
	int content = metalQueue[metalTop];
	metalTop = getMetalOffset(metalTop, 1);
	metalCount--;
	return content;
}
 99a:	80 2f       	mov	r24, r16
 99c:	91 2f       	mov	r25, r17
 99e:	df 91       	pop	r29
 9a0:	cf 91       	pop	r28
 9a2:	1f 91       	pop	r17
 9a4:	0f 91       	pop	r16
 9a6:	08 95       	ret

000009a8 <newMetal>:
}

/* int newMetal()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newMetal(int content) {
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	8c 01       	movw	r16, r24
	// if bottom is lagging behind top, reset bottom
	if(metalCount==0) metalBottom = metalTop;
 9b2:	c0 91 0b 01 	lds	r28, 0x010B
 9b6:	d0 91 0c 01 	lds	r29, 0x010C
 9ba:	20 97       	sbiw	r28, 0x00	; 0
 9bc:	49 f4       	brne	.+18     	; 0x9d0 <newMetal+0x28>
 9be:	80 91 07 01 	lds	r24, 0x0107
 9c2:	90 91 08 01 	lds	r25, 0x0108
 9c6:	90 93 0a 01 	sts	0x010A, r25
 9ca:	80 93 09 01 	sts	0x0109, r24
 9ce:	0f c0       	rjmp	.+30     	; 0x9ee <newMetal+0x46>
	// this next line is for cases when queue is not empty
	if(metalCount > 0) metalBottom = getMetalOffset(metalBottom, 1);
 9d0:	1c 16       	cp	r1, r28
 9d2:	1d 06       	cpc	r1, r29
 9d4:	64 f4       	brge	.+24     	; 0x9ee <newMetal+0x46>
 9d6:	80 91 09 01 	lds	r24, 0x0109
 9da:	90 91 0a 01 	lds	r25, 0x010A
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	70 e0       	ldi	r23, 0x00	; 0
 9e2:	0e 94 9d 04 	call	0x93a	; 0x93a <getMetalOffset>
 9e6:	90 93 0a 01 	sts	0x010A, r25
 9ea:	80 93 09 01 	sts	0x0109, r24
	metalCount++;
 9ee:	21 96       	adiw	r28, 0x01	; 1
 9f0:	d0 93 0c 01 	sts	0x010C, r29
 9f4:	c0 93 0b 01 	sts	0x010B, r28
	metalQueue[metalBottom] = content;
 9f8:	80 91 09 01 	lds	r24, 0x0109
 9fc:	90 91 0a 01 	lds	r25, 0x010A
 a00:	fc 01       	movw	r30, r24
 a02:	ee 0f       	add	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	e3 5f       	subi	r30, 0xF3	; 243
 a08:	fe 4f       	sbci	r31, 0xFE	; 254
 a0a:	11 83       	std	Z+1, r17	; 0x01
 a0c:	00 83       	st	Z, r16
	return metalBottom;
}
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	08 95       	ret

00000a18 <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
 a18:	10 92 63 01 	sts	0x0163, r1
 a1c:	10 92 62 01 	sts	0x0162, r1
	ringBottom = 0;
 a20:	10 92 5f 01 	sts	0x015F, r1
 a24:	10 92 5e 01 	sts	0x015E, r1
	currentMetal = -1;
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	90 93 a4 01 	sts	0x01A4, r25
 a30:	80 93 a3 01 	sts	0x01A3, r24
	currentRefl = 0;
 a34:	10 92 61 01 	sts	0x0161, r1
 a38:	10 92 60 01 	sts	0x0160, r1
	bufLength = 0;
 a3c:	10 92 a2 01 	sts	0x01A2, r1
 a40:	10 92 a1 01 	sts	0x01A1, r1
	inPause = 0;
 a44:	10 92 5d 01 	sts	0x015D, r1
	shutdown = 0;
 a48:	10 92 a0 01 	sts	0x01A0, r1
}
 a4c:	08 95       	ret

00000a4e <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
 a4e:	86 0f       	add	r24, r22
 a50:	97 1f       	adc	r25, r23
 a52:	8a 30       	cpi	r24, 0x0A	; 10
 a54:	91 05       	cpc	r25, r1
 a56:	14 f0       	brlt	.+4      	; 0xa5c <getBufOffset+0xe>
		return ((index + offset) - RING_BUF_SIZE);
 a58:	0a 97       	sbiw	r24, 0x0a	; 10
 a5a:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 a5c:	99 23       	and	r25, r25
 a5e:	0c f4       	brge	.+2      	; 0xa62 <getBufOffset+0x14>
		return ((index + offset) + RING_BUF_SIZE);
 a60:	0a 96       	adiw	r24, 0x0a	; 10
	}

	// didn't wrap
	return (index + offset);
 a62:	08 95       	ret

00000a64 <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
 a68:	c0 91 a1 01 	lds	r28, 0x01A1
 a6c:	d0 91 a2 01 	lds	r29, 0x01A2
 a70:	20 97       	sbiw	r28, 0x00	; 0
 a72:	c9 f0       	breq	.+50     	; 0xaa6 <popBuf+0x42>
	ringTop = getBufOffset(ringTop, 1);
 a74:	80 91 62 01 	lds	r24, 0x0162
 a78:	90 91 63 01 	lds	r25, 0x0163
 a7c:	61 e0       	ldi	r22, 0x01	; 1
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	0e 94 27 05 	call	0xa4e	; 0xa4e <getBufOffset>
 a84:	90 93 63 01 	sts	0x0163, r25
 a88:	80 93 62 01 	sts	0x0162, r24
	bufLength--;
 a8c:	21 97       	sbiw	r28, 0x01	; 1
 a8e:	d0 93 a2 01 	sts	0x01A2, r29
 a92:	c0 93 a1 01 	sts	0x01A1, r28
	if((bufLength == 0) && (shutdown == 1)) {
 a96:	20 97       	sbiw	r28, 0x00	; 0
 a98:	31 f4       	brne	.+12     	; 0xaa6 <popBuf+0x42>
 a9a:	80 91 a0 01 	lds	r24, 0x01A0
 a9e:	81 30       	cpi	r24, 0x01	; 1
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <popBuf+0x42>
		shutdownHandler();
 aa2:	0e 94 b6 02 	call	0x56c	; 0x56c <shutdownHandler>
	}
}
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <newRingBufItem>:
}

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
 aac:	cf 93       	push	r28
 aae:	df 93       	push	r29
	// if bottom is lagging behind top, reset bottom
	if(bufLength==0) ringBottom = ringTop;
 ab0:	c0 91 a1 01 	lds	r28, 0x01A1
 ab4:	d0 91 a2 01 	lds	r29, 0x01A2
 ab8:	20 97       	sbiw	r28, 0x00	; 0
 aba:	49 f4       	brne	.+18     	; 0xace <newRingBufItem+0x22>
 abc:	80 91 62 01 	lds	r24, 0x0162
 ac0:	90 91 63 01 	lds	r25, 0x0163
 ac4:	90 93 5f 01 	sts	0x015F, r25
 ac8:	80 93 5e 01 	sts	0x015E, r24
 acc:	0f c0       	rjmp	.+30     	; 0xaec <newRingBufItem+0x40>
	// this next line is for cases when queue is not empty
	if(bufLength > 0) ringBottom = getBufOffset(ringBottom, 1);
 ace:	1c 16       	cp	r1, r28
 ad0:	1d 06       	cpc	r1, r29
 ad2:	64 f4       	brge	.+24     	; 0xaec <newRingBufItem+0x40>
 ad4:	80 91 5e 01 	lds	r24, 0x015E
 ad8:	90 91 5f 01 	lds	r25, 0x015F
 adc:	61 e0       	ldi	r22, 0x01	; 1
 ade:	70 e0       	ldi	r23, 0x00	; 0
 ae0:	0e 94 27 05 	call	0xa4e	; 0xa4e <getBufOffset>
 ae4:	90 93 5f 01 	sts	0x015F, r25
 ae8:	80 93 5e 01 	sts	0x015E, r24
	bufLength++;
 aec:	21 96       	adiw	r28, 0x01	; 1
 aee:	d0 93 a2 01 	sts	0x01A2, r29
 af2:	c0 93 a1 01 	sts	0x01A1, r28
	ringBuf[ringBottom].minRefl = 1024;
 af6:	80 91 5e 01 	lds	r24, 0x015E
 afa:	90 91 5f 01 	lds	r25, 0x015F
 afe:	fc 01       	movw	r30, r24
 b00:	ee 0f       	add	r30, r30
 b02:	ff 1f       	adc	r31, r31
 b04:	e8 0f       	add	r30, r24
 b06:	f9 1f       	adc	r31, r25
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	ec 59       	subi	r30, 0x9C	; 156
 b0e:	fe 4f       	sbci	r31, 0xFE	; 254
 b10:	20 e0       	ldi	r18, 0x00	; 0
 b12:	34 e0       	ldi	r19, 0x04	; 4
 b14:	33 83       	std	Z+3, r19	; 0x03
 b16:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
 b18:	15 82       	std	Z+5, r1	; 0x05
 b1a:	14 82       	std	Z+4, r1	; 0x04
	ringBuf[ringBottom].metal = 0;
 b1c:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
 b1e:	10 82       	st	Z, r1
	return ringBottom;
}
 b20:	df 91       	pop	r29
 b22:	cf 91       	pop	r28
 b24:	08 95       	ret

00000b26 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
 b26:	87 30       	cpi	r24, 0x07	; 7
 b28:	71 f1       	breq	.+92     	; 0xb86 <getPatFomHex+0x60>
 b2a:	88 30       	cpi	r24, 0x08	; 8
 b2c:	70 f4       	brcc	.+28     	; 0xb4a <getPatFomHex+0x24>
 b2e:	83 30       	cpi	r24, 0x03	; 3
 b30:	11 f1       	breq	.+68     	; 0xb76 <getPatFomHex+0x50>
 b32:	84 30       	cpi	r24, 0x04	; 4
 b34:	28 f4       	brcc	.+10     	; 0xb40 <getPatFomHex+0x1a>
 b36:	81 30       	cpi	r24, 0x01	; 1
 b38:	d1 f1       	breq	.+116    	; 0xbae <getPatFomHex+0x88>
 b3a:	82 30       	cpi	r24, 0x02	; 2
 b3c:	d0 f4       	brcc	.+52     	; 0xb72 <getPatFomHex+0x4c>
 b3e:	17 c0       	rjmp	.+46     	; 0xb6e <getPatFomHex+0x48>
 b40:	85 30       	cpi	r24, 0x05	; 5
 b42:	e9 f0       	breq	.+58     	; 0xb7e <getPatFomHex+0x58>
 b44:	86 30       	cpi	r24, 0x06	; 6
 b46:	e8 f4       	brcc	.+58     	; 0xb82 <getPatFomHex+0x5c>
 b48:	18 c0       	rjmp	.+48     	; 0xb7a <getPatFomHex+0x54>
 b4a:	8b 30       	cpi	r24, 0x0B	; 11
 b4c:	21 f1       	breq	.+72     	; 0xb96 <getPatFomHex+0x70>
 b4e:	8c 30       	cpi	r24, 0x0C	; 12
 b50:	28 f4       	brcc	.+10     	; 0xb5c <getPatFomHex+0x36>
 b52:	89 30       	cpi	r24, 0x09	; 9
 b54:	e1 f0       	breq	.+56     	; 0xb8e <getPatFomHex+0x68>
 b56:	8a 30       	cpi	r24, 0x0A	; 10
 b58:	e0 f4       	brcc	.+56     	; 0xb92 <getPatFomHex+0x6c>
 b5a:	17 c0       	rjmp	.+46     	; 0xb8a <getPatFomHex+0x64>
 b5c:	8d 30       	cpi	r24, 0x0D	; 13
 b5e:	f9 f0       	breq	.+62     	; 0xb9e <getPatFomHex+0x78>
 b60:	8d 30       	cpi	r24, 0x0D	; 13
 b62:	d8 f0       	brcs	.+54     	; 0xb9a <getPatFomHex+0x74>
 b64:	8e 30       	cpi	r24, 0x0E	; 14
 b66:	e9 f0       	breq	.+58     	; 0xba2 <getPatFomHex+0x7c>
 b68:	8f 30       	cpi	r24, 0x0F	; 15
 b6a:	f9 f4       	brne	.+62     	; 0xbaa <getPatFomHex+0x84>
 b6c:	1c c0       	rjmp	.+56     	; 0xba6 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
 b6e:	8c ef       	ldi	r24, 0xFC	; 252
 b70:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
 b72:	8a ed       	ldi	r24, 0xDA	; 218
 b74:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
 b76:	82 ef       	ldi	r24, 0xF2	; 242
 b78:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
 b7a:	86 e6       	ldi	r24, 0x66	; 102
 b7c:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
 b7e:	86 eb       	ldi	r24, 0xB6	; 182
 b80:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
 b82:	8e eb       	ldi	r24, 0xBE	; 190
 b84:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
 b86:	80 ee       	ldi	r24, 0xE0	; 224
 b88:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
 b8a:	8e ef       	ldi	r24, 0xFE	; 254
 b8c:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
 b8e:	86 ee       	ldi	r24, 0xE6	; 230
 b90:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
 b92:	8e ee       	ldi	r24, 0xEE	; 238
 b94:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
 b96:	8e e3       	ldi	r24, 0x3E	; 62
 b98:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
 b9a:	8c e9       	ldi	r24, 0x9C	; 156
 b9c:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
 b9e:	8a e7       	ldi	r24, 0x7A	; 122
 ba0:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
 ba2:	8e e9       	ldi	r24, 0x9E	; 158
 ba4:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
 ba6:	8e e8       	ldi	r24, 0x8E	; 142
 ba8:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
 baa:	80 e0       	ldi	r24, 0x00	; 0
 bac:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
 bae:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
 bb0:	08 95       	ret

00000bb2 <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 bb2:	20 e0       	ldi	r18, 0x00	; 0
 bb4:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
 bb6:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 bb8:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
 bba:	ac 01       	movw	r20, r24
 bbc:	02 2e       	mov	r0, r18
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <writePattern+0x12>
 bc0:	55 95       	asr	r21
 bc2:	47 95       	ror	r20
 bc4:	0a 94       	dec	r0
 bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <writePattern+0xe>
 bc8:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 bca:	42 95       	swap	r20
 bcc:	44 0f       	add	r20, r20
 bce:	44 0f       	add	r20, r20
 bd0:	40 7c       	andi	r20, 0xC0	; 192
 bd2:	56 2f       	mov	r21, r22
 bd4:	5f 7b       	andi	r21, 0xBF	; 191
 bd6:	45 2b       	or	r20, r21
 bd8:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
 bda:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
 bdc:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	28 30       	cpi	r18, 0x08	; 8
 be4:	31 05       	cpc	r19, r1
 be6:	41 f7       	brne	.-48     	; 0xbb8 <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
 be8:	08 95       	ret

00000bea <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
 bea:	ef 92       	push	r14
 bec:	ff 92       	push	r15
 bee:	0f 93       	push	r16
 bf0:	1f 93       	push	r17
 bf2:	cf 93       	push	r28
 bf4:	df 93       	push	r29
 bf6:	c3 e0       	ldi	r28, 0x03	; 3
 bf8:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
 bfa:	0f 2e       	mov	r0, r31
 bfc:	fa e0       	ldi	r31, 0x0A	; 10
 bfe:	ef 2e       	mov	r14, r31
 c00:	ff 24       	eor	r15, r15
 c02:	f0 2d       	mov	r31, r0
 c04:	b7 01       	movw	r22, r14
 c06:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 c0a:	16 2f       	mov	r17, r22
 c0c:	07 2f       	mov	r16, r23
 c0e:	0e 94 93 05 	call	0xb26	; 0xb26 <getPatFomHex>
 c12:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <writePattern>
		number = number / 10;
 c16:	81 2f       	mov	r24, r17
 c18:	90 2f       	mov	r25, r16
 c1a:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 c1c:	99 f7       	brne	.-26     	; 0xc04 <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	ff 90       	pop	r15
 c28:	ef 90       	pop	r14
 c2a:	08 95       	ret

00000c2c <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
 c2c:	ef 92       	push	r14
 c2e:	ff 92       	push	r15
 c30:	0f 93       	push	r16
 c32:	1f 93       	push	r17
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	ec 01       	movw	r28, r24
 c3a:	03 e0       	ldi	r16, 0x03	; 3
 c3c:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
 c3e:	ee 24       	eor	r14, r14
 c40:	ff 24       	eor	r15, r15
 c42:	68 94       	set
 c44:	e4 f8       	bld	r14, 4
 c46:	ce 01       	movw	r24, r28
 c48:	b7 01       	movw	r22, r14
 c4a:	0e 94 62 07 	call	0xec4	; 0xec4 <__divmodhi4>
 c4e:	0e 94 93 05 	call	0xb26	; 0xb26 <getPatFomHex>
 c52:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <writePattern>
		number = number / 16;
 c56:	ce 01       	movw	r24, r28
 c58:	dd 23       	and	r29, r29
 c5a:	0c f4       	brge	.+2      	; 0xc5e <writeHexInt+0x32>
 c5c:	0f 96       	adiw	r24, 0x0f	; 15
 c5e:	ec 01       	movw	r28, r24
 c60:	d5 95       	asr	r29
 c62:	c7 95       	ror	r28
 c64:	d5 95       	asr	r29
 c66:	c7 95       	ror	r28
 c68:	d5 95       	asr	r29
 c6a:	c7 95       	ror	r28
 c6c:	d5 95       	asr	r29
 c6e:	c7 95       	ror	r28
 c70:	01 50       	subi	r16, 0x01	; 1
 c72:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 c74:	41 f7       	brne	.-48     	; 0xc46 <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
 c76:	df 91       	pop	r29
 c78:	cf 91       	pop	r28
 c7a:	1f 91       	pop	r17
 c7c:	0f 91       	pop	r16
 c7e:	ff 90       	pop	r15
 c80:	ef 90       	pop	r14
 c82:	08 95       	ret

00000c84 <initalizeStepper>:


// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
 c84:	81 b1       	in	r24, 0x01	; 1
 c86:	8f 63       	ori	r24, 0x3F	; 63
 c88:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
 c8a:	10 92 a6 01 	sts	0x01A6, r1
 c8e:	10 92 a5 01 	sts	0x01A5, r1
	PORTA = (PORTA & 0b11000000) | states[currentState];
 c92:	82 b1       	in	r24, 0x02	; 2
 c94:	80 7c       	andi	r24, 0xC0	; 192
 c96:	80 63       	ori	r24, 0x30	; 48
 c98:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
 c9a:	10 92 a9 01 	sts	0x01A9, r1
	steps = 1;
 c9e:	81 e0       	ldi	r24, 0x01	; 1
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	90 93 a8 01 	sts	0x01A8, r25
 ca6:	80 93 a7 01 	sts	0x01A7, r24
}
 caa:	08 95       	ret

00000cac <stepTime>:


void stepTime(int stepTime, char direction) {
 cac:	cf 93       	push	r28
 cae:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
 cb0:	0e 94 41 07 	call	0xe82	; 0xe82 <delaynms>
	if(direction == 0) { //forward direction
 cb4:	cc 23       	and	r28, r28
 cb6:	81 f5       	brne	.+96     	; 0xd18 <stepTime+0x6c>
		currentState++;
 cb8:	80 91 a5 01 	lds	r24, 0x01A5
 cbc:	90 91 a6 01 	lds	r25, 0x01A6
 cc0:	01 96       	adiw	r24, 0x01	; 1
 cc2:	90 93 a6 01 	sts	0x01A6, r25
 cc6:	80 93 a5 01 	sts	0x01A5, r24
		if (currentState==4) currentState = 0;
 cca:	84 30       	cpi	r24, 0x04	; 4
 ccc:	91 05       	cpc	r25, r1
 cce:	21 f4       	brne	.+8      	; 0xcd8 <stepTime+0x2c>
 cd0:	10 92 a6 01 	sts	0x01A6, r1
 cd4:	10 92 a5 01 	sts	0x01A5, r1
		PORTA = (PORTA & 0b11000000) | states[currentState];
 cd8:	82 b1       	in	r24, 0x02	; 2
 cda:	e0 91 a5 01 	lds	r30, 0x01A5
 cde:	f0 91 a6 01 	lds	r31, 0x01A6
 ce2:	e0 50       	subi	r30, 0x00	; 0
 ce4:	ff 4f       	sbci	r31, 0xFF	; 255
 ce6:	80 7c       	andi	r24, 0xC0	; 192
 ce8:	90 81       	ld	r25, Z
 cea:	89 2b       	or	r24, r25
 cec:	82 b9       	out	0x02, r24	; 2
		steps++;
 cee:	80 91 a7 01 	lds	r24, 0x01A7
 cf2:	90 91 a8 01 	lds	r25, 0x01A8
 cf6:	01 96       	adiw	r24, 0x01	; 1
 cf8:	90 93 a8 01 	sts	0x01A8, r25
 cfc:	80 93 a7 01 	sts	0x01A7, r24
		if(hallLow == 1) {
 d00:	80 91 a9 01 	lds	r24, 0x01A9
 d04:	81 30       	cpi	r24, 0x01	; 1
 d06:	09 f0       	breq	.+2      	; 0xd0a <stepTime+0x5e>
 d08:	40 c0       	rjmp	.+128    	; 0xd8a <stepTime+0xde>
			steps = 0;
 d0a:	10 92 a8 01 	sts	0x01A8, r1
 d0e:	10 92 a7 01 	sts	0x01A7, r1
			hallLow = 0;
 d12:	10 92 a9 01 	sts	0x01A9, r1
 d16:	39 c0       	rjmp	.+114    	; 0xd8a <stepTime+0xde>
		}
	}
	else { //reverse direction
		currentState--;
 d18:	80 91 a5 01 	lds	r24, 0x01A5
 d1c:	90 91 a6 01 	lds	r25, 0x01A6
 d20:	01 97       	sbiw	r24, 0x01	; 1
 d22:	90 93 a6 01 	sts	0x01A6, r25
 d26:	80 93 a5 01 	sts	0x01A5, r24
		if (currentState==-1) currentState = 3;
 d2a:	2f ef       	ldi	r18, 0xFF	; 255
 d2c:	8f 3f       	cpi	r24, 0xFF	; 255
 d2e:	92 07       	cpc	r25, r18
 d30:	31 f4       	brne	.+12     	; 0xd3e <stepTime+0x92>
 d32:	83 e0       	ldi	r24, 0x03	; 3
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	90 93 a6 01 	sts	0x01A6, r25
 d3a:	80 93 a5 01 	sts	0x01A5, r24
		PORTA = (PORTA & 0b11000000) | states[currentState];
 d3e:	82 b1       	in	r24, 0x02	; 2
 d40:	e0 91 a5 01 	lds	r30, 0x01A5
 d44:	f0 91 a6 01 	lds	r31, 0x01A6
 d48:	e0 50       	subi	r30, 0x00	; 0
 d4a:	ff 4f       	sbci	r31, 0xFF	; 255
 d4c:	80 7c       	andi	r24, 0xC0	; 192
 d4e:	90 81       	ld	r25, Z
 d50:	89 2b       	or	r24, r25
 d52:	82 b9       	out	0x02, r24	; 2
		steps--;
 d54:	80 91 a7 01 	lds	r24, 0x01A7
 d58:	90 91 a8 01 	lds	r25, 0x01A8
 d5c:	01 97       	sbiw	r24, 0x01	; 1
 d5e:	90 93 a8 01 	sts	0x01A8, r25
 d62:	80 93 a7 01 	sts	0x01A7, r24
		if(steps < 0) steps = 199;
 d66:	99 23       	and	r25, r25
 d68:	34 f4       	brge	.+12     	; 0xd76 <stepTime+0xca>
 d6a:	87 ec       	ldi	r24, 0xC7	; 199
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	90 93 a8 01 	sts	0x01A8, r25
 d72:	80 93 a7 01 	sts	0x01A7, r24
		if(hallLow == 1) {
 d76:	80 91 a9 01 	lds	r24, 0x01A9
 d7a:	81 30       	cpi	r24, 0x01	; 1
 d7c:	31 f4       	brne	.+12     	; 0xd8a <stepTime+0xde>
			steps = 0;
 d7e:	10 92 a8 01 	sts	0x01A8, r1
 d82:	10 92 a7 01 	sts	0x01A7, r1
			hallLow = 0;
 d86:	10 92 a9 01 	sts	0x01A9, r1
		}				
	}
}
 d8a:	cf 91       	pop	r28
 d8c:	08 95       	ret

00000d8e <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
 d8e:	86 17       	cp	r24, r22
 d90:	97 07       	cpc	r25, r23
 d92:	4c f4       	brge	.+18     	; 0xda6 <forwardSteps+0x18>
 d94:	68 1b       	sub	r22, r24
 d96:	79 0b       	sbc	r23, r25
 d98:	1a f4       	brpl	.+6      	; 0xda0 <forwardSteps+0x12>
 d9a:	70 95       	com	r23
 d9c:	61 95       	neg	r22
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	86 2f       	mov	r24, r22
 da2:	97 2f       	mov	r25, r23
 da4:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - (target - current));
 da6:	86 1b       	sub	r24, r22
 da8:	97 0b       	sbc	r25, r23
 daa:	9c 01       	movw	r18, r24
 dac:	28 53       	subi	r18, 0x38	; 56
 dae:	3f 4f       	sbci	r19, 0xFF	; 255
 db0:	1a f4       	brpl	.+6      	; 0xdb8 <forwardSteps+0x2a>
 db2:	30 95       	com	r19
 db4:	21 95       	neg	r18
 db6:	3f 4f       	sbci	r19, 0xFF	; 255
 db8:	82 2f       	mov	r24, r18
 dba:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 dbc:	08 95       	ret

00000dbe <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
 dbe:	68 17       	cp	r22, r24
 dc0:	79 07       	cpc	r23, r25
 dc2:	4c f4       	brge	.+18     	; 0xdd6 <reverseSteps+0x18>
 dc4:	68 1b       	sub	r22, r24
 dc6:	79 0b       	sbc	r23, r25
 dc8:	1a f4       	brpl	.+6      	; 0xdd0 <reverseSteps+0x12>
 dca:	70 95       	com	r23
 dcc:	61 95       	neg	r22
 dce:	7f 4f       	sbci	r23, 0xFF	; 255
 dd0:	86 2f       	mov	r24, r22
 dd2:	97 2f       	mov	r25, r23
 dd4:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - (target - current));
 dd6:	86 1b       	sub	r24, r22
 dd8:	97 0b       	sbc	r25, r23
 dda:	9c 01       	movw	r18, r24
 ddc:	28 53       	subi	r18, 0x38	; 56
 dde:	3f 4f       	sbci	r19, 0xFF	; 255
 de0:	1a f4       	brpl	.+6      	; 0xde8 <reverseSteps+0x2a>
 de2:	30 95       	com	r19
 de4:	21 95       	neg	r18
 de6:	3f 4f       	sbci	r19, 0xFF	; 255
 de8:	82 2f       	mov	r24, r18
 dea:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 dec:	08 95       	ret

00000dee <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
 dee:	ef 92       	push	r14
 df0:	ff 92       	push	r15
 df2:	0f 93       	push	r16
 df4:	1f 93       	push	r17
 df6:	cf 93       	push	r28
 df8:	df 93       	push	r29
 dfa:	7c 01       	movw	r14, r24
	if (steps == nextPosition) return;
 dfc:	c0 91 a7 01 	lds	r28, 0x01A7
 e00:	d0 91 a8 01 	lds	r29, 0x01A8
 e04:	c8 17       	cp	r28, r24
 e06:	d9 07       	cpc	r29, r25
 e08:	79 f1       	breq	.+94     	; 0xe68 <stepperMoveTo+0x7a>
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
 e0a:	ce 01       	movw	r24, r28
 e0c:	b7 01       	movw	r22, r14
 e0e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <forwardSteps>
 e12:	8c 01       	movw	r16, r24
 e14:	ce 01       	movw	r24, r28
 e16:	b7 01       	movw	r22, r14
 e18:	0e 94 df 06 	call	0xdbe	; 0xdbe <reverseSteps>
 e1c:	08 17       	cp	r16, r24
 e1e:	19 07       	cpc	r17, r25
 e20:	6c f4       	brge	.+26     	; 0xe3c <stepperMoveTo+0x4e>
		while(steps != nextPosition) {
			stepTime(15,0);
 e22:	8f e0       	ldi	r24, 0x0F	; 15
 e24:	90 e0       	ldi	r25, 0x00	; 0
 e26:	60 e0       	ldi	r22, 0x00	; 0
 e28:	0e 94 56 06 	call	0xcac	; 0xcac <stepTime>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if (steps == nextPosition) return;
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
		while(steps != nextPosition) {
 e2c:	80 91 a7 01 	lds	r24, 0x01A7
 e30:	90 91 a8 01 	lds	r25, 0x01A8
 e34:	8e 15       	cp	r24, r14
 e36:	9f 05       	cpc	r25, r15
 e38:	a1 f7       	brne	.-24     	; 0xe22 <stepperMoveTo+0x34>
 e3a:	0c c0       	rjmp	.+24     	; 0xe54 <stepperMoveTo+0x66>
		}
	}
	
	else {
			while(steps != nextPosition) {
				stepTime(15,1);
 e3c:	8f e0       	ldi	r24, 0x0F	; 15
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	61 e0       	ldi	r22, 0x01	; 1
 e42:	0e 94 56 06 	call	0xcac	; 0xcac <stepTime>
			stepTime(15,0);
		}
	}
	
	else {
			while(steps != nextPosition) {
 e46:	80 91 a7 01 	lds	r24, 0x01A7
 e4a:	90 91 a8 01 	lds	r25, 0x01A8
 e4e:	8e 15       	cp	r24, r14
 e50:	9f 05       	cpc	r25, r15
 e52:	a1 f7       	brne	.-24     	; 0xe3c <stepperMoveTo+0x4e>
				stepTime(15,1);
			}			
		}
	
	if(motorWaitForStepper == 1) {
 e54:	80 91 06 01 	lds	r24, 0x0106
 e58:	81 30       	cpi	r24, 0x01	; 1
 e5a:	31 f4       	brne	.+12     	; 0xe68 <stepperMoveTo+0x7a>
		// start the motor back up
		setMotorFwd();
 e5c:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
 e60:	10 92 06 01 	sts	0x0106, r1
		// fire the exit logic again
		exitHandler();
 e64:	0e 94 3f 02 	call	0x47e	; 0x47e <exitHandler>
	}
}
 e68:	df 91       	pop	r29
 e6a:	cf 91       	pop	r28
 e6c:	1f 91       	pop	r17
 e6e:	0f 91       	pop	r16
 e70:	ff 90       	pop	r15
 e72:	ef 90       	pop	r14
 e74:	08 95       	ret

00000e76 <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
 e76:	e1 e8       	ldi	r30, 0x81	; 129
 e78:	f0 e0       	ldi	r31, 0x00	; 0
 e7a:	80 81       	ld	r24, Z
 e7c:	81 60       	ori	r24, 0x01	; 1
 e7e:	80 83       	st	Z, r24
} 
 e80:	08 95       	ret

00000e82 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
 e82:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
 e84:	e1 e8       	ldi	r30, 0x81	; 129
 e86:	f0 e0       	ldi	r31, 0x00	; 0
 e88:	80 81       	ld	r24, Z
 e8a:	88 60       	ori	r24, 0x08	; 8
 e8c:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
 e8e:	80 81       	ld	r24, Z
 e90:	83 60       	ori	r24, 0x03	; 3
 e92:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
 e94:	12 16       	cp	r1, r18
 e96:	13 06       	cpc	r1, r19
 e98:	a4 f4       	brge	.+40     	; 0xec2 <delaynms+0x40>
 e9a:	80 e0       	ldi	r24, 0x00	; 0
 e9c:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 e9e:	e8 e8       	ldi	r30, 0x88	; 136
 ea0:	f0 e0       	ldi	r31, 0x00	; 0
 ea2:	4d e7       	ldi	r20, 0x7D	; 125
 ea4:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
 ea6:	a4 e8       	ldi	r26, 0x84	; 132
 ea8:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 eaa:	51 83       	std	Z+1, r21	; 0x01
 eac:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
 eae:	11 96       	adiw	r26, 0x01	; 1
 eb0:	1c 92       	st	X, r1
 eb2:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
 eb4:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
 eb6:	b1 9b       	sbis	0x16, 1	; 22
 eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
 eba:	01 96       	adiw	r24, 0x01	; 1
 ebc:	82 17       	cp	r24, r18
 ebe:	93 07       	cpc	r25, r19
 ec0:	a1 f7       	brne	.-24     	; 0xeaa <delaynms+0x28>
 ec2:	08 95       	ret

00000ec4 <__divmodhi4>:
 ec4:	97 fb       	bst	r25, 7
 ec6:	09 2e       	mov	r0, r25
 ec8:	07 26       	eor	r0, r23
 eca:	0a d0       	rcall	.+20     	; 0xee0 <__divmodhi4_neg1>
 ecc:	77 fd       	sbrc	r23, 7
 ece:	04 d0       	rcall	.+8      	; 0xed8 <__divmodhi4_neg2>
 ed0:	0c d0       	rcall	.+24     	; 0xeea <__udivmodhi4>
 ed2:	06 d0       	rcall	.+12     	; 0xee0 <__divmodhi4_neg1>
 ed4:	00 20       	and	r0, r0
 ed6:	1a f4       	brpl	.+6      	; 0xede <__divmodhi4_exit>

00000ed8 <__divmodhi4_neg2>:
 ed8:	70 95       	com	r23
 eda:	61 95       	neg	r22
 edc:	7f 4f       	sbci	r23, 0xFF	; 255

00000ede <__divmodhi4_exit>:
 ede:	08 95       	ret

00000ee0 <__divmodhi4_neg1>:
 ee0:	f6 f7       	brtc	.-4      	; 0xede <__divmodhi4_exit>
 ee2:	90 95       	com	r25
 ee4:	81 95       	neg	r24
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	08 95       	ret

00000eea <__udivmodhi4>:
 eea:	aa 1b       	sub	r26, r26
 eec:	bb 1b       	sub	r27, r27
 eee:	51 e1       	ldi	r21, 0x11	; 17
 ef0:	07 c0       	rjmp	.+14     	; 0xf00 <__udivmodhi4_ep>

00000ef2 <__udivmodhi4_loop>:
 ef2:	aa 1f       	adc	r26, r26
 ef4:	bb 1f       	adc	r27, r27
 ef6:	a6 17       	cp	r26, r22
 ef8:	b7 07       	cpc	r27, r23
 efa:	10 f0       	brcs	.+4      	; 0xf00 <__udivmodhi4_ep>
 efc:	a6 1b       	sub	r26, r22
 efe:	b7 0b       	sbc	r27, r23

00000f00 <__udivmodhi4_ep>:
 f00:	88 1f       	adc	r24, r24
 f02:	99 1f       	adc	r25, r25
 f04:	5a 95       	dec	r21
 f06:	a9 f7       	brne	.-22     	; 0xef2 <__udivmodhi4_loop>
 f08:	80 95       	com	r24
 f0a:	90 95       	com	r25
 f0c:	bc 01       	movw	r22, r24
 f0e:	cd 01       	movw	r24, r26
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
