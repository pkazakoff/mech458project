
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000da6  00000e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  00800104  00800104  00000e3e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001381  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f2  00000000  00000000  00002ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bab  00000000  00000000  000031ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00003d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c5d  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_1>
   8:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_2>
   c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_3>
  10:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_4>
  14:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_5>
  18:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_6>
  1c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ea       	ldi	r30, 0xA6	; 166
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a8 39       	cpi	r26, 0x98	; 152
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 cb 03 	call	0x796	; 0x796 <main>
  d4:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:

char ADC_is_running;
char Ignore_ADC_samples;

void setupADC() {
	DDRF = 0x00;
  dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | 0b01;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 64       	ori	r24, 0x41	; 65
  fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
  fe:	10 92 05 01 	sts	0x0105, r1
	Ignore_ADC_samples = 0;
 102:	10 92 04 01 	sts	0x0104, r1
	sei();
 106:	78 94       	sei
}
 108:	08 95       	ret

0000010a <startADC>:

void startADC() {
	ADC_is_running = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 05 01 	sts	0x0105, r24
	ADCSRA |= _BV(ADSC);
 110:	ea e7       	ldi	r30, 0x7A	; 122
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
	sei();
 11a:	78 94       	sei
}
 11c:	08 95       	ret

0000011e <stopADC>:

void stopADC() {
	ADC_is_running = 0;
 11e:	10 92 05 01 	sts	0x0105, r1
	ADCSRA &= ~_BV(ADSC);
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	80 83       	st	Z, r24
}
 12c:	08 95       	ret

0000012e <updateMinimum>:

void updateMinimum(int refl) {
 12e:	9c 01       	movw	r18, r24
	// are we to ignore samples?
	if(Ignore_ADC_samples == 1) return;
 130:	80 91 04 01 	lds	r24, 0x0104
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f4       	brne	.+2      	; 0x13a <updateMinimum+0xc>
 138:	41 c0       	rjmp	.+130    	; 0x1bc <updateMinimum+0x8e>
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples >= REFL_MAX_SAMPLES) return;
 13a:	80 91 0a 01 	lds	r24, 0x010A
 13e:	90 91 0b 01 	lds	r25, 0x010B
 142:	fc 01       	movw	r30, r24
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	e8 0f       	add	r30, r24
 14a:	f9 1f       	adc	r31, r25
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	e2 5f       	subi	r30, 0xF2	; 242
 152:	fe 4f       	sbci	r31, 0xFE	; 254
 154:	44 81       	ldd	r20, Z+4	; 0x04
 156:	55 81       	ldd	r21, Z+5	; 0x05
 158:	48 3c       	cpi	r20, 0xC8	; 200
 15a:	51 05       	cpc	r21, r1
 15c:	7c f5       	brge	.+94     	; 0x1bc <updateMinimum+0x8e>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
 15e:	a9 01       	movw	r20, r18
 160:	42 53       	subi	r20, 0x32	; 50
 162:	50 40       	sbci	r21, 0x00	; 0
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	4f 3c       	cpi	r20, 0xCF	; 207
 168:	56 07       	cpc	r21, r22
 16a:	40 f5       	brcc	.+80     	; 0x1bc <updateMinimum+0x8e>
	/*long int meanprod = (long)ringBuf[currentRefl].avgRefl * (long)ringBuf[currentRefl].reflSamples;
	meanprod += refl;
	ringBuf[currentRefl].reflSamples++;
	ringBuf[currentRefl].avgRefl = meanprod / ringBuf[currentRefl].reflSamples;
	delaynms(1);*/
	if(ringBuf[currentRefl].minRefl > refl) ringBuf[currentRefl].minRefl = refl;
 16c:	fc 01       	movw	r30, r24
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e8 0f       	add	r30, r24
 174:	f9 1f       	adc	r31, r25
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e2 5f       	subi	r30, 0xF2	; 242
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	42 81       	ldd	r20, Z+2	; 0x02
 180:	53 81       	ldd	r21, Z+3	; 0x03
 182:	24 17       	cp	r18, r20
 184:	35 07       	cpc	r19, r21
 186:	5c f4       	brge	.+22     	; 0x19e <updateMinimum+0x70>
 188:	fc 01       	movw	r30, r24
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e8 0f       	add	r30, r24
 190:	f9 1f       	adc	r31, r25
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e2 5f       	subi	r30, 0xF2	; 242
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	33 83       	std	Z+3, r19	; 0x03
 19c:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[currentRefl].reflSamples++;
 19e:	fc 01       	movw	r30, r24
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	8e 0f       	add	r24, r30
 1a6:	9f 1f       	adc	r25, r31
 1a8:	fc 01       	movw	r30, r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e2 5f       	subi	r30, 0xF2	; 242
 1b0:	fe 4f       	sbci	r31, 0xFE	; 254
 1b2:	84 81       	ldd	r24, Z+4	; 0x04
 1b4:	95 81       	ldd	r25, Z+5	; 0x05
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	95 83       	std	Z+5, r25	; 0x05
 1ba:	84 83       	std	Z+4, r24	; 0x04
 1bc:	08 95       	ret

000001be <__vector_29>:
	return;
}

ISR(ADC_vect) {
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	0b b6       	in	r0, 0x3b	; 59
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	updateMinimum(ADC);
 1e4:	80 91 78 00 	lds	r24, 0x0078
 1e8:	90 91 79 00 	lds	r25, 0x0079
 1ec:	0e 94 97 00 	call	0x12e	; 0x12e <updateMinimum>
	ADCSRA |= _BV(ADSC);
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	80 83       	st	Z, r24
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0b be       	out	0x3b, r0	; 59
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <setupMotor>:

char motorWaitForStepper;

void setupMotor() {
	// enable port for output
	DDRC |= ~(MOTOR_BITMASK);
 220:	87 b1       	in	r24, 0x07	; 7
 222:	8f 60       	ori	r24, 0x0F	; 15
 224:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 226:	88 b1       	in	r24, 0x08	; 8
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	DDRB = 0xFF;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	84 b9       	out	0x04, r24	; 4
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
 230:	83 ea       	ldi	r24, 0xA3	; 163
 232:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
 238:	8f e7       	ldi	r24, 0x7F	; 127
 23a:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
 23c:	10 92 06 01 	sts	0x0106, r1
}
 240:	08 95       	ret

00000242 <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
 242:	87 bd       	out	0x27, r24	; 39
}
 244:	08 95       	ret

00000246 <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
 246:	88 b1       	in	r24, 0x08	; 8
 248:	80 7f       	andi	r24, 0xF0	; 240
 24a:	88 60       	ori	r24, 0x08	; 8
 24c:	88 b9       	out	0x08, r24	; 8
}
 24e:	08 95       	ret

00000250 <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
 250:	88 b1       	in	r24, 0x08	; 8
 252:	80 7f       	andi	r24, 0xF0	; 240
 254:	81 60       	ori	r24, 0x01	; 1
 256:	88 b9       	out	0x08, r24	; 8
}
 258:	08 95       	ret

0000025a <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 25a:	88 b1       	in	r24, 0x08	; 8
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	88 b9       	out	0x08, r24	; 8
}
 260:	08 95       	ret

00000262 <setMotorCoast>:

void setMotorCoast() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
 262:	88 b1       	in	r24, 0x08	; 8
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	86 60       	ori	r24, 0x06	; 6
 268:	88 b9       	out	0x08, r24	; 8
 26a:	08 95       	ret

0000026c <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
 26c:	8d b3       	in	r24, 0x1d	; 29
 26e:	80 78       	andi	r24, 0x80	; 128
 270:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 7f       	andi	r24, 0xF0	; 240
 276:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
 278:	8d b1       	in	r24, 0x0d	; 13
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Falling-edge interrupt
	EICRA |= _BV(ISC01);
 27e:	e9 e6       	ldi	r30, 0x69	; 105
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	82 60       	ori	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
 288:	80 81       	ld	r24, Z
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
 28e:	80 81       	ld	r24, Z
 290:	88 60       	ori	r24, 0x08	; 8
 292:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
 294:	80 81       	ld	r24, Z
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
 29a:	80 81       	ld	r24, Z
 29c:	8f 7d       	andi	r24, 0xDF	; 223
 29e:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 2a0:	80 81       	ld	r24, Z
 2a2:	80 61       	ori	r24, 0x10	; 16
 2a4:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
 2a6:	80 81       	ld	r24, Z
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
 2ac:	80 81       	ld	r24, Z
 2ae:	8f 7b       	andi	r24, 0xBF	; 191
 2b0:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
 2b2:	ea e6       	ldi	r30, 0x6A	; 106
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
 2bc:	80 81       	ld	r24, Z
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
 2c2:	80 81       	ld	r24, Z
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
 2c8:	80 81       	ld	r24, Z
 2ca:	8b 7f       	andi	r24, 0xFB	; 251
 2cc:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
 2ce:	80 81       	ld	r24, Z
 2d0:	80 62       	ori	r24, 0x20	; 32
 2d2:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 7e       	andi	r24, 0xEF	; 239
 2d8:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
 2da:	8d b3       	in	r24, 0x1d	; 29
 2dc:	8f 67       	ori	r24, 0x7F	; 127
 2de:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
 2e0:	8c b3       	in	r24, 0x1c	; 28
 2e2:	8f 67       	ori	r24, 0x7F	; 127
 2e4:	8c bb       	out	0x1c, r24	; 28
	sei();
 2e6:	78 94       	sei
}
 2e8:	08 95       	ret

000002ea <makeDecision>:

void makeDecision(int index) {
	//if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
	//writeHexInt(ringBuf[index].avgRefl);
	int refl = ringBuf[index].minRefl;
 2ea:	fc 01       	movw	r30, r24
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	e8 0f       	add	r30, r24
 2f2:	f9 1f       	adc	r31, r25
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e2 5f       	subi	r30, 0xF2	; 242
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	52 81       	ldd	r21, Z+2	; 0x02
 2fe:	43 81       	ldd	r20, Z+3	; 0x03
	if(ringBuf[index].metal == 1) {
 300:	21 81       	ldd	r18, Z+1	; 0x01
 302:	21 30       	cpi	r18, 0x01	; 1
 304:	39 f5       	brne	.+78     	; 0x354 <makeDecision+0x6a>
		if((refl < STEEL_MAX) && (refl > STEEL_MIN)) {
 306:	25 2f       	mov	r18, r21
 308:	34 2f       	mov	r19, r20
 30a:	a9 01       	movw	r20, r18
 30c:	45 5e       	subi	r20, 0xE5	; 229
 30e:	50 40       	sbci	r21, 0x00	; 0
 310:	42 3f       	cpi	r20, 0xF2	; 242
 312:	51 05       	cpc	r21, r1
 314:	68 f4       	brcc	.+26     	; 0x330 <makeDecision+0x46>
			ringBuf[index].type = STEEL;
 316:	fc 01       	movw	r30, r24
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	8e 0f       	add	r24, r30
 31e:	9f 1f       	adc	r25, r31
 320:	fc 01       	movw	r30, r24
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e2 5f       	subi	r30, 0xF2	; 242
 328:	fe 4f       	sbci	r31, 0xFE	; 254
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	80 83       	st	Z, r24
			return;
 32e:	08 95       	ret
		}
		if((refl < ALUMINUM_MAX) && (refl > ALUMINUM_MIN)) {
 330:	21 50       	subi	r18, 0x01	; 1
 332:	30 40       	sbci	r19, 0x00	; 0
 334:	2a 3d       	cpi	r18, 0xDA	; 218
 336:	31 05       	cpc	r19, r1
 338:	a0 f5       	brcc	.+104    	; 0x3a2 <makeDecision+0xb8>
			ringBuf[index].type = ALUMINUM;
 33a:	fc 01       	movw	r30, r24
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	8e 0f       	add	r24, r30
 342:	9f 1f       	adc	r25, r31
 344:	fc 01       	movw	r30, r24
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	e2 5f       	subi	r30, 0xF2	; 242
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	80 83       	st	Z, r24
			return;
 352:	08 95       	ret
		}
	} else {	
		if((refl < BLACK_MAX) && (refl > BLACK_MIN)) {
 354:	25 2f       	mov	r18, r21
 356:	34 2f       	mov	r19, r20
 358:	a9 01       	movw	r20, r18
 35a:	43 53       	subi	r20, 0x33	; 51
 35c:	52 40       	sbci	r21, 0x02	; 2
 35e:	45 31       	cpi	r20, 0x15	; 21
 360:	51 05       	cpc	r21, r1
 362:	68 f4       	brcc	.+26     	; 0x37e <makeDecision+0x94>
			ringBuf[index].type = BLACK;
 364:	fc 01       	movw	r30, r24
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	8e 0f       	add	r24, r30
 36c:	9f 1f       	adc	r25, r31
 36e:	fc 01       	movw	r30, r24
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	e2 5f       	subi	r30, 0xF2	; 242
 376:	fe 4f       	sbci	r31, 0xFE	; 254
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
			return;
 37c:	08 95       	ret
		}
		if((refl < WHITE_MAX) && (refl > WHITE_MIN)) {
 37e:	2e 51       	subi	r18, 0x1E	; 30
 380:	32 40       	sbci	r19, 0x02	; 2
 382:	20 31       	cpi	r18, 0x10	; 16
 384:	31 05       	cpc	r19, r1
 386:	68 f4       	brcc	.+26     	; 0x3a2 <makeDecision+0xb8>
			ringBuf[index].type = WHITE;
 388:	fc 01       	movw	r30, r24
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	8e 0f       	add	r24, r30
 390:	9f 1f       	adc	r25, r31
 392:	fc 01       	movw	r30, r24
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	e2 5f       	subi	r30, 0xF2	; 242
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	80 83       	st	Z, r24
			return;
 3a0:	08 95       	ret
		}
	}
	writeHexInt(0xEF);	
 3a2:	8f ee       	ldi	r24, 0xEF	; 239
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
 3aa:	08 95       	ret

000003ac <firstLaserHandler>:

/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	currentMetal = newRingBufItem();
 3ac:	0e 94 9e 04 	call	0x93c	; 0x93c <newRingBufItem>
 3b0:	90 93 92 02 	sts	0x0292, r25
 3b4:	80 93 91 02 	sts	0x0291, r24
}
 3b8:	08 95       	ret

000003ba <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	ringBuf[currentMetal].metal = 1;
 3ba:	80 91 91 02 	lds	r24, 0x0291
 3be:	90 91 92 02 	lds	r25, 0x0292
 3c2:	fc 01       	movw	r30, r24
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	8e 0f       	add	r24, r30
 3ca:	9f 1f       	adc	r25, r31
 3cc:	fc 01       	movw	r30, r24
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	e2 5f       	subi	r30, 0xF2	; 242
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	81 83       	std	Z+1, r24	; 0x01
}
 3da:	08 95       	ret

000003dc <secondLaserHandler>:
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
 3dc:	80 91 05 01 	lds	r24, 0x0105
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	99 f4       	brne	.+38     	; 0x40a <secondLaserHandler+0x2e>
		// debounce
		Ignore_ADC_samples = 1;
 3e4:	80 93 04 01 	sts	0x0104, r24
		delaynms(DEBOUNCE_DELAY);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
		Ignore_ADC_samples = 0;
 3f0:	10 92 04 01 	sts	0x0104, r1
		if((PIND & 0b00000100) == 0b100) return;
 3f4:	4a 99       	sbic	0x09, 2	; 9
 3f6:	19 c0       	rjmp	.+50     	; 0x42a <secondLaserHandler+0x4e>
		// stop ADC
		stopADC();
 3f8:	0e 94 8f 00 	call	0x11e	; 0x11e <stopADC>
		makeDecision(currentRefl);
 3fc:	80 91 0a 01 	lds	r24, 0x010A
 400:	90 91 0b 01 	lds	r25, 0x010B
 404:	0e 94 75 01 	call	0x2ea	; 0x2ea <makeDecision>
 408:	08 95       	ret
		// TODO
	} else {
		delaynms(DEBOUNCE_DELAY);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
		if((PIND & 0b00000100) == 0) return;
 412:	4a 9b       	sbis	0x09, 2	; 9
 414:	0a c0       	rjmp	.+20     	; 0x42a <secondLaserHandler+0x4e>
		currentRefl = currentMetal;
 416:	80 91 91 02 	lds	r24, 0x0291
 41a:	90 91 92 02 	lds	r25, 0x0292
 41e:	90 93 0b 01 	sts	0x010B, r25
 422:	80 93 0a 01 	sts	0x010A, r24
		startADC();
 426:	0e 94 85 00 	call	0x10a	; 0x10a <startADC>
 42a:	08 95       	ret

0000042c <exitHandler>:

/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	writeDecInt(bufLength);
 42c:	80 91 8f 02 	lds	r24, 0x028F
 430:	90 91 90 02 	lds	r25, 0x0290
 434:	0e 94 3d 05 	call	0xa7a	; 0xa7a <writeDecInt>
	// is there an item on the queue?
	if(bufLength==0) return; // Throw an error here
 438:	80 91 8f 02 	lds	r24, 0x028F
 43c:	90 91 90 02 	lds	r25, 0x0290
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	09 f4       	brne	.+2      	; 0x446 <exitHandler+0x1a>
 444:	57 c0       	rjmp	.+174    	; 0x4f4 <exitHandler+0xc8>
	// are we in position?
	switch(ringBuf[ringTop].type) {
 446:	80 91 0c 01 	lds	r24, 0x010C
 44a:	90 91 0d 01 	lds	r25, 0x010D
 44e:	fc 01       	movw	r30, r24
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	8e 0f       	add	r24, r30
 456:	9f 1f       	adc	r25, r31
 458:	fc 01       	movw	r30, r24
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	e2 5f       	subi	r30, 0xF2	; 242
 460:	fe 4f       	sbci	r31, 0xFE	; 254
 462:	80 81       	ld	r24, Z
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	99 f1       	breq	.+102    	; 0x4ce <exitHandler+0xa2>
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	18 f4       	brcc	.+6      	; 0x472 <exitHandler+0x46>
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	e9 f5       	brne	.+122    	; 0x4ea <exitHandler+0xbe>
 470:	05 c0       	rjmp	.+10     	; 0x47c <exitHandler+0x50>
 472:	83 30       	cpi	r24, 0x03	; 3
 474:	81 f0       	breq	.+32     	; 0x496 <exitHandler+0x6a>
 476:	84 30       	cpi	r24, 0x04	; 4
 478:	c1 f5       	brne	.+112    	; 0x4ea <exitHandler+0xbe>
 47a:	1b c0       	rjmp	.+54     	; 0x4b2 <exitHandler+0x86>
		case BLACK:
			writeHexInt(0xEB);
 47c:	8b ee       	ldi	r24, 0xEB	; 235
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
			if(steps==BLACK_POSITION) {
 484:	80 91 95 02 	lds	r24, 0x0295
 488:	90 91 96 02 	lds	r25, 0x0296
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	69 f5       	brne	.+90     	; 0x4ea <exitHandler+0xbe>
				popBuf();
 490:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <popBuf>
				return;
 494:	08 95       	ret
			}
			break;
		case STEEL:
			writeHexInt(0xE5);
 496:	85 ee       	ldi	r24, 0xE5	; 229
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
			if(steps==STEEL_POSITION) {
 49e:	80 91 95 02 	lds	r24, 0x0295
 4a2:	90 91 96 02 	lds	r25, 0x0296
 4a6:	86 39       	cpi	r24, 0x96	; 150
 4a8:	91 05       	cpc	r25, r1
 4aa:	f9 f4       	brne	.+62     	; 0x4ea <exitHandler+0xbe>
				popBuf();
 4ac:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <popBuf>
				return;
 4b0:	08 95       	ret
			}
			break;
		case ALUMINUM:
			writeHexInt(0xEA);
 4b2:	8a ee       	ldi	r24, 0xEA	; 234
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
			if(steps==ALUMINUM_POSIITION) {
 4ba:	80 91 95 02 	lds	r24, 0x0295
 4be:	90 91 96 02 	lds	r25, 0x0296
 4c2:	82 33       	cpi	r24, 0x32	; 50
 4c4:	91 05       	cpc	r25, r1
 4c6:	89 f4       	brne	.+34     	; 0x4ea <exitHandler+0xbe>
				popBuf();
 4c8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <popBuf>
				return;
 4cc:	08 95       	ret
			}
			break;
		case WHITE:
			writeHexInt(0xE0);
 4ce:	80 ee       	ldi	r24, 0xE0	; 224
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
			if(steps==WHITE_POSITION) {
 4d6:	80 91 95 02 	lds	r24, 0x0295
 4da:	90 91 96 02 	lds	r25, 0x0296
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	91 05       	cpc	r25, r1
 4e2:	19 f4       	brne	.+6      	; 0x4ea <exitHandler+0xbe>
				popBuf();
 4e4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <popBuf>
				return;
 4e8:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
 4ea:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorBrake>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 06 01 	sts	0x0106, r24
 4f4:	08 95       	ret

000004f6 <shutdownHandler>:
}

void shutdownHandler() {
	if(bufLength == 0) {
 4f6:	80 91 8f 02 	lds	r24, 0x028F
 4fa:	90 91 90 02 	lds	r25, 0x0290
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	39 f4       	brne	.+14     	; 0x510 <shutdownHandler+0x1a>
		delaynms(500);
 502:	84 ef       	ldi	r24, 0xF4	; 244
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
		setMotorBrake();
 50a:	0e 94 2d 01 	call	0x25a	; 0x25a <setMotorBrake>
 50e:	ff cf       	rjmp	.-2      	; 0x50e <shutdownHandler+0x18>
 510:	08 95       	ret

00000512 <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	0b b6       	in	r0, 0x3b	; 59
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	2f 93       	push	r18
 522:	3f 93       	push	r19
 524:	4f 93       	push	r20
 526:	5f 93       	push	r21
 528:	6f 93       	push	r22
 52a:	7f 93       	push	r23
 52c:	8f 93       	push	r24
 52e:	9f 93       	push	r25
 530:	af 93       	push	r26
 532:	bf 93       	push	r27
 534:	ef 93       	push	r30
 536:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PIND & 0b1) == 0) firstLaserHandler();
 540:	48 99       	sbic	0x09, 0	; 9
 542:	02 c0       	rjmp	.+4      	; 0x548 <__vector_1+0x36>
 544:	0e 94 d6 01 	call	0x3ac	; 0x3ac <firstLaserHandler>
}
 548:	ff 91       	pop	r31
 54a:	ef 91       	pop	r30
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	0f 90       	pop	r0
 562:	0b be       	out	0x3b, r0	; 59
 564:	0f 90       	pop	r0
 566:	0f be       	out	0x3f, r0	; 63
 568:	0f 90       	pop	r0
 56a:	1f 90       	pop	r1
 56c:	18 95       	reti

0000056e <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	0b b6       	in	r0, 0x3b	; 59
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PIND & (1 << 1)) == 0) metalHandler();
 59c:	49 99       	sbic	0x09, 1	; 9
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__vector_2+0x36>
 5a0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <metalHandler>
}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	bf 91       	pop	r27
 5aa:	af 91       	pop	r26
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	7f 91       	pop	r23
 5b2:	6f 91       	pop	r22
 5b4:	5f 91       	pop	r21
 5b6:	4f 91       	pop	r20
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	0f 90       	pop	r0
 5be:	0b be       	out	0x3b, r0	; 59
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	0b b6       	in	r0, 0x3b	; 59
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
	// debounce is handled by function call
	secondLaserHandler();
 5f0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <secondLaserHandler>
}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0b be       	out	0x3b, r0	; 59
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	0b b6       	in	r0, 0x3b	; 59
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	3f 93       	push	r19
 62c:	4f 93       	push	r20
 62e:	5f 93       	push	r21
 630:	6f 93       	push	r22
 632:	7f 93       	push	r23
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	af 93       	push	r26
 63a:	bf 93       	push	r27
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PIND & (1 << 3)) == 0) exitHandler();
 648:	4b 99       	sbic	0x09, 3	; 9
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__vector_4+0x36>
 64c:	0e 94 16 02 	call	0x42c	; 0x42c <exitHandler>
}
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0b be       	out	0x3b, r0	; 59
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	0b b6       	in	r0, 0x3b	; 59
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	2f 93       	push	r18
 686:	3f 93       	push	r19
 688:	4f 93       	push	r20
 68a:	5f 93       	push	r21
 68c:	6f 93       	push	r22
 68e:	7f 93       	push	r23
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
 694:	af 93       	push	r26
 696:	bf 93       	push	r27
 698:	ef 93       	push	r30
 69a:	ff 93       	push	r31
	delaynms(DEBOUNCE_DELAY);
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PINE & (1 << 4)) == 0) hallLow = 1;
 6a4:	64 99       	sbic	0x0c, 4	; 12
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <__vector_5+0x38>
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 97 02 	sts	0x0297, r24
}
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0b be       	out	0x3b, r0	; 59
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	0b b6       	in	r0, 0x3b	; 59
 6de:	0f 92       	push	r0
 6e0:	11 24       	eor	r1, r1
 6e2:	2f 93       	push	r18
 6e4:	3f 93       	push	r19
 6e6:	4f 93       	push	r20
 6e8:	5f 93       	push	r21
 6ea:	6f 93       	push	r22
 6ec:	7f 93       	push	r23
 6ee:	8f 93       	push	r24
 6f0:	9f 93       	push	r25
 6f2:	af 93       	push	r26
 6f4:	bf 93       	push	r27
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 6fa:	84 e1       	ldi	r24, 0x14	; 20
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PINE & (1 << 5)) == 0) {
 702:	65 99       	sbic	0x0c, 5	; 12
 704:	05 c0       	rjmp	.+10     	; 0x710 <__vector_6+0x3c>
		shutdown = 1;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	80 93 8e 02 	sts	0x028E, r24
		shutdownHandler();
 70c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <shutdownHandler>
	}
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	bf 91       	pop	r27
 716:	af 91       	pop	r26
 718:	9f 91       	pop	r25
 71a:	8f 91       	pop	r24
 71c:	7f 91       	pop	r23
 71e:	6f 91       	pop	r22
 720:	5f 91       	pop	r21
 722:	4f 91       	pop	r20
 724:	3f 91       	pop	r19
 726:	2f 91       	pop	r18
 728:	0f 90       	pop	r0
 72a:	0b be       	out	0x3b, r0	; 59
 72c:	0f 90       	pop	r0
 72e:	0f be       	out	0x3f, r0	; 63
 730:	0f 90       	pop	r0
 732:	1f 90       	pop	r1
 734:	18 95       	reti

00000736 <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
 736:	1f 92       	push	r1
 738:	0f 92       	push	r0
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	0f 92       	push	r0
 73e:	0b b6       	in	r0, 0x3b	; 59
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	2f 93       	push	r18
 746:	3f 93       	push	r19
 748:	4f 93       	push	r20
 74a:	5f 93       	push	r21
 74c:	6f 93       	push	r22
 74e:	7f 93       	push	r23
 750:	8f 93       	push	r24
 752:	9f 93       	push	r25
 754:	af 93       	push	r26
 756:	bf 93       	push	r27
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
 75c:	84 e1       	ldi	r24, 0x14	; 20
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if((PINE & (1 << 6)) == 0) writeDecInt(6);
 764:	66 99       	sbic	0x0c, 6	; 12
 766:	04 c0       	rjmp	.+8      	; 0x770 <__vector_7+0x3a>
 768:	86 e0       	ldi	r24, 0x06	; 6
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 3d 05 	call	0xa7a	; 0xa7a <writeDecInt>
 770:	ff 91       	pop	r31
 772:	ef 91       	pop	r30
 774:	bf 91       	pop	r27
 776:	af 91       	pop	r26
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	7f 91       	pop	r23
 77e:	6f 91       	pop	r22
 780:	5f 91       	pop	r21
 782:	4f 91       	pop	r20
 784:	3f 91       	pop	r19
 786:	2f 91       	pop	r18
 788:	0f 90       	pop	r0
 78a:	0b be       	out	0x3b, r0	; 59
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
 796:	e1 e6       	ldi	r30, 0x61	; 97
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 e8       	ldi	r24, 0x80	; 128
 79c:	80 83       	st	Z, r24
	CLKPR = 0;
 79e:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
 7a0:	0e 94 83 06 	call	0xd06	; 0xd06 <initializeTimer>
	
	delaynms(1000);
 7a4:	88 ee       	ldi	r24, 0xE8	; 232
 7a6:	93 e0       	ldi	r25, 0x03	; 3
 7a8:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	
	writeHexInt(0x50);
 7ac:	80 e5       	ldi	r24, 0x50	; 80
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
	
	// Initialize ring buffer
	initRingBuf();
 7b4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <initRingBuf>
	
	writeHexInt(0x51);
 7b8:	81 e5       	ldi	r24, 0x51	; 81
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
	
	// enable output for stepper and display.
	DDRA = 0xFF;
 7c0:	8f ef       	ldi	r24, 0xFF	; 255
 7c2:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
 7c4:	0e 94 36 01 	call	0x26c	; 0x26c <vectorInterrupts>
	
	writeHexInt(0x52);
 7c8:	82 e5       	ldi	r24, 0x52	; 82
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>

	// init stepper
	initalizeStepper();
 7d0:	0e 94 8a 05 	call	0xb14	; 0xb14 <initalizeStepper>
	
	writeHexInt(0x53);
 7d4:	83 e5       	ldi	r24, 0x53	; 83
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>

	// zero stepper
	while(steps != 0){
 7dc:	80 91 95 02 	lds	r24, 0x0295
 7e0:	90 91 96 02 	lds	r25, 0x0296
 7e4:	00 97       	sbiw	r24, 0x00	; 0
 7e6:	89 f0       	breq	.+34     	; 0x80a <main+0x74>
		stepTime(20,0);
 7e8:	84 e1       	ldi	r24, 0x14	; 20
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	0e 94 9e 05 	call	0xb3c	; 0xb3c <stepTime>
		writeHexInt(steps);
 7f2:	80 91 95 02 	lds	r24, 0x0295
 7f6:	90 91 96 02 	lds	r25, 0x0296
 7fa:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
	initalizeStepper();
	
	writeHexInt(0x53);

	// zero stepper
	while(steps != 0){
 7fe:	80 91 95 02 	lds	r24, 0x0295
 802:	90 91 96 02 	lds	r25, 0x0296
 806:	00 97       	sbiw	r24, 0x00	; 0
 808:	79 f7       	brne	.-34     	; 0x7e8 <main+0x52>
		stepTime(20,0);
		writeHexInt(steps);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
 80a:	10 92 96 02 	sts	0x0296, r1
 80e:	10 92 95 02 	sts	0x0295, r1
	// reset hall effect check
	hallLow = 0;
 812:	10 92 97 02 	sts	0x0297, r1
	

	setupADC();
 816:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>

	// wait one second
	delaynms(1000);
 81a:	88 ee       	ldi	r24, 0xE8	; 232
 81c:	93 e0       	ldi	r25, 0x03	; 3
 81e:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	
	// start the motor
	setupMotor();
 822:	0e 94 10 01 	call	0x220	; 0x220 <setupMotor>
	writeHexInt(0x54);
 826:	84 e5       	ldi	r24, 0x54	; 84
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 5e 05 	call	0xabc	; 0xabc <writeHexInt>
	setMotorFwd();
 82e:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
	
	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		delaynms(100);
		if(bufLength != 0) {
			switch(ringBuf[ringTop].type) {
 832:	ce e0       	ldi	r28, 0x0E	; 14
 834:	d1 e0       	ldi	r29, 0x01	; 1
	writeHexInt(0x54);
	setMotorFwd();
	
	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		delaynms(100);
 836:	84 e6       	ldi	r24, 0x64	; 100
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
		if(bufLength != 0) {
 83e:	80 91 8f 02 	lds	r24, 0x028F
 842:	90 91 90 02 	lds	r25, 0x0290
 846:	00 97       	sbiw	r24, 0x00	; 0
 848:	b1 f3       	breq	.-20     	; 0x836 <main+0xa0>
			switch(ringBuf[ringTop].type) {
 84a:	80 91 0c 01 	lds	r24, 0x010C
 84e:	90 91 0d 01 	lds	r25, 0x010D
 852:	fc 01       	movw	r30, r24
 854:	ee 0f       	add	r30, r30
 856:	ff 1f       	adc	r31, r31
 858:	8e 0f       	add	r24, r30
 85a:	9f 1f       	adc	r25, r31
 85c:	fc 01       	movw	r30, r24
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	ec 0f       	add	r30, r28
 864:	fd 1f       	adc	r31, r29
 866:	80 81       	ld	r24, Z
 868:	82 30       	cpi	r24, 0x02	; 2
 86a:	79 f0       	breq	.+30     	; 0x88a <main+0xf4>
 86c:	83 30       	cpi	r24, 0x03	; 3
 86e:	18 f4       	brcc	.+6      	; 0x876 <main+0xe0>
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	09 f7       	brne	.-62     	; 0x836 <main+0xa0>
 874:	05 c0       	rjmp	.+10     	; 0x880 <main+0xea>
 876:	83 30       	cpi	r24, 0x03	; 3
 878:	69 f0       	breq	.+26     	; 0x894 <main+0xfe>
 87a:	84 30       	cpi	r24, 0x04	; 4
 87c:	e1 f6       	brne	.-72     	; 0x836 <main+0xa0>
 87e:	0f c0       	rjmp	.+30     	; 0x89e <main+0x108>
				case BLACK:
					stepperMoveTo(BLACK_POSITION);
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stepperMoveTo>
					break;
 888:	d6 cf       	rjmp	.-84     	; 0x836 <main+0xa0>
				case WHITE:
					stepperMoveTo(WHITE_POSITION);
 88a:	84 e6       	ldi	r24, 0x64	; 100
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stepperMoveTo>
					break;
 892:	d1 cf       	rjmp	.-94     	; 0x836 <main+0xa0>
				case STEEL:
					stepperMoveTo(STEEL_POSITION);
 894:	86 e9       	ldi	r24, 0x96	; 150
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stepperMoveTo>
					break;
 89c:	cc cf       	rjmp	.-104    	; 0x836 <main+0xa0>
				case ALUMINUM:
					stepperMoveTo(ALUMINUM_POSIITION);
 89e:	82 e3       	ldi	r24, 0x32	; 50
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stepperMoveTo>
					break;
 8a6:	c7 cf       	rjmp	.-114    	; 0x836 <main+0xa0>

000008a8 <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
 8a8:	10 92 0d 01 	sts	0x010D, r1
 8ac:	10 92 0c 01 	sts	0x010C, r1
	ringBottom = 0;
 8b0:	10 92 09 01 	sts	0x0109, r1
 8b4:	10 92 08 01 	sts	0x0108, r1
	currentMetal = 0;
 8b8:	10 92 92 02 	sts	0x0292, r1
 8bc:	10 92 91 02 	sts	0x0291, r1
	currentRefl = 0;
 8c0:	10 92 0b 01 	sts	0x010B, r1
 8c4:	10 92 0a 01 	sts	0x010A, r1
	bufLength = 0;
 8c8:	10 92 90 02 	sts	0x0290, r1
 8cc:	10 92 8f 02 	sts	0x028F, r1
	inPause = 0;
 8d0:	10 92 07 01 	sts	0x0107, r1
	shutdown = 0;
 8d4:	10 92 8e 02 	sts	0x028E, r1
}
 8d8:	08 95       	ret

000008da <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
 8da:	86 0f       	add	r24, r22
 8dc:	97 1f       	adc	r25, r23
 8de:	80 34       	cpi	r24, 0x40	; 64
 8e0:	91 05       	cpc	r25, r1
 8e2:	1c f0       	brlt	.+6      	; 0x8ea <getBufOffset+0x10>
		return ((index + offset) - RING_BUF_SIZE);
 8e4:	80 54       	subi	r24, 0x40	; 64
 8e6:	90 40       	sbci	r25, 0x00	; 0
 8e8:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 8ea:	99 23       	and	r25, r25
 8ec:	14 f4       	brge	.+4      	; 0x8f2 <getBufOffset+0x18>
		return ((index + offset) + RING_BUF_SIZE);
 8ee:	80 5c       	subi	r24, 0xC0	; 192
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
 8f2:	08 95       	ret

000008f4 <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
 8f8:	c0 91 8f 02 	lds	r28, 0x028F
 8fc:	d0 91 90 02 	lds	r29, 0x0290
 900:	20 97       	sbiw	r28, 0x00	; 0
 902:	c9 f0       	breq	.+50     	; 0x936 <popBuf+0x42>
	ringTop = getBufOffset(ringTop, 1);
 904:	80 91 0c 01 	lds	r24, 0x010C
 908:	90 91 0d 01 	lds	r25, 0x010D
 90c:	61 e0       	ldi	r22, 0x01	; 1
 90e:	70 e0       	ldi	r23, 0x00	; 0
 910:	0e 94 6d 04 	call	0x8da	; 0x8da <getBufOffset>
 914:	90 93 0d 01 	sts	0x010D, r25
 918:	80 93 0c 01 	sts	0x010C, r24
	bufLength--;
 91c:	21 97       	sbiw	r28, 0x01	; 1
 91e:	d0 93 90 02 	sts	0x0290, r29
 922:	c0 93 8f 02 	sts	0x028F, r28
	if((bufLength == 0) && (shutdown == 1)) {
 926:	20 97       	sbiw	r28, 0x00	; 0
 928:	31 f4       	brne	.+12     	; 0x936 <popBuf+0x42>
 92a:	80 91 8e 02 	lds	r24, 0x028E
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	11 f4       	brne	.+4      	; 0x936 <popBuf+0x42>
		shutdownHandler();
 932:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <shutdownHandler>
	}
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <newRingBufItem>:
}

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
	// if bottom is lagging behind top, reset bottom
	if(bufLength==0) ringBottom = ringTop;
 940:	c0 91 8f 02 	lds	r28, 0x028F
 944:	d0 91 90 02 	lds	r29, 0x0290
 948:	20 97       	sbiw	r28, 0x00	; 0
 94a:	49 f4       	brne	.+18     	; 0x95e <newRingBufItem+0x22>
 94c:	80 91 0c 01 	lds	r24, 0x010C
 950:	90 91 0d 01 	lds	r25, 0x010D
 954:	90 93 09 01 	sts	0x0109, r25
 958:	80 93 08 01 	sts	0x0108, r24
 95c:	0f c0       	rjmp	.+30     	; 0x97c <newRingBufItem+0x40>
	// this next line is for cases when queue is not empty
	if(bufLength > 0) ringBottom = getBufOffset(ringBottom, 1);
 95e:	1c 16       	cp	r1, r28
 960:	1d 06       	cpc	r1, r29
 962:	64 f4       	brge	.+24     	; 0x97c <newRingBufItem+0x40>
 964:	80 91 08 01 	lds	r24, 0x0108
 968:	90 91 09 01 	lds	r25, 0x0109
 96c:	61 e0       	ldi	r22, 0x01	; 1
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	0e 94 6d 04 	call	0x8da	; 0x8da <getBufOffset>
 974:	90 93 09 01 	sts	0x0109, r25
 978:	80 93 08 01 	sts	0x0108, r24
	bufLength++;
 97c:	21 96       	adiw	r28, 0x01	; 1
 97e:	d0 93 90 02 	sts	0x0290, r29
 982:	c0 93 8f 02 	sts	0x028F, r28
	ringBuf[ringBottom].minRefl = 1024;
 986:	80 91 08 01 	lds	r24, 0x0108
 98a:	90 91 09 01 	lds	r25, 0x0109
 98e:	fc 01       	movw	r30, r24
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	e8 0f       	add	r30, r24
 996:	f9 1f       	adc	r31, r25
 998:	ee 0f       	add	r30, r30
 99a:	ff 1f       	adc	r31, r31
 99c:	e2 5f       	subi	r30, 0xF2	; 242
 99e:	fe 4f       	sbci	r31, 0xFE	; 254
 9a0:	20 e0       	ldi	r18, 0x00	; 0
 9a2:	34 e0       	ldi	r19, 0x04	; 4
 9a4:	33 83       	std	Z+3, r19	; 0x03
 9a6:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
 9a8:	15 82       	std	Z+5, r1	; 0x05
 9aa:	14 82       	std	Z+4, r1	; 0x04
	ringBuf[ringBottom].metal = 0;
 9ac:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
 9ae:	10 82       	st	Z, r1
	return ringBottom;
}
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
 9b6:	87 30       	cpi	r24, 0x07	; 7
 9b8:	71 f1       	breq	.+92     	; 0xa16 <getPatFomHex+0x60>
 9ba:	88 30       	cpi	r24, 0x08	; 8
 9bc:	70 f4       	brcc	.+28     	; 0x9da <getPatFomHex+0x24>
 9be:	83 30       	cpi	r24, 0x03	; 3
 9c0:	11 f1       	breq	.+68     	; 0xa06 <getPatFomHex+0x50>
 9c2:	84 30       	cpi	r24, 0x04	; 4
 9c4:	28 f4       	brcc	.+10     	; 0x9d0 <getPatFomHex+0x1a>
 9c6:	81 30       	cpi	r24, 0x01	; 1
 9c8:	d1 f1       	breq	.+116    	; 0xa3e <getPatFomHex+0x88>
 9ca:	82 30       	cpi	r24, 0x02	; 2
 9cc:	d0 f4       	brcc	.+52     	; 0xa02 <getPatFomHex+0x4c>
 9ce:	17 c0       	rjmp	.+46     	; 0x9fe <getPatFomHex+0x48>
 9d0:	85 30       	cpi	r24, 0x05	; 5
 9d2:	e9 f0       	breq	.+58     	; 0xa0e <getPatFomHex+0x58>
 9d4:	86 30       	cpi	r24, 0x06	; 6
 9d6:	e8 f4       	brcc	.+58     	; 0xa12 <getPatFomHex+0x5c>
 9d8:	18 c0       	rjmp	.+48     	; 0xa0a <getPatFomHex+0x54>
 9da:	8b 30       	cpi	r24, 0x0B	; 11
 9dc:	21 f1       	breq	.+72     	; 0xa26 <getPatFomHex+0x70>
 9de:	8c 30       	cpi	r24, 0x0C	; 12
 9e0:	28 f4       	brcc	.+10     	; 0x9ec <getPatFomHex+0x36>
 9e2:	89 30       	cpi	r24, 0x09	; 9
 9e4:	e1 f0       	breq	.+56     	; 0xa1e <getPatFomHex+0x68>
 9e6:	8a 30       	cpi	r24, 0x0A	; 10
 9e8:	e0 f4       	brcc	.+56     	; 0xa22 <getPatFomHex+0x6c>
 9ea:	17 c0       	rjmp	.+46     	; 0xa1a <getPatFomHex+0x64>
 9ec:	8d 30       	cpi	r24, 0x0D	; 13
 9ee:	f9 f0       	breq	.+62     	; 0xa2e <getPatFomHex+0x78>
 9f0:	8d 30       	cpi	r24, 0x0D	; 13
 9f2:	d8 f0       	brcs	.+54     	; 0xa2a <getPatFomHex+0x74>
 9f4:	8e 30       	cpi	r24, 0x0E	; 14
 9f6:	e9 f0       	breq	.+58     	; 0xa32 <getPatFomHex+0x7c>
 9f8:	8f 30       	cpi	r24, 0x0F	; 15
 9fa:	f9 f4       	brne	.+62     	; 0xa3a <getPatFomHex+0x84>
 9fc:	1c c0       	rjmp	.+56     	; 0xa36 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
 9fe:	8c ef       	ldi	r24, 0xFC	; 252
 a00:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
 a02:	8a ed       	ldi	r24, 0xDA	; 218
 a04:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
 a06:	82 ef       	ldi	r24, 0xF2	; 242
 a08:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
 a0a:	86 e6       	ldi	r24, 0x66	; 102
 a0c:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
 a0e:	86 eb       	ldi	r24, 0xB6	; 182
 a10:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
 a12:	8e eb       	ldi	r24, 0xBE	; 190
 a14:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
 a16:	80 ee       	ldi	r24, 0xE0	; 224
 a18:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
 a1a:	8e ef       	ldi	r24, 0xFE	; 254
 a1c:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
 a1e:	86 ee       	ldi	r24, 0xE6	; 230
 a20:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
 a22:	8e ee       	ldi	r24, 0xEE	; 238
 a24:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
 a26:	8e e3       	ldi	r24, 0x3E	; 62
 a28:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
 a2a:	8c e9       	ldi	r24, 0x9C	; 156
 a2c:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
 a2e:	8a e7       	ldi	r24, 0x7A	; 122
 a30:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
 a32:	8e e9       	ldi	r24, 0x9E	; 158
 a34:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
 a36:	8e e8       	ldi	r24, 0x8E	; 142
 a38:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
 a3e:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
 a40:	08 95       	ret

00000a42 <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
 a46:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 a48:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
 a4a:	ac 01       	movw	r20, r24
 a4c:	02 2e       	mov	r0, r18
 a4e:	02 c0       	rjmp	.+4      	; 0xa54 <writePattern+0x12>
 a50:	55 95       	asr	r21
 a52:	47 95       	ror	r20
 a54:	0a 94       	dec	r0
 a56:	e2 f7       	brpl	.-8      	; 0xa50 <writePattern+0xe>
 a58:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 a5a:	42 95       	swap	r20
 a5c:	44 0f       	add	r20, r20
 a5e:	44 0f       	add	r20, r20
 a60:	40 7c       	andi	r20, 0xC0	; 192
 a62:	56 2f       	mov	r21, r22
 a64:	5f 7b       	andi	r21, 0xBF	; 191
 a66:	45 2b       	or	r20, r21
 a68:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
 a6a:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
 a6c:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	28 30       	cpi	r18, 0x08	; 8
 a74:	31 05       	cpc	r19, r1
 a76:	41 f7       	brne	.-48     	; 0xa48 <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
 a78:	08 95       	ret

00000a7a <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
 a7a:	ef 92       	push	r14
 a7c:	ff 92       	push	r15
 a7e:	0f 93       	push	r16
 a80:	1f 93       	push	r17
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	c3 e0       	ldi	r28, 0x03	; 3
 a88:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
 a8a:	0f 2e       	mov	r0, r31
 a8c:	fa e0       	ldi	r31, 0x0A	; 10
 a8e:	ef 2e       	mov	r14, r31
 a90:	ff 24       	eor	r15, r15
 a92:	f0 2d       	mov	r31, r0
 a94:	b7 01       	movw	r22, r14
 a96:	0e 94 aa 06 	call	0xd54	; 0xd54 <__divmodhi4>
 a9a:	16 2f       	mov	r17, r22
 a9c:	07 2f       	mov	r16, r23
 a9e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <getPatFomHex>
 aa2:	0e 94 21 05 	call	0xa42	; 0xa42 <writePattern>
		number = number / 10;
 aa6:	81 2f       	mov	r24, r17
 aa8:	90 2f       	mov	r25, r16
 aaa:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 aac:	99 f7       	brne	.-26     	; 0xa94 <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	08 95       	ret

00000abc <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
 abc:	ef 92       	push	r14
 abe:	ff 92       	push	r15
 ac0:	0f 93       	push	r16
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
 ac8:	ec 01       	movw	r28, r24
 aca:	03 e0       	ldi	r16, 0x03	; 3
 acc:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
 ace:	ee 24       	eor	r14, r14
 ad0:	ff 24       	eor	r15, r15
 ad2:	68 94       	set
 ad4:	e4 f8       	bld	r14, 4
 ad6:	ce 01       	movw	r24, r28
 ad8:	b7 01       	movw	r22, r14
 ada:	0e 94 aa 06 	call	0xd54	; 0xd54 <__divmodhi4>
 ade:	0e 94 db 04 	call	0x9b6	; 0x9b6 <getPatFomHex>
 ae2:	0e 94 21 05 	call	0xa42	; 0xa42 <writePattern>
		number = number / 16;
 ae6:	ce 01       	movw	r24, r28
 ae8:	dd 23       	and	r29, r29
 aea:	0c f4       	brge	.+2      	; 0xaee <writeHexInt+0x32>
 aec:	0f 96       	adiw	r24, 0x0f	; 15
 aee:	ec 01       	movw	r28, r24
 af0:	d5 95       	asr	r29
 af2:	c7 95       	ror	r28
 af4:	d5 95       	asr	r29
 af6:	c7 95       	ror	r28
 af8:	d5 95       	asr	r29
 afa:	c7 95       	ror	r28
 afc:	d5 95       	asr	r29
 afe:	c7 95       	ror	r28
 b00:	01 50       	subi	r16, 0x01	; 1
 b02:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 b04:	41 f7       	brne	.-48     	; 0xad6 <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
 b06:	df 91       	pop	r29
 b08:	cf 91       	pop	r28
 b0a:	1f 91       	pop	r17
 b0c:	0f 91       	pop	r16
 b0e:	ff 90       	pop	r15
 b10:	ef 90       	pop	r14
 b12:	08 95       	ret

00000b14 <initalizeStepper>:


// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
 b14:	81 b1       	in	r24, 0x01	; 1
 b16:	8f 63       	ori	r24, 0x3F	; 63
 b18:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
 b1a:	10 92 94 02 	sts	0x0294, r1
 b1e:	10 92 93 02 	sts	0x0293, r1
	PORTA = (PORTA & 0b11000000) | states[currentState];
 b22:	82 b1       	in	r24, 0x02	; 2
 b24:	80 7c       	andi	r24, 0xC0	; 192
 b26:	80 63       	ori	r24, 0x30	; 48
 b28:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
 b2a:	10 92 97 02 	sts	0x0297, r1
	steps = 1;
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	90 93 96 02 	sts	0x0296, r25
 b36:	80 93 95 02 	sts	0x0295, r24
}
 b3a:	08 95       	ret

00000b3c <stepTime>:


void stepTime(int stepTime, char direction) {
 b3c:	cf 93       	push	r28
 b3e:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
 b40:	0e 94 89 06 	call	0xd12	; 0xd12 <delaynms>
	if(direction == 0) { //forward direction
 b44:	cc 23       	and	r28, r28
 b46:	81 f5       	brne	.+96     	; 0xba8 <stepTime+0x6c>
		currentState++;
 b48:	80 91 93 02 	lds	r24, 0x0293
 b4c:	90 91 94 02 	lds	r25, 0x0294
 b50:	01 96       	adiw	r24, 0x01	; 1
 b52:	90 93 94 02 	sts	0x0294, r25
 b56:	80 93 93 02 	sts	0x0293, r24
		if (currentState==4) currentState = 0;
 b5a:	84 30       	cpi	r24, 0x04	; 4
 b5c:	91 05       	cpc	r25, r1
 b5e:	21 f4       	brne	.+8      	; 0xb68 <stepTime+0x2c>
 b60:	10 92 94 02 	sts	0x0294, r1
 b64:	10 92 93 02 	sts	0x0293, r1
		PORTA = (PORTA & 0b11000000) | states[currentState];
 b68:	82 b1       	in	r24, 0x02	; 2
 b6a:	e0 91 93 02 	lds	r30, 0x0293
 b6e:	f0 91 94 02 	lds	r31, 0x0294
 b72:	e0 50       	subi	r30, 0x00	; 0
 b74:	ff 4f       	sbci	r31, 0xFF	; 255
 b76:	80 7c       	andi	r24, 0xC0	; 192
 b78:	90 81       	ld	r25, Z
 b7a:	89 2b       	or	r24, r25
 b7c:	82 b9       	out	0x02, r24	; 2
		steps++;
 b7e:	80 91 95 02 	lds	r24, 0x0295
 b82:	90 91 96 02 	lds	r25, 0x0296
 b86:	01 96       	adiw	r24, 0x01	; 1
 b88:	90 93 96 02 	sts	0x0296, r25
 b8c:	80 93 95 02 	sts	0x0295, r24
		if(hallLow == 1) {
 b90:	80 91 97 02 	lds	r24, 0x0297
 b94:	81 30       	cpi	r24, 0x01	; 1
 b96:	09 f0       	breq	.+2      	; 0xb9a <stepTime+0x5e>
 b98:	40 c0       	rjmp	.+128    	; 0xc1a <stepTime+0xde>
			steps = 0;
 b9a:	10 92 96 02 	sts	0x0296, r1
 b9e:	10 92 95 02 	sts	0x0295, r1
			hallLow = 0;
 ba2:	10 92 97 02 	sts	0x0297, r1
 ba6:	39 c0       	rjmp	.+114    	; 0xc1a <stepTime+0xde>
		}
	}
	else { //reverse direction
		currentState--;
 ba8:	80 91 93 02 	lds	r24, 0x0293
 bac:	90 91 94 02 	lds	r25, 0x0294
 bb0:	01 97       	sbiw	r24, 0x01	; 1
 bb2:	90 93 94 02 	sts	0x0294, r25
 bb6:	80 93 93 02 	sts	0x0293, r24
		if (currentState==-1) currentState = 3;
 bba:	2f ef       	ldi	r18, 0xFF	; 255
 bbc:	8f 3f       	cpi	r24, 0xFF	; 255
 bbe:	92 07       	cpc	r25, r18
 bc0:	31 f4       	brne	.+12     	; 0xbce <stepTime+0x92>
 bc2:	83 e0       	ldi	r24, 0x03	; 3
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	90 93 94 02 	sts	0x0294, r25
 bca:	80 93 93 02 	sts	0x0293, r24
		PORTA = (PORTA & 0b11000000) | states[currentState];
 bce:	82 b1       	in	r24, 0x02	; 2
 bd0:	e0 91 93 02 	lds	r30, 0x0293
 bd4:	f0 91 94 02 	lds	r31, 0x0294
 bd8:	e0 50       	subi	r30, 0x00	; 0
 bda:	ff 4f       	sbci	r31, 0xFF	; 255
 bdc:	80 7c       	andi	r24, 0xC0	; 192
 bde:	90 81       	ld	r25, Z
 be0:	89 2b       	or	r24, r25
 be2:	82 b9       	out	0x02, r24	; 2
		steps--;
 be4:	80 91 95 02 	lds	r24, 0x0295
 be8:	90 91 96 02 	lds	r25, 0x0296
 bec:	01 97       	sbiw	r24, 0x01	; 1
 bee:	90 93 96 02 	sts	0x0296, r25
 bf2:	80 93 95 02 	sts	0x0295, r24
		if(steps < 0) steps = 199;
 bf6:	99 23       	and	r25, r25
 bf8:	34 f4       	brge	.+12     	; 0xc06 <stepTime+0xca>
 bfa:	87 ec       	ldi	r24, 0xC7	; 199
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	90 93 96 02 	sts	0x0296, r25
 c02:	80 93 95 02 	sts	0x0295, r24
		if(hallLow == 1) {
 c06:	80 91 97 02 	lds	r24, 0x0297
 c0a:	81 30       	cpi	r24, 0x01	; 1
 c0c:	31 f4       	brne	.+12     	; 0xc1a <stepTime+0xde>
			steps = 0;
 c0e:	10 92 96 02 	sts	0x0296, r1
 c12:	10 92 95 02 	sts	0x0295, r1
			hallLow = 0;
 c16:	10 92 97 02 	sts	0x0297, r1
		}				
	}
}
 c1a:	cf 91       	pop	r28
 c1c:	08 95       	ret

00000c1e <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
 c1e:	86 17       	cp	r24, r22
 c20:	97 07       	cpc	r25, r23
 c22:	4c f4       	brge	.+18     	; 0xc36 <forwardSteps+0x18>
 c24:	68 1b       	sub	r22, r24
 c26:	79 0b       	sbc	r23, r25
 c28:	1a f4       	brpl	.+6      	; 0xc30 <forwardSteps+0x12>
 c2a:	70 95       	com	r23
 c2c:	61 95       	neg	r22
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	86 2f       	mov	r24, r22
 c32:	97 2f       	mov	r25, r23
 c34:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - (target - current));
 c36:	86 1b       	sub	r24, r22
 c38:	97 0b       	sbc	r25, r23
 c3a:	9c 01       	movw	r18, r24
 c3c:	28 53       	subi	r18, 0x38	; 56
 c3e:	3f 4f       	sbci	r19, 0xFF	; 255
 c40:	1a f4       	brpl	.+6      	; 0xc48 <forwardSteps+0x2a>
 c42:	30 95       	com	r19
 c44:	21 95       	neg	r18
 c46:	3f 4f       	sbci	r19, 0xFF	; 255
 c48:	82 2f       	mov	r24, r18
 c4a:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 c4c:	08 95       	ret

00000c4e <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
 c4e:	68 17       	cp	r22, r24
 c50:	79 07       	cpc	r23, r25
 c52:	4c f4       	brge	.+18     	; 0xc66 <reverseSteps+0x18>
 c54:	68 1b       	sub	r22, r24
 c56:	79 0b       	sbc	r23, r25
 c58:	1a f4       	brpl	.+6      	; 0xc60 <reverseSteps+0x12>
 c5a:	70 95       	com	r23
 c5c:	61 95       	neg	r22
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	86 2f       	mov	r24, r22
 c62:	97 2f       	mov	r25, r23
 c64:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - (target - current));
 c66:	86 1b       	sub	r24, r22
 c68:	97 0b       	sbc	r25, r23
 c6a:	9c 01       	movw	r18, r24
 c6c:	28 53       	subi	r18, 0x38	; 56
 c6e:	3f 4f       	sbci	r19, 0xFF	; 255
 c70:	1a f4       	brpl	.+6      	; 0xc78 <reverseSteps+0x2a>
 c72:	30 95       	com	r19
 c74:	21 95       	neg	r18
 c76:	3f 4f       	sbci	r19, 0xFF	; 255
 c78:	82 2f       	mov	r24, r18
 c7a:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 c7c:	08 95       	ret

00000c7e <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
 c7e:	ef 92       	push	r14
 c80:	ff 92       	push	r15
 c82:	0f 93       	push	r16
 c84:	1f 93       	push	r17
 c86:	cf 93       	push	r28
 c88:	df 93       	push	r29
 c8a:	7c 01       	movw	r14, r24
	if (steps == nextPosition) return;
 c8c:	c0 91 95 02 	lds	r28, 0x0295
 c90:	d0 91 96 02 	lds	r29, 0x0296
 c94:	c8 17       	cp	r28, r24
 c96:	d9 07       	cpc	r29, r25
 c98:	79 f1       	breq	.+94     	; 0xcf8 <stepperMoveTo+0x7a>
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
 c9a:	ce 01       	movw	r24, r28
 c9c:	b7 01       	movw	r22, r14
 c9e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <forwardSteps>
 ca2:	8c 01       	movw	r16, r24
 ca4:	ce 01       	movw	r24, r28
 ca6:	b7 01       	movw	r22, r14
 ca8:	0e 94 27 06 	call	0xc4e	; 0xc4e <reverseSteps>
 cac:	08 17       	cp	r16, r24
 cae:	19 07       	cpc	r17, r25
 cb0:	6c f4       	brge	.+26     	; 0xccc <stepperMoveTo+0x4e>
		while(steps != nextPosition) {
			stepTime(15,0);
 cb2:	8f e0       	ldi	r24, 0x0F	; 15
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	60 e0       	ldi	r22, 0x00	; 0
 cb8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <stepTime>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if (steps == nextPosition) return;
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
		while(steps != nextPosition) {
 cbc:	80 91 95 02 	lds	r24, 0x0295
 cc0:	90 91 96 02 	lds	r25, 0x0296
 cc4:	8e 15       	cp	r24, r14
 cc6:	9f 05       	cpc	r25, r15
 cc8:	a1 f7       	brne	.-24     	; 0xcb2 <stepperMoveTo+0x34>
 cca:	0c c0       	rjmp	.+24     	; 0xce4 <stepperMoveTo+0x66>
		}
	}
	
	else {
			while(steps != nextPosition) {
				stepTime(15,1);
 ccc:	8f e0       	ldi	r24, 0x0F	; 15
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	61 e0       	ldi	r22, 0x01	; 1
 cd2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <stepTime>
			stepTime(15,0);
		}
	}
	
	else {
			while(steps != nextPosition) {
 cd6:	80 91 95 02 	lds	r24, 0x0295
 cda:	90 91 96 02 	lds	r25, 0x0296
 cde:	8e 15       	cp	r24, r14
 ce0:	9f 05       	cpc	r25, r15
 ce2:	a1 f7       	brne	.-24     	; 0xccc <stepperMoveTo+0x4e>
				stepTime(15,1);
			}			
		}
	
	if(motorWaitForStepper == 1) {
 ce4:	80 91 06 01 	lds	r24, 0x0106
 ce8:	81 30       	cpi	r24, 0x01	; 1
 cea:	31 f4       	brne	.+12     	; 0xcf8 <stepperMoveTo+0x7a>
		// start the motor back up
		setMotorFwd();
 cec:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
 cf0:	10 92 06 01 	sts	0x0106, r1
		// fire the exit logic again
		exitHandler();
 cf4:	0e 94 16 02 	call	0x42c	; 0x42c <exitHandler>
	}
}
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	1f 91       	pop	r17
 cfe:	0f 91       	pop	r16
 d00:	ff 90       	pop	r15
 d02:	ef 90       	pop	r14
 d04:	08 95       	ret

00000d06 <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
 d06:	e1 e8       	ldi	r30, 0x81	; 129
 d08:	f0 e0       	ldi	r31, 0x00	; 0
 d0a:	80 81       	ld	r24, Z
 d0c:	81 60       	ori	r24, 0x01	; 1
 d0e:	80 83       	st	Z, r24
} 
 d10:	08 95       	ret

00000d12 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
 d12:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
 d14:	e1 e8       	ldi	r30, 0x81	; 129
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	80 81       	ld	r24, Z
 d1a:	88 60       	ori	r24, 0x08	; 8
 d1c:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
 d1e:	80 81       	ld	r24, Z
 d20:	83 60       	ori	r24, 0x03	; 3
 d22:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
 d24:	12 16       	cp	r1, r18
 d26:	13 06       	cpc	r1, r19
 d28:	a4 f4       	brge	.+40     	; 0xd52 <delaynms+0x40>
 d2a:	80 e0       	ldi	r24, 0x00	; 0
 d2c:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 d2e:	e8 e8       	ldi	r30, 0x88	; 136
 d30:	f0 e0       	ldi	r31, 0x00	; 0
 d32:	4d e7       	ldi	r20, 0x7D	; 125
 d34:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
 d36:	a4 e8       	ldi	r26, 0x84	; 132
 d38:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 d3a:	51 83       	std	Z+1, r21	; 0x01
 d3c:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
 d3e:	11 96       	adiw	r26, 0x01	; 1
 d40:	1c 92       	st	X, r1
 d42:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
 d44:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
 d46:	b1 9b       	sbis	0x16, 1	; 22
 d48:	fe cf       	rjmp	.-4      	; 0xd46 <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
 d4a:	01 96       	adiw	r24, 0x01	; 1
 d4c:	82 17       	cp	r24, r18
 d4e:	93 07       	cpc	r25, r19
 d50:	a1 f7       	brne	.-24     	; 0xd3a <delaynms+0x28>
 d52:	08 95       	ret

00000d54 <__divmodhi4>:
 d54:	97 fb       	bst	r25, 7
 d56:	09 2e       	mov	r0, r25
 d58:	07 26       	eor	r0, r23
 d5a:	0a d0       	rcall	.+20     	; 0xd70 <__divmodhi4_neg1>
 d5c:	77 fd       	sbrc	r23, 7
 d5e:	04 d0       	rcall	.+8      	; 0xd68 <__divmodhi4_neg2>
 d60:	0c d0       	rcall	.+24     	; 0xd7a <__udivmodhi4>
 d62:	06 d0       	rcall	.+12     	; 0xd70 <__divmodhi4_neg1>
 d64:	00 20       	and	r0, r0
 d66:	1a f4       	brpl	.+6      	; 0xd6e <__divmodhi4_exit>

00000d68 <__divmodhi4_neg2>:
 d68:	70 95       	com	r23
 d6a:	61 95       	neg	r22
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000d6e <__divmodhi4_exit>:
 d6e:	08 95       	ret

00000d70 <__divmodhi4_neg1>:
 d70:	f6 f7       	brtc	.-4      	; 0xd6e <__divmodhi4_exit>
 d72:	90 95       	com	r25
 d74:	81 95       	neg	r24
 d76:	9f 4f       	sbci	r25, 0xFF	; 255
 d78:	08 95       	ret

00000d7a <__udivmodhi4>:
 d7a:	aa 1b       	sub	r26, r26
 d7c:	bb 1b       	sub	r27, r27
 d7e:	51 e1       	ldi	r21, 0x11	; 17
 d80:	07 c0       	rjmp	.+14     	; 0xd90 <__udivmodhi4_ep>

00000d82 <__udivmodhi4_loop>:
 d82:	aa 1f       	adc	r26, r26
 d84:	bb 1f       	adc	r27, r27
 d86:	a6 17       	cp	r26, r22
 d88:	b7 07       	cpc	r27, r23
 d8a:	10 f0       	brcs	.+4      	; 0xd90 <__udivmodhi4_ep>
 d8c:	a6 1b       	sub	r26, r22
 d8e:	b7 0b       	sbc	r27, r23

00000d90 <__udivmodhi4_ep>:
 d90:	88 1f       	adc	r24, r24
 d92:	99 1f       	adc	r25, r25
 d94:	5a 95       	dec	r21
 d96:	a9 f7       	brne	.-22     	; 0xd82 <__udivmodhi4_loop>
 d98:	80 95       	com	r24
 d9a:	90 95       	com	r25
 d9c:	bc 01       	movw	r22, r24
 d9e:	cd 01       	movw	r24, r26
 da0:	08 95       	ret

00000da2 <_exit>:
 da2:	f8 94       	cli

00000da4 <__stop_program>:
 da4:	ff cf       	rjmp	.-2      	; 0xda4 <__stop_program>
