
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015cc  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000034c  00800104  00800104  00001664  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a75  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000847  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf0  00000000  00000000  00004234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  00004f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  000056d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001207  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00006ebf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_1>
       8:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_2>
       c:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_3>
      10:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_4>
      14:	0c 94 18 04 	jmp	0x830	; 0x830 <__vector_5>
      18:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_6>
      1c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_7>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_29>
      78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec ec       	ldi	r30, 0xCC	; 204
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a4 30       	cpi	r26, 0x04	; 4
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
      be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
      c0:	14 e0       	ldi	r17, 0x04	; 4
      c2:	a4 e0       	ldi	r26, 0x04	; 4
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 35       	cpi	r26, 0x50	; 80
      cc:	b1 07       	cpc	r27, r17
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 ac 04 	call	0x958	; 0x958 <main>
      d4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:
#include "interrupts.h"

char ADC_is_running;

void setupADC() {
	DDRF = 0x00;
      dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
      de:	ea e7       	ldi	r30, 0x7A	; 122
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	80 81       	ld	r24, Z
      e4:	80 68       	ori	r24, 0x80	; 128
      e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
      e8:	80 81       	ld	r24, Z
      ea:	88 60       	ori	r24, 0x08	; 8
      ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
      ee:	80 81       	ld	r24, Z
      f0:	87 60       	ori	r24, 0x07	; 7
      f2:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | 0b01;
      f4:	ec e7       	ldi	r30, 0x7C	; 124
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
      fe:	10 92 04 01 	sts	0x0104, r1
	sei();
     102:	78 94       	sei
}
     104:	08 95       	ret

00000106 <startADC>:

void startADC() {
	ADC_is_running = 1;
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 93 04 01 	sts	0x0104, r24
	ADCSRA |= _BV(ADSC);
     10c:	ea e7       	ldi	r30, 0x7A	; 122
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	80 64       	ori	r24, 0x40	; 64
     114:	80 83       	st	Z, r24
	sei();
     116:	78 94       	sei
}
     118:	08 95       	ret

0000011a <stopADC>:

void stopADC() {
	ADC_is_running = 0;
     11a:	10 92 04 01 	sts	0x0104, r1
	ADCSRA &= ~_BV(ADSC);
     11e:	ea e7       	ldi	r30, 0x7A	; 122
     120:	f0 e0       	ldi	r31, 0x00	; 0
     122:	80 81       	ld	r24, Z
     124:	8f 7b       	andi	r24, 0xBF	; 191
     126:	80 83       	st	Z, r24
}
     128:	08 95       	ret

0000012a <updateMinimum>:

void updateMinimum(int refl) {
     12a:	9c 01       	movw	r18, r24
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples >= REFL_MAX_SAMPLES) return;
     12c:	80 91 da 01 	lds	r24, 0x01DA
     130:	90 91 db 01 	lds	r25, 0x01DB
     134:	fc 01       	movw	r30, r24
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	e8 0f       	add	r30, r24
     13c:	f9 1f       	adc	r31, r25
     13e:	ee 0f       	add	r30, r30
     140:	ff 1f       	adc	r31, r31
     142:	e2 52       	subi	r30, 0x22	; 34
     144:	fe 4f       	sbci	r31, 0xFE	; 254
     146:	44 81       	ldd	r20, Z+4	; 0x04
     148:	55 81       	ldd	r21, Z+5	; 0x05
     14a:	63 e0       	ldi	r22, 0x03	; 3
     14c:	48 3e       	cpi	r20, 0xE8	; 232
     14e:	56 07       	cpc	r21, r22
     150:	7c f5       	brge	.+94     	; 0x1b0 <updateMinimum+0x86>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
     152:	a9 01       	movw	r20, r18
     154:	41 50       	subi	r20, 0x01	; 1
     156:	50 40       	sbci	r21, 0x00	; 0
     158:	64 e0       	ldi	r22, 0x04	; 4
     15a:	40 30       	cpi	r20, 0x00	; 0
     15c:	56 07       	cpc	r21, r22
     15e:	40 f5       	brcc	.+80     	; 0x1b0 <updateMinimum+0x86>
	if(ringBuf[currentRefl].minRefl > refl) ringBuf[currentRefl].minRefl = refl;
     160:	fc 01       	movw	r30, r24
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	e8 0f       	add	r30, r24
     168:	f9 1f       	adc	r31, r25
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	e2 52       	subi	r30, 0x22	; 34
     170:	fe 4f       	sbci	r31, 0xFE	; 254
     172:	42 81       	ldd	r20, Z+2	; 0x02
     174:	53 81       	ldd	r21, Z+3	; 0x03
     176:	24 17       	cp	r18, r20
     178:	35 07       	cpc	r19, r21
     17a:	5c f4       	brge	.+22     	; 0x192 <updateMinimum+0x68>
     17c:	fc 01       	movw	r30, r24
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 0f       	add	r30, r24
     184:	f9 1f       	adc	r31, r25
     186:	ee 0f       	add	r30, r30
     188:	ff 1f       	adc	r31, r31
     18a:	e2 52       	subi	r30, 0x22	; 34
     18c:	fe 4f       	sbci	r31, 0xFE	; 254
     18e:	33 83       	std	Z+3, r19	; 0x03
     190:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[currentRefl].reflSamples++;
     192:	fc 01       	movw	r30, r24
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	8e 0f       	add	r24, r30
     19a:	9f 1f       	adc	r25, r31
     19c:	fc 01       	movw	r30, r24
     19e:	ee 0f       	add	r30, r30
     1a0:	ff 1f       	adc	r31, r31
     1a2:	e2 52       	subi	r30, 0x22	; 34
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	84 81       	ldd	r24, Z+4	; 0x04
     1a8:	95 81       	ldd	r25, Z+5	; 0x05
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	95 83       	std	Z+5, r25	; 0x05
     1ae:	84 83       	std	Z+4, r24	; 0x04
     1b0:	08 95       	ret

000001b2 <__vector_29>:
	return;
}

ISR(ADC_vect) {
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	0b b6       	in	r0, 0x3b	; 59
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	2f 93       	push	r18
     1c2:	3f 93       	push	r19
     1c4:	4f 93       	push	r20
     1c6:	5f 93       	push	r21
     1c8:	6f 93       	push	r22
     1ca:	7f 93       	push	r23
     1cc:	8f 93       	push	r24
     1ce:	9f 93       	push	r25
     1d0:	af 93       	push	r26
     1d2:	bf 93       	push	r27
     1d4:	ef 93       	push	r30
     1d6:	ff 93       	push	r31
	updateMinimum(ADC);
     1d8:	80 91 78 00 	lds	r24, 0x0078
     1dc:	90 91 79 00 	lds	r25, 0x0079
     1e0:	0e 94 95 00 	call	0x12a	; 0x12a <updateMinimum>
	ADCSRA |= _BV(ADSC);
     1e4:	ea e7       	ldi	r30, 0x7A	; 122
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	bf 91       	pop	r27
     1f4:	af 91       	pop	r26
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	7f 91       	pop	r23
     1fc:	6f 91       	pop	r22
     1fe:	5f 91       	pop	r21
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	0f 90       	pop	r0
     208:	0b be       	out	0x3b, r0	; 59
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <setupMotor>:
motorStates motorState;
motorStates pausedMotorState;

void setupMotor() {
	// enable port for output
	DDRC |= ~(MOTOR_BITMASK);
     214:	87 b1       	in	r24, 0x07	; 7
     216:	8f 60       	ori	r24, 0x0F	; 15
     218:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
     21a:	88 b1       	in	r24, 0x08	; 8
     21c:	80 7f       	andi	r24, 0xF0	; 240
     21e:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	DDRB = 0xFF;
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	84 b9       	out	0x04, r24	; 4
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
     224:	83 ea       	ldi	r24, 0xA3	; 163
     226:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
     22c:	8f e9       	ldi	r24, 0x9F	; 159
     22e:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
     230:	10 92 06 01 	sts	0x0106, r1
	pausedForUndef = 0;
     234:	10 92 07 01 	sts	0x0107, r1
	motorState = BRAKE;
     238:	10 92 08 01 	sts	0x0108, r1
	pausedMotorState = BRAKE;
     23c:	10 92 05 01 	sts	0x0105, r1
}
     240:	08 95       	ret

00000242 <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
     242:	87 bd       	out	0x27, r24	; 39
}
     244:	08 95       	ret

00000246 <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
     246:	88 b1       	in	r24, 0x08	; 8
     248:	80 7f       	andi	r24, 0xF0	; 240
     24a:	88 60       	ori	r24, 0x08	; 8
     24c:	88 b9       	out	0x08, r24	; 8
	motorState = FORWARD;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 08 01 	sts	0x0108, r24
}
     254:	08 95       	ret

00000256 <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
     256:	88 b1       	in	r24, 0x08	; 8
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	81 60       	ori	r24, 0x01	; 1
     25c:	88 b9       	out	0x08, r24	; 8
	motorState = REVERSE;
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	80 93 08 01 	sts	0x0108, r24
}
     264:	08 95       	ret

00000266 <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
     266:	88 b1       	in	r24, 0x08	; 8
     268:	80 7f       	andi	r24, 0xF0	; 240
     26a:	88 b9       	out	0x08, r24	; 8
	motorState = BRAKE;
     26c:	10 92 08 01 	sts	0x0108, r1
}
     270:	08 95       	ret

00000272 <setMotorCoast>:

void setMotorCoast() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
     272:	88 b1       	in	r24, 0x08	; 8
     274:	80 7f       	andi	r24, 0xF0	; 240
     276:	86 60       	ori	r24, 0x06	; 6
     278:	88 b9       	out	0x08, r24	; 8
	motorState = COAST;
     27a:	83 e0       	ldi	r24, 0x03	; 3
     27c:	80 93 08 01 	sts	0x0108, r24
     280:	08 95       	ret

00000282 <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
     282:	8d b3       	in	r24, 0x1d	; 29
     284:	80 78       	andi	r24, 0x80	; 128
     286:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
     288:	8a b1       	in	r24, 0x0a	; 10
     28a:	80 7f       	andi	r24, 0xF0	; 240
     28c:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
     28e:	8d b1       	in	r24, 0x0d	; 13
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Rising-edge interrupt
	EICRA |= _BV(ISC01);
     294:	e9 e6       	ldi	r30, 0x69	; 105
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	82 60       	ori	r24, 0x02	; 2
     29c:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
     2a4:	80 81       	ld	r24, Z
     2a6:	88 60       	ori	r24, 0x08	; 8
     2a8:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
     2aa:	80 81       	ld	r24, Z
     2ac:	8b 7f       	andi	r24, 0xFB	; 251
     2ae:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
     2b0:	80 81       	ld	r24, Z
     2b2:	8f 7d       	andi	r24, 0xDF	; 223
     2b4:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
     2b6:	80 81       	ld	r24, Z
     2b8:	80 61       	ori	r24, 0x10	; 16
     2ba:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
     2bc:	80 81       	ld	r24, Z
     2be:	80 68       	ori	r24, 0x80	; 128
     2c0:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
     2c2:	80 81       	ld	r24, Z
     2c4:	8f 7b       	andi	r24, 0xBF	; 191
     2c6:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
     2c8:	ea e6       	ldi	r30, 0x6A	; 106
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	82 60       	ori	r24, 0x02	; 2
     2d0:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
     2d2:	80 81       	ld	r24, Z
     2d4:	8e 7f       	andi	r24, 0xFE	; 254
     2d6:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
     2d8:	80 81       	ld	r24, Z
     2da:	88 60       	ori	r24, 0x08	; 8
     2dc:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
     2de:	80 81       	ld	r24, Z
     2e0:	8b 7f       	andi	r24, 0xFB	; 251
     2e2:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
     2e4:	80 81       	ld	r24, Z
     2e6:	80 62       	ori	r24, 0x20	; 32
     2e8:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
     2ea:	80 81       	ld	r24, Z
     2ec:	8f 7e       	andi	r24, 0xEF	; 239
     2ee:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
     2f0:	8d b3       	in	r24, 0x1d	; 29
     2f2:	8f 67       	ori	r24, 0x7F	; 127
     2f4:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
     2f6:	8c b3       	in	r24, 0x1c	; 28
     2f8:	8f 67       	ori	r24, 0x7F	; 127
     2fa:	8c bb       	out	0x1c, r24	; 28
	sei();
     2fc:	78 94       	sei
}
     2fe:	08 95       	ret

00000300 <makeDecision>:

void makeDecision(int index) {
	//if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
	//writeHexInt(ringBuf[index].avgRefl);
	int refl = ringBuf[index].minRefl;
     300:	fc 01       	movw	r30, r24
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	e8 0f       	add	r30, r24
     308:	f9 1f       	adc	r31, r25
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	e2 52       	subi	r30, 0x22	; 34
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	52 81       	ldd	r21, Z+2	; 0x02
     314:	43 81       	ldd	r20, Z+3	; 0x03
	if(ringBuf[index].metal == 1) {
     316:	21 81       	ldd	r18, Z+1	; 0x01
     318:	21 30       	cpi	r18, 0x01	; 1
     31a:	41 f5       	brne	.+80     	; 0x36c <makeDecision+0x6c>
		if((refl <= STEEL_MAX) && (refl >= STEEL_MIN)) {
     31c:	25 2f       	mov	r18, r21
     31e:	34 2f       	mov	r19, r20
     320:	a9 01       	movw	r20, r18
     322:	44 56       	subi	r20, 0x64	; 100
     324:	50 40       	sbci	r21, 0x00	; 0
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	4d 3b       	cpi	r20, 0xBD	; 189
     32a:	56 07       	cpc	r21, r22
     32c:	68 f4       	brcc	.+26     	; 0x348 <makeDecision+0x48>
			ringBuf[index].type = STEEL;
     32e:	fc 01       	movw	r30, r24
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	8e 0f       	add	r24, r30
     336:	9f 1f       	adc	r25, r31
     338:	fc 01       	movw	r30, r24
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	e2 52       	subi	r30, 0x22	; 34
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	83 e0       	ldi	r24, 0x03	; 3
     344:	80 83       	st	Z, r24
			return;
     346:	08 95       	ret
		}
		if((refl <= ALUMINUM_MAX) && (refl >= ALUMINUM_MIN)) {
     348:	2e 51       	subi	r18, 0x1E	; 30
     34a:	30 40       	sbci	r19, 0x00	; 0
     34c:	27 34       	cpi	r18, 0x47	; 71
     34e:	31 05       	cpc	r19, r1
     350:	98 f5       	brcc	.+102    	; 0x3b8 <makeDecision+0xb8>
			ringBuf[index].type = ALUMINUM;
     352:	fc 01       	movw	r30, r24
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	8e 0f       	add	r24, r30
     35a:	9f 1f       	adc	r25, r31
     35c:	fc 01       	movw	r30, r24
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	e2 52       	subi	r30, 0x22	; 34
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	80 83       	st	Z, r24
			return;
     36a:	08 95       	ret
		}
	} else {	
		if((refl <= BLACK_MAX) && (refl >= BLACK_MIN)) {
     36c:	25 2f       	mov	r18, r21
     36e:	34 2f       	mov	r19, r20
     370:	a9 01       	movw	r20, r18
     372:	4d 59       	subi	r20, 0x9D	; 157
     374:	53 40       	sbci	r21, 0x03	; 3
     376:	4c 34       	cpi	r20, 0x4C	; 76
     378:	51 05       	cpc	r21, r1
     37a:	68 f4       	brcc	.+26     	; 0x396 <makeDecision+0x96>
			ringBuf[index].type = BLACK;
     37c:	fc 01       	movw	r30, r24
     37e:	ee 0f       	add	r30, r30
     380:	ff 1f       	adc	r31, r31
     382:	8e 0f       	add	r24, r30
     384:	9f 1f       	adc	r25, r31
     386:	fc 01       	movw	r30, r24
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e2 52       	subi	r30, 0x22	; 34
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 83       	st	Z, r24
			return;
     394:	08 95       	ret
		}
		if((refl <= WHITE_MAX) && (refl >= WHITE_MIN)) {
     396:	28 54       	subi	r18, 0x48	; 72
     398:	33 40       	sbci	r19, 0x03	; 3
     39a:	2c 34       	cpi	r18, 0x4C	; 76
     39c:	31 05       	cpc	r19, r1
     39e:	60 f4       	brcc	.+24     	; 0x3b8 <makeDecision+0xb8>
			ringBuf[index].type = WHITE;
     3a0:	fc 01       	movw	r30, r24
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	8e 0f       	add	r24, r30
     3a8:	9f 1f       	adc	r25, r31
     3aa:	fc 01       	movw	r30, r24
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	e2 52       	subi	r30, 0x22	; 34
     3b2:	fe 4f       	sbci	r31, 0xFE	; 254
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	80 83       	st	Z, r24
     3b8:	08 95       	ret

000003ba <firstLaserHandler>:
/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	// no pending item
	if(currentMetal == -1) {
     3ba:	80 91 43 04 	lds	r24, 0x0443
     3be:	90 91 44 04 	lds	r25, 0x0444
     3c2:	2f ef       	ldi	r18, 0xFF	; 255
     3c4:	8f 3f       	cpi	r24, 0xFF	; 255
     3c6:	92 07       	cpc	r25, r18
     3c8:	39 f4       	brne	.+14     	; 0x3d8 <firstLaserHandler+0x1e>
		currentMetal = newRingBufItem();
     3ca:	0e 94 d1 06 	call	0xda2	; 0xda2 <newRingBufItem>
     3ce:	90 93 44 04 	sts	0x0444, r25
     3d2:	80 93 43 04 	sts	0x0443, r24
     3d6:	08 95       	ret
	} else {
		//item in conversion
		
		// place the currently converting item on the queue
		newMetal(currentMetal);
     3d8:	0e 94 3c 06 	call	0xc78	; 0xc78 <newMetal>
		
		// make the new item and start conversion
		currentMetal = newRingBufItem();
     3dc:	0e 94 d1 06 	call	0xda2	; 0xda2 <newRingBufItem>
     3e0:	90 93 44 04 	sts	0x0444, r25
     3e4:	80 93 43 04 	sts	0x0443, r24
     3e8:	08 95       	ret

000003ea <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	if(currentMetal != -1) ringBuf[currentMetal].metal = 1;
     3ea:	80 91 43 04 	lds	r24, 0x0443
     3ee:	90 91 44 04 	lds	r25, 0x0444
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	8f 3f       	cpi	r24, 0xFF	; 255
     3f6:	92 07       	cpc	r25, r18
     3f8:	61 f0       	breq	.+24     	; 0x412 <metalHandler+0x28>
     3fa:	fc 01       	movw	r30, r24
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	8e 0f       	add	r24, r30
     402:	9f 1f       	adc	r25, r31
     404:	fc 01       	movw	r30, r24
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e2 52       	subi	r30, 0x22	; 34
     40c:	fe 4f       	sbci	r31, 0xFE	; 254
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 83       	std	Z+1, r24	; 0x01
     412:	08 95       	ret

00000414 <secondLaserHandler>:

/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
	if(ADC_is_running == 1) {
     418:	80 91 04 01 	lds	r24, 0x0104
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	99 f4       	brne	.+38     	; 0x446 <secondLaserHandler+0x32>
     420:	c8 e0       	ldi	r28, 0x08	; 8
     422:	d0 e0       	ldi	r29, 0x00	; 0
		// debounce
		for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
			delaynus(DEBOUNCE_DELAY_US);
     424:	8a ef       	ldi	r24, 0xFA	; 250
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
			if((PIND & (1 << 2)) != 0) return;
     42c:	4a 99       	sbic	0x09, 2	; 9
     42e:	32 c0       	rjmp	.+100    	; 0x494 <secondLaserHandler+0x80>
     430:	21 97       	sbiw	r28, 0x01	; 1
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
		// debounce
		for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     432:	c1 f7       	brne	.-16     	; 0x424 <secondLaserHandler+0x10>
			delaynus(DEBOUNCE_DELAY_US);
			if((PIND & (1 << 2)) != 0) return;
		}
		// stop ADC
		stopADC();
     434:	0e 94 8d 00 	call	0x11a	; 0x11a <stopADC>
		makeDecision(currentRefl);
     438:	80 91 da 01 	lds	r24, 0x01DA
     43c:	90 91 db 01 	lds	r25, 0x01DB
     440:	0e 94 80 01 	call	0x300	; 0x300 <makeDecision>
     444:	27 c0       	rjmp	.+78     	; 0x494 <secondLaserHandler+0x80>
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
     446:	c8 e0       	ldi	r28, 0x08	; 8
     448:	d0 e0       	ldi	r29, 0x00	; 0
		stopADC();
		makeDecision(currentRefl);
		// TODO
	} else {
		for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
			delaynus(DEBOUNCE_DELAY_US);
     44a:	8a ef       	ldi	r24, 0xFA	; 250
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
			if((PIND & (1 << 2)) == 0) return;
     452:	4a 9b       	sbis	0x09, 2	; 9
     454:	1f c0       	rjmp	.+62     	; 0x494 <secondLaserHandler+0x80>
     456:	21 97       	sbiw	r28, 0x01	; 1
		// stop ADC
		stopADC();
		makeDecision(currentRefl);
		// TODO
	} else {
		for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     458:	c1 f7       	brne	.-16     	; 0x44a <secondLaserHandler+0x36>
			delaynus(DEBOUNCE_DELAY_US);
			if((PIND & (1 << 2)) == 0) return;
		}
		if(metalCount == 0) {
     45a:	80 91 0d 01 	lds	r24, 0x010D
     45e:	90 91 0e 01 	lds	r25, 0x010E
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	79 f4       	brne	.+30     	; 0x484 <secondLaserHandler+0x70>
			currentRefl = currentMetal;
     466:	80 91 43 04 	lds	r24, 0x0443
     46a:	90 91 44 04 	lds	r25, 0x0444
     46e:	90 93 db 01 	sts	0x01DB, r25
     472:	80 93 da 01 	sts	0x01DA, r24
			currentMetal = -1;
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	9f ef       	ldi	r25, 0xFF	; 255
     47a:	90 93 44 04 	sts	0x0444, r25
     47e:	80 93 43 04 	sts	0x0443, r24
     482:	06 c0       	rjmp	.+12     	; 0x490 <secondLaserHandler+0x7c>
		} else {
			currentRefl = popMetal();
     484:	0e 94 0d 06 	call	0xc1a	; 0xc1a <popMetal>
     488:	90 93 db 01 	sts	0x01DB, r25
     48c:	80 93 da 01 	sts	0x01DA, r24
		}			
		startADC();
     490:	0e 94 83 00 	call	0x106	; 0x106 <startADC>
	}
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <shutdownHandler>:
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
}

void shutdownHandler() {
	if(bufLength == 0) {
     49a:	80 91 3f 04 	lds	r24, 0x043F
     49e:	90 91 40 04 	lds	r25, 0x0440
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	39 f4       	brne	.+14     	; 0x4b4 <shutdownHandler+0x1a>
		delaynms(500);
     4a6:	84 ef       	ldi	r24, 0xF4	; 244
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
		setMotorBrake();
     4ae:	0e 94 33 01 	call	0x266	; 0x266 <setMotorBrake>
     4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <shutdownHandler+0x18>
     4b4:	08 95       	ret

000004b6 <pausedHandler>:
		while(1);
	}
}

void pausedHandler() {
	if(inPause == 1) {
     4b6:	80 91 d7 01 	lds	r24, 0x01D7
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	19 f5       	brne	.+70     	; 0x504 <pausedHandler+0x4e>
		inPause = 0;
     4be:	10 92 d7 01 	sts	0x01D7, r1
		// restore the motor state
		switch (pausedMotorState) {
     4c2:	80 91 05 01 	lds	r24, 0x0105
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	39 f0       	breq	.+14     	; 0x4d8 <pausedHandler+0x22>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	58 f0       	brcs	.+22     	; 0x4e4 <pausedHandler+0x2e>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	31 f0       	breq	.+12     	; 0x4de <pausedHandler+0x28>
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	61 f4       	brne	.+24     	; 0x4ee <pausedHandler+0x38>
     4d6:	09 c0       	rjmp	.+18     	; 0x4ea <pausedHandler+0x34>
			case FORWARD:
				setMotorFwd();
     4d8:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
				break;
     4dc:	08 c0       	rjmp	.+16     	; 0x4ee <pausedHandler+0x38>
			case REVERSE:
				setMotorRev();
     4de:	0e 94 2b 01 	call	0x256	; 0x256 <setMotorRev>
				break;
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <pausedHandler+0x38>
			case BRAKE:
				setMotorBrake();
     4e4:	0e 94 33 01 	call	0x266	; 0x266 <setMotorBrake>
				break;
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <pausedHandler+0x38>
			case COAST:
				setMotorCoast();
     4ea:	0e 94 39 01 	call	0x272	; 0x272 <setMotorCoast>
				break;
			default:
				break;
		}
		// see if the last item was undefined
		if(pausedForUndef) {
     4ee:	80 91 07 01 	lds	r24, 0x0107
     4f2:	88 23       	and	r24, r24
     4f4:	81 f0       	breq	.+32     	; 0x516 <pausedHandler+0x60>
			popBuf();
     4f6:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
			setMotorFwd();
     4fa:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
			pausedForUndef = 0;
     4fe:	10 92 07 01 	sts	0x0107, r1
     502:	08 95       	ret
		}
	} else {
		// store the motor state
		pausedMotorState = motorState;
     504:	80 91 08 01 	lds	r24, 0x0108
     508:	80 93 05 01 	sts	0x0105, r24
		setMotorBrake();
     50c:	0e 94 33 01 	call	0x266	; 0x266 <setMotorBrake>
		inPause = 1;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 d7 01 	sts	0x01D7, r24
     516:	08 95       	ret

00000518 <exitHandler>:
/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	// is there an item on the queue?
	if(bufLength==0) return;
     518:	80 91 3f 04 	lds	r24, 0x043F
     51c:	90 91 40 04 	lds	r25, 0x0440
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	09 f4       	brne	.+2      	; 0x526 <exitHandler+0xe>
     524:	ba c0       	rjmp	.+372    	; 0x69a <exitHandler+0x182>
	// if we're in pause, ignore it as it's probably
	// the operator pulling the piece off
	if(inPause==1) return;
     526:	80 91 d7 01 	lds	r24, 0x01D7
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	09 f4       	brne	.+2      	; 0x530 <exitHandler+0x18>
     52e:	b5 c0       	rjmp	.+362    	; 0x69a <exitHandler+0x182>
	// are we in position?
	switch(ringBuf[ringTop].type) {
     530:	80 91 dc 01 	lds	r24, 0x01DC
     534:	90 91 dd 01 	lds	r25, 0x01DD
     538:	fc 01       	movw	r30, r24
     53a:	ee 0f       	add	r30, r30
     53c:	ff 1f       	adc	r31, r31
     53e:	8e 0f       	add	r24, r30
     540:	9f 1f       	adc	r25, r31
     542:	fc 01       	movw	r30, r24
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e2 52       	subi	r30, 0x22	; 34
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	80 81       	ld	r24, Z
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	09 f4       	brne	.+2      	; 0x554 <exitHandler+0x3c>
     552:	6e c0       	rjmp	.+220    	; 0x630 <exitHandler+0x118>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	38 f4       	brcc	.+14     	; 0x566 <exitHandler+0x4e>
     558:	88 23       	and	r24, r24
     55a:	09 f4       	brne	.+2      	; 0x55e <exitHandler+0x46>
     55c:	88 c0       	rjmp	.+272    	; 0x66e <exitHandler+0x156>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	09 f0       	breq	.+2      	; 0x564 <exitHandler+0x4c>
     562:	96 c0       	rjmp	.+300    	; 0x690 <exitHandler+0x178>
     564:	06 c0       	rjmp	.+12     	; 0x572 <exitHandler+0x5a>
     566:	83 30       	cpi	r24, 0x03	; 3
     568:	19 f1       	breq	.+70     	; 0x5b0 <exitHandler+0x98>
     56a:	84 30       	cpi	r24, 0x04	; 4
     56c:	09 f0       	breq	.+2      	; 0x570 <exitHandler+0x58>
     56e:	90 c0       	rjmp	.+288    	; 0x690 <exitHandler+0x178>
     570:	3f c0       	rjmp	.+126    	; 0x5f0 <exitHandler+0xd8>
		case BLACK:
			if(steps==BLACK_POSITION) {
     572:	80 91 4b 04 	lds	r24, 0x044B
     576:	90 91 4c 04 	lds	r25, 0x044C
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	09 f0       	breq	.+2      	; 0x580 <exitHandler+0x68>
     57e:	88 c0       	rjmp	.+272    	; 0x690 <exitHandler+0x178>
				blackSorted++;
     580:	80 91 3b 04 	lds	r24, 0x043B
     584:	90 91 3c 04 	lds	r25, 0x043C
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	90 93 3c 04 	sts	0x043C, r25
     58e:	80 93 3b 04 	sts	0x043B, r24
				totalSorted++;
     592:	20 91 41 04 	lds	r18, 0x0441
     596:	30 91 42 04 	lds	r19, 0x0442
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	30 93 42 04 	sts	0x0442, r19
     5a2:	20 93 41 04 	sts	0x0441, r18
				writeBlack(blackSorted);
     5a6:	0e 94 20 08 	call	0x1040	; 0x1040 <writeBlack>
				popBuf();
     5aa:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
				return;
     5ae:	08 95       	ret
			}
			break;
		case STEEL:
			if(steps==STEEL_POSITION) {
     5b0:	80 91 4b 04 	lds	r24, 0x044B
     5b4:	90 91 4c 04 	lds	r25, 0x044C
     5b8:	86 39       	cpi	r24, 0x96	; 150
     5ba:	91 05       	cpc	r25, r1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <exitHandler+0xa8>
     5be:	68 c0       	rjmp	.+208    	; 0x690 <exitHandler+0x178>
				steelSorted++;
     5c0:	80 91 36 04 	lds	r24, 0x0436
     5c4:	90 91 37 04 	lds	r25, 0x0437
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 37 04 	sts	0x0437, r25
     5ce:	80 93 36 04 	sts	0x0436, r24
				totalSorted++;
     5d2:	20 91 41 04 	lds	r18, 0x0441
     5d6:	30 91 42 04 	lds	r19, 0x0442
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	3f 4f       	sbci	r19, 0xFF	; 255
     5de:	30 93 42 04 	sts	0x0442, r19
     5e2:	20 93 41 04 	sts	0x0441, r18
				writeSteel(steelSorted);
     5e6:	0e 94 fc 07 	call	0xff8	; 0xff8 <writeSteel>
				popBuf();
     5ea:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
				return;
     5ee:	08 95       	ret
			}
			break;
		case ALUMINUM:
			if(steps==ALUMINUM_POSIITION) {
     5f0:	80 91 4b 04 	lds	r24, 0x044B
     5f4:	90 91 4c 04 	lds	r25, 0x044C
     5f8:	82 33       	cpi	r24, 0x32	; 50
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <exitHandler+0xe8>
     5fe:	48 c0       	rjmp	.+144    	; 0x690 <exitHandler+0x178>
				aluminumSorted++;
     600:	80 91 38 04 	lds	r24, 0x0438
     604:	90 91 39 04 	lds	r25, 0x0439
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	90 93 39 04 	sts	0x0439, r25
     60e:	80 93 38 04 	sts	0x0438, r24
				totalSorted++;
     612:	20 91 41 04 	lds	r18, 0x0441
     616:	30 91 42 04 	lds	r19, 0x0442
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	30 93 42 04 	sts	0x0442, r19
     622:	20 93 41 04 	sts	0x0441, r18
				writeAluminum(aluminumSorted);
     626:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writeAluminum>
				popBuf();
     62a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
				return;
     62e:	08 95       	ret
			}
			break;
		case WHITE:
			if(steps==WHITE_POSITION) {
     630:	80 91 4b 04 	lds	r24, 0x044B
     634:	90 91 4c 04 	lds	r25, 0x044C
     638:	84 36       	cpi	r24, 0x64	; 100
     63a:	91 05       	cpc	r25, r1
     63c:	49 f5       	brne	.+82     	; 0x690 <exitHandler+0x178>
				whiteSorted++;
     63e:	80 91 3d 04 	lds	r24, 0x043D
     642:	90 91 3e 04 	lds	r25, 0x043E
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	90 93 3e 04 	sts	0x043E, r25
     64c:	80 93 3d 04 	sts	0x043D, r24
				totalSorted++;
     650:	20 91 41 04 	lds	r18, 0x0441
     654:	30 91 42 04 	lds	r19, 0x0442
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	30 93 42 04 	sts	0x0442, r19
     660:	20 93 41 04 	sts	0x0441, r18
				writeWhite(whiteSorted);
     664:	0e 94 44 08 	call	0x1088	; 0x1088 <writeWhite>
				popBuf();
     668:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
				return;
     66c:	08 95       	ret
			}
			break;
		case UNDEF:
			//undefined item
			writeError(0xF0);
     66e:	80 ef       	ldi	r24, 0xF0	; 240
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 65 07 	call	0xeca	; 0xeca <writeError>
			if ((PINE & 0b1) == 0b1) {
     676:	60 9b       	sbis	0x0c, 0	; 12
     678:	03 c0       	rjmp	.+6      	; 0x680 <exitHandler+0x168>
				// ignore error mode, just send 'er off
				popBuf();
     67a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <popBuf>
				return;
     67e:	08 95       	ret
			} else {
				pausedForUndef = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 07 01 	sts	0x0107, r24
				setMotorBrake();
     686:	0e 94 33 01 	call	0x266	; 0x266 <setMotorBrake>
				pausedHandler();
     68a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <pausedHandler>
				return;
     68e:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
     690:	0e 94 33 01 	call	0x266	; 0x266 <setMotorBrake>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 06 01 	sts	0x0106, r24
     69a:	08 95       	ret

0000069c <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	0b b6       	in	r0, 0x3b	; 59
     6a6:	0f 92       	push	r0
     6a8:	11 24       	eor	r1, r1
     6aa:	2f 93       	push	r18
     6ac:	3f 93       	push	r19
     6ae:	4f 93       	push	r20
     6b0:	5f 93       	push	r21
     6b2:	6f 93       	push	r22
     6b4:	7f 93       	push	r23
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31
     6c6:	c8 e0       	ldi	r28, 0x08	; 8
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
		delaynus(DEBOUNCE_DELAY_US);
     6ca:	8a ef       	ldi	r24, 0xFA	; 250
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
		if ((PIND & 0b1) != 0) return;
     6d2:	48 99       	sbic	0x09, 0	; 9
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__vector_1+0x42>
     6d6:	21 97       	sbiw	r28, 0x01	; 1
/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     6d8:	c1 f7       	brne	.-16     	; 0x6ca <__vector_1+0x2e>
		delaynus(DEBOUNCE_DELAY_US);
		if ((PIND & 0b1) != 0) return;
	}
	firstLaserHandler();
     6da:	0e 94 dd 01 	call	0x3ba	; 0x3ba <firstLaserHandler>
}
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	bf 91       	pop	r27
     6e8:	af 91       	pop	r26
     6ea:	9f 91       	pop	r25
     6ec:	8f 91       	pop	r24
     6ee:	7f 91       	pop	r23
     6f0:	6f 91       	pop	r22
     6f2:	5f 91       	pop	r21
     6f4:	4f 91       	pop	r20
     6f6:	3f 91       	pop	r19
     6f8:	2f 91       	pop	r18
     6fa:	0f 90       	pop	r0
     6fc:	0b be       	out	0x3b, r0	; 59
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	0b b6       	in	r0, 0x3b	; 59
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	2f 93       	push	r18
     718:	3f 93       	push	r19
     71a:	4f 93       	push	r20
     71c:	5f 93       	push	r21
     71e:	6f 93       	push	r22
     720:	7f 93       	push	r23
     722:	8f 93       	push	r24
     724:	9f 93       	push	r25
     726:	af 93       	push	r26
     728:	bf 93       	push	r27
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	ef 93       	push	r30
     730:	ff 93       	push	r31
     732:	c8 e0       	ldi	r28, 0x08	; 8
     734:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
		delaynus(DEBOUNCE_DELAY_US);
     736:	8a ef       	ldi	r24, 0xFA	; 250
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
		if((PIND & (1 << 1)) != 0) return;
     73e:	49 99       	sbic	0x09, 1	; 9
     740:	04 c0       	rjmp	.+8      	; 0x74a <__vector_2+0x42>
     742:	21 97       	sbiw	r28, 0x01	; 1
/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     744:	c1 f7       	brne	.-16     	; 0x736 <__vector_2+0x2e>
		delaynus(DEBOUNCE_DELAY_US);
		if((PIND & (1 << 1)) != 0) return;
	}
	metalHandler();
     746:	0e 94 f5 01 	call	0x3ea	; 0x3ea <metalHandler>
}
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0b be       	out	0x3b, r0	; 59
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	0b b6       	in	r0, 0x3b	; 59
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
	// debounce is handled by function call
	secondLaserHandler();
     79a:	0e 94 0a 02 	call	0x414	; 0x414 <secondLaserHandler>
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	bf 91       	pop	r27
     7a4:	af 91       	pop	r26
     7a6:	9f 91       	pop	r25
     7a8:	8f 91       	pop	r24
     7aa:	7f 91       	pop	r23
     7ac:	6f 91       	pop	r22
     7ae:	5f 91       	pop	r21
     7b0:	4f 91       	pop	r20
     7b2:	3f 91       	pop	r19
     7b4:	2f 91       	pop	r18
     7b6:	0f 90       	pop	r0
     7b8:	0b be       	out	0x3b, r0	; 59
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	0b b6       	in	r0, 0x3b	; 59
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	2f 93       	push	r18
     7d4:	3f 93       	push	r19
     7d6:	4f 93       	push	r20
     7d8:	5f 93       	push	r21
     7da:	6f 93       	push	r22
     7dc:	7f 93       	push	r23
     7de:	8f 93       	push	r24
     7e0:	9f 93       	push	r25
     7e2:	af 93       	push	r26
     7e4:	bf 93       	push	r27
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	c8 e0       	ldi	r28, 0x08	; 8
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
		delaynus(DEBOUNCE_DELAY_US);
     7f2:	8a ef       	ldi	r24, 0xFA	; 250
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
		if((PIND & (1 << 3)) != 0) return;
     7fa:	4b 99       	sbic	0x09, 3	; 9
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__vector_4+0x42>
     7fe:	21 97       	sbiw	r28, 0x01	; 1
/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     800:	c1 f7       	brne	.-16     	; 0x7f2 <__vector_4+0x2e>
		delaynus(DEBOUNCE_DELAY_US);
		if((PIND & (1 << 3)) != 0) return;
	}
	exitHandler();
     802:	0e 94 8c 02 	call	0x518	; 0x518 <exitHandler>
}
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	0f 90       	pop	r0
     824:	0b be       	out	0x3b, r0	; 59
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
     85a:	c8 e0       	ldi	r28, 0x08	; 8
     85c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
		delaynus(DEBOUNCE_DELAY_US);
     85e:	8a ef       	ldi	r24, 0xFA	; 250
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 86 0a 	call	0x150c	; 0x150c <delaynus>
		if((PINE & (1 << 4)) != 0) return;
     866:	64 99       	sbic	0x0c, 4	; 12
     868:	05 c0       	rjmp	.+10     	; 0x874 <__vector_5+0x44>
     86a:	21 97       	sbiw	r28, 0x01	; 1
/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
	for (int i=0; i<DEBOUNCE_SAMPLES; i++) {
     86c:	c1 f7       	brne	.-16     	; 0x85e <__vector_5+0x2e>
		delaynus(DEBOUNCE_DELAY_US);
		if((PINE & (1 << 4)) != 0) return;
	}
	hallLow = 1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 4f 04 	sts	0x044F, r24
}
     874:	ff 91       	pop	r31
     876:	ef 91       	pop	r30
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	bf 91       	pop	r27
     87e:	af 91       	pop	r26
     880:	9f 91       	pop	r25
     882:	8f 91       	pop	r24
     884:	7f 91       	pop	r23
     886:	6f 91       	pop	r22
     888:	5f 91       	pop	r21
     88a:	4f 91       	pop	r20
     88c:	3f 91       	pop	r19
     88e:	2f 91       	pop	r18
     890:	0f 90       	pop	r0
     892:	0b be       	out	0x3b, r0	; 59
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	0b b6       	in	r0, 0x3b	; 59
     8a8:	0f 92       	push	r0
     8aa:	11 24       	eor	r1, r1
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	ef 93       	push	r30
     8c2:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
     8c4:	84 e1       	ldi	r24, 0x14	; 20
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
	if((PINE & (1 << 5)) == 0) {
     8cc:	65 99       	sbic	0x0c, 5	; 12
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__vector_6+0x38>
		shutdown = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 3a 04 	sts	0x043A, r24
	}
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0b be       	out	0x3b, r0	; 59
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	0b b6       	in	r0, 0x3b	; 59
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
	delaynms(BUTTON_DEBOUNCE_DELAY);
     922:	84 e1       	ldi	r24, 0x14	; 20
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
	if((PINE & (1 << 6)) == 0) {
     92a:	66 99       	sbic	0x0c, 6	; 12
     92c:	02 c0       	rjmp	.+4      	; 0x932 <__vector_7+0x36>
		pausedHandler();
     92e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <pausedHandler>
	}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
     958:	e1 e6       	ldi	r30, 0x61	; 97
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	80 83       	st	Z, r24
	CLKPR = 0;
     960:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
     962:	0e 94 80 0a 	call	0x1500	; 0x1500 <initializeTimer>
	
	writeHexInt(0x50);
     966:	80 e5       	ldi	r24, 0x50	; 80
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>
	
	// Initialize ring buffer
	initRingBuf();
     96e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <initRingBuf>
	
	// Initialize metal queue
	initMetalQueue();
     972:	0e 94 ef 05 	call	0xbde	; 0xbde <initMetalQueue>
	
	writeHexInt(0x51);
     976:	81 e5       	ldi	r24, 0x51	; 81
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>
	
	// enable output for stepper and display.
	DDRA = 0xFF;
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
     982:	0e 94 41 01 	call	0x282	; 0x282 <vectorInterrupts>
	
	writeHexInt(0x52);
     986:	82 e5       	ldi	r24, 0x52	; 82
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>

	// init stepper
	initalizeStepper();
     98e:	0e 94 b5 08 	call	0x116a	; 0x116a <initalizeStepper>
	
	writeHexInt(0x53);
     992:	83 e5       	ldi	r24, 0x53	; 83
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>

	// zero stepper
	while(steps != 0){
     99a:	80 91 4b 04 	lds	r24, 0x044B
     99e:	90 91 4c 04 	lds	r25, 0x044C
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	89 f0       	breq	.+34     	; 0x9c8 <main+0x70>
		stepTime(20,0);
     9a6:	84 e1       	ldi	r24, 0x14	; 20
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	0e 94 c9 08 	call	0x1192	; 0x1192 <stepTime>
		writeHexInt(steps);
     9b0:	80 91 4b 04 	lds	r24, 0x044B
     9b4:	90 91 4c 04 	lds	r25, 0x044C
     9b8:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>
	initalizeStepper();
	
	writeHexInt(0x53);

	// zero stepper
	while(steps != 0){
     9bc:	80 91 4b 04 	lds	r24, 0x044B
     9c0:	90 91 4c 04 	lds	r25, 0x044C
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	79 f7       	brne	.-34     	; 0x9a6 <main+0x4e>
		stepTime(20,0);
		writeHexInt(steps);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
     9c8:	10 92 4c 04 	sts	0x044C, r1
     9cc:	10 92 4b 04 	sts	0x044B, r1
	// reset hall effect check
	hallLow = 0;
     9d0:	10 92 4f 04 	sts	0x044F, r1
	

	setupADC();
     9d4:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>

	// wait one second
	delaynms(1000);
     9d8:	88 ee       	ldi	r24, 0xE8	; 232
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
	
	// start the motor
	setupMotor();
     9e0:	0e 94 0a 01 	call	0x214	; 0x214 <setupMotor>
	writeHexInt(0x54);
     9e4:	84 e5       	ldi	r24, 0x54	; 84
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 89 08 	call	0x1112	; 0x1112 <writeHexInt>
	setMotorFwd();
     9ec:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
			delaynms(5000);
			shutdownHandler();
		}
		// pause if we need to
		while(inPause == 1) {
			writeDecInt(ringBuf[ringTop].minRefl);
     9f0:	ce ed       	ldi	r28, 0xDE	; 222
     9f2:	d1 e0       	ldi	r29, 0x01	; 1
	writeHexInt(0x54);
	setMotorFwd();
	
	while(1) {
		// ramp down
		if (shutdown) {
     9f4:	80 91 3a 04 	lds	r24, 0x043A
     9f8:	88 23       	and	r24, r24
     9fa:	31 f0       	breq	.+12     	; 0xa08 <main+0xb0>
			delaynms(5000);
     9fc:	88 e8       	ldi	r24, 0x88	; 136
     9fe:	93 e1       	ldi	r25, 0x13	; 19
     a00:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			shutdownHandler();
     a04:	0e 94 4d 02 	call	0x49a	; 0x49a <shutdownHandler>
		}
		// pause if we need to
		while(inPause == 1) {
     a08:	80 91 d7 01 	lds	r24, 0x01D7
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <main+0xba>
     a10:	aa c0       	rjmp	.+340    	; 0xb66 <main+0x20e>
			writeDecInt(ringBuf[ringTop].minRefl);
     a12:	80 91 dc 01 	lds	r24, 0x01DC
     a16:	90 91 dd 01 	lds	r25, 0x01DD
     a1a:	fc 01       	movw	r30, r24
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	8e 0f       	add	r24, r30
     a22:	9f 1f       	adc	r25, r31
     a24:	fc 01       	movw	r30, r24
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ec 0f       	add	r30, r28
     a2c:	fd 1f       	adc	r31, r29
     a2e:	82 81       	ldd	r24, Z+2	; 0x02
     a30:	93 81       	ldd	r25, Z+3	; 0x03
     a32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			delaynms(2000);
     a36:	80 ed       	ldi	r24, 0xD0	; 208
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     a3e:	80 91 d7 01 	lds	r24, 0x01D7
     a42:	88 23       	and	r24, r24
     a44:	09 f4       	brne	.+2      	; 0xa48 <main+0xf0>
     a46:	8f c0       	rjmp	.+286    	; 0xb66 <main+0x20e>
			writeDecInt(ringBuf[ringTop].metal);
     a48:	80 91 dc 01 	lds	r24, 0x01DC
     a4c:	90 91 dd 01 	lds	r25, 0x01DD
     a50:	fc 01       	movw	r30, r24
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	8e 0f       	add	r24, r30
     a58:	9f 1f       	adc	r25, r31
     a5a:	fc 01       	movw	r30, r24
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ec 0f       	add	r30, r28
     a62:	fd 1f       	adc	r31, r29
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			delaynms(2000);
     a6c:	80 ed       	ldi	r24, 0xD0	; 208
     a6e:	97 e0       	ldi	r25, 0x07	; 7
     a70:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     a74:	80 91 d7 01 	lds	r24, 0x01D7
     a78:	88 23       	and	r24, r24
     a7a:	09 f4       	brne	.+2      	; 0xa7e <main+0x126>
     a7c:	74 c0       	rjmp	.+232    	; 0xb66 <main+0x20e>
			writeTotal(totalSorted);
     a7e:	80 91 41 04 	lds	r24, 0x0441
     a82:	90 91 42 04 	lds	r25, 0x0442
     a86:	0e 94 90 07 	call	0xf20	; 0xf20 <writeTotal>
			delaynms(2000);
     a8a:	80 ed       	ldi	r24, 0xD0	; 208
     a8c:	97 e0       	ldi	r25, 0x07	; 7
     a8e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     a92:	80 91 d7 01 	lds	r24, 0x01D7
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <main+0x144>
     a9a:	65 c0       	rjmp	.+202    	; 0xb66 <main+0x20e>
			writeBelt(bufLength);
     a9c:	80 91 3f 04 	lds	r24, 0x043F
     aa0:	90 91 40 04 	lds	r25, 0x0440
     aa4:	0e 94 b4 07 	call	0xf68	; 0xf68 <writeBelt>
			delaynms(2000);
     aa8:	80 ed       	ldi	r24, 0xD0	; 208
     aaa:	97 e0       	ldi	r25, 0x07	; 7
     aac:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     ab0:	80 91 d7 01 	lds	r24, 0x01D7
     ab4:	88 23       	and	r24, r24
     ab6:	09 f4       	brne	.+2      	; 0xaba <main+0x162>
     ab8:	56 c0       	rjmp	.+172    	; 0xb66 <main+0x20e>
			writeDecInt(ringTop);
     aba:	80 91 dc 01 	lds	r24, 0x01DC
     abe:	90 91 dd 01 	lds	r25, 0x01DD
     ac2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			delaynms(2000);
     ac6:	80 ed       	ldi	r24, 0xD0	; 208
     ac8:	97 e0       	ldi	r25, 0x07	; 7
     aca:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     ace:	80 91 d7 01 	lds	r24, 0x01D7
     ad2:	88 23       	and	r24, r24
     ad4:	09 f4       	brne	.+2      	; 0xad8 <main+0x180>
     ad6:	47 c0       	rjmp	.+142    	; 0xb66 <main+0x20e>
			writeDecInt(ringBottom);
     ad8:	80 91 d8 01 	lds	r24, 0x01D8
     adc:	90 91 d9 01 	lds	r25, 0x01D9
     ae0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			delaynms(2000);
     ae4:	80 ed       	ldi	r24, 0xD0	; 208
     ae6:	97 e0       	ldi	r25, 0x07	; 7
     ae8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     aec:	80 91 d7 01 	lds	r24, 0x01D7
     af0:	88 23       	and	r24, r24
     af2:	c9 f1       	breq	.+114    	; 0xb66 <main+0x20e>
			writeWhite(whiteSorted);
     af4:	80 91 3d 04 	lds	r24, 0x043D
     af8:	90 91 3e 04 	lds	r25, 0x043E
     afc:	0e 94 44 08 	call	0x1088	; 0x1088 <writeWhite>
			delaynms(2000);
     b00:	80 ed       	ldi	r24, 0xD0	; 208
     b02:	97 e0       	ldi	r25, 0x07	; 7
     b04:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     b08:	80 91 d7 01 	lds	r24, 0x01D7
     b0c:	88 23       	and	r24, r24
     b0e:	59 f1       	breq	.+86     	; 0xb66 <main+0x20e>
			writeBlack(blackSorted);
     b10:	80 91 3b 04 	lds	r24, 0x043B
     b14:	90 91 3c 04 	lds	r25, 0x043C
     b18:	0e 94 20 08 	call	0x1040	; 0x1040 <writeBlack>
			delaynms(2000);
     b1c:	80 ed       	ldi	r24, 0xD0	; 208
     b1e:	97 e0       	ldi	r25, 0x07	; 7
     b20:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     b24:	80 91 d7 01 	lds	r24, 0x01D7
     b28:	88 23       	and	r24, r24
     b2a:	e9 f0       	breq	.+58     	; 0xb66 <main+0x20e>
			writeSteel(steelSorted);
     b2c:	80 91 36 04 	lds	r24, 0x0436
     b30:	90 91 37 04 	lds	r25, 0x0437
     b34:	0e 94 fc 07 	call	0xff8	; 0xff8 <writeSteel>
			delaynms(2000);
     b38:	80 ed       	ldi	r24, 0xD0	; 208
     b3a:	97 e0       	ldi	r25, 0x07	; 7
     b3c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
			if(inPause == 0) break;
     b40:	80 91 d7 01 	lds	r24, 0x01D7
     b44:	88 23       	and	r24, r24
     b46:	79 f0       	breq	.+30     	; 0xb66 <main+0x20e>
			writeAluminum(aluminumSorted);
     b48:	80 91 38 04 	lds	r24, 0x0438
     b4c:	90 91 39 04 	lds	r25, 0x0439
     b50:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <writeAluminum>
			delaynms(2000);
     b54:	80 ed       	ldi	r24, 0xD0	; 208
     b56:	97 e0       	ldi	r25, 0x07	; 7
     b58:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
		if (shutdown) {
			delaynms(5000);
			shutdownHandler();
		}
		// pause if we need to
		while(inPause == 1) {
     b5c:	80 91 d7 01 	lds	r24, 0x01D7
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <main+0x20e>
     b64:	56 cf       	rjmp	.-340    	; 0xa12 <main+0xba>
			if(inPause == 0) break;
			writeAluminum(aluminumSorted);
			delaynms(2000);
		}
		// check the next item off the conveyer belt, rotate to the correct position
		delaynms(100);
     b66:	84 e6       	ldi	r24, 0x64	; 100
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
		if(bufLength != 0) {
     b6e:	80 91 3f 04 	lds	r24, 0x043F
     b72:	90 91 40 04 	lds	r25, 0x0440
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	09 f4       	brne	.+2      	; 0xb7c <main+0x224>
     b7a:	3c cf       	rjmp	.-392    	; 0x9f4 <main+0x9c>
			switch(ringBuf[ringTop].type) {
     b7c:	80 91 dc 01 	lds	r24, 0x01DC
     b80:	90 91 dd 01 	lds	r25, 0x01DD
     b84:	fc 01       	movw	r30, r24
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	8e 0f       	add	r24, r30
     b8c:	9f 1f       	adc	r25, r31
     b8e:	fc 01       	movw	r30, r24
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	80 81       	ld	r24, Z
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	89 f0       	breq	.+34     	; 0xbc0 <main+0x268>
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	20 f4       	brcc	.+8      	; 0xbaa <main+0x252>
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <main+0x250>
     ba6:	26 cf       	rjmp	.-436    	; 0x9f4 <main+0x9c>
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <main+0x25e>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	71 f0       	breq	.+28     	; 0xbca <main+0x272>
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <main+0x25c>
     bb2:	20 cf       	rjmp	.-448    	; 0x9f4 <main+0x9c>
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <main+0x27c>
				case BLACK:
					stepperMoveTo(BLACK_POSITION);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 87 09 	call	0x130e	; 0x130e <stepperMoveTo>
					break;
     bbe:	1a cf       	rjmp	.-460    	; 0x9f4 <main+0x9c>
				case WHITE:
					stepperMoveTo(WHITE_POSITION);
     bc0:	84 e6       	ldi	r24, 0x64	; 100
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 87 09 	call	0x130e	; 0x130e <stepperMoveTo>
					break;
     bc8:	15 cf       	rjmp	.-470    	; 0x9f4 <main+0x9c>
				case STEEL:
					stepperMoveTo(STEEL_POSITION);
     bca:	86 e9       	ldi	r24, 0x96	; 150
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 87 09 	call	0x130e	; 0x130e <stepperMoveTo>
					break;
     bd2:	10 cf       	rjmp	.-480    	; 0x9f4 <main+0x9c>
				case ALUMINUM:
					stepperMoveTo(ALUMINUM_POSIITION);
     bd4:	82 e3       	ldi	r24, 0x32	; 50
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 87 09 	call	0x130e	; 0x130e <stepperMoveTo>
					break;
     bdc:	0b cf       	rjmp	.-490    	; 0x9f4 <main+0x9c>

00000bde <initMetalQueue>:

/* void initMetalQueue()
   Purpose: initializes the ring buffer
   */
void initMetalQueue() {
	metalTop = 0;
     bde:	10 92 0a 01 	sts	0x010A, r1
     be2:	10 92 09 01 	sts	0x0109, r1
	metalBottom = 0;
     be6:	10 92 0c 01 	sts	0x010C, r1
     bea:	10 92 0b 01 	sts	0x010B, r1
	metalCount = 0;
     bee:	10 92 0e 01 	sts	0x010E, r1
     bf2:	10 92 0d 01 	sts	0x010D, r1
	metalQueue[metalTop] = 0;
     bf6:	10 92 10 01 	sts	0x0110, r1
     bfa:	10 92 0f 01 	sts	0x010F, r1
}
     bfe:	08 95       	ret

00000c00 <getMetalOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getMetalOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (METAL_QUEUE_SIZE - 1)) {
     c00:	86 0f       	add	r24, r22
     c02:	97 1f       	adc	r25, r23
     c04:	84 36       	cpi	r24, 0x64	; 100
     c06:	91 05       	cpc	r25, r1
     c08:	1c f0       	brlt	.+6      	; 0xc10 <getMetalOffset+0x10>
		return ((index + offset) - METAL_QUEUE_SIZE);
     c0a:	84 56       	subi	r24, 0x64	; 100
     c0c:	90 40       	sbci	r25, 0x00	; 0
     c0e:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
     c10:	99 23       	and	r25, r25
     c12:	14 f4       	brge	.+4      	; 0xc18 <getMetalOffset+0x18>
		return ((index + offset) + METAL_QUEUE_SIZE);
     c14:	8c 59       	subi	r24, 0x9C	; 156
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
     c18:	08 95       	ret

00000c1a <popMetal>:
}

/* void popMetal()
   Purpose: pops the top item off the buffer
   */
int popMetal() {
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	// if the buffer is empty, break
	if (metalCount == 0) return -1;
     c22:	c0 91 0d 01 	lds	r28, 0x010D
     c26:	d0 91 0e 01 	lds	r29, 0x010E
     c2a:	20 97       	sbiw	r28, 0x00	; 0
     c2c:	e1 f0       	breq	.+56     	; 0xc66 <popMetal+0x4c>
	int content = metalQueue[metalTop];
     c2e:	80 91 09 01 	lds	r24, 0x0109
     c32:	90 91 0a 01 	lds	r25, 0x010A
     c36:	fc 01       	movw	r30, r24
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e1 5f       	subi	r30, 0xF1	; 241
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	00 81       	ld	r16, Z
     c42:	11 81       	ldd	r17, Z+1	; 0x01
	if (metalCount>1) metalTop = getMetalOffset(metalTop, 1);
     c44:	c2 30       	cpi	r28, 0x02	; 2
     c46:	d1 05       	cpc	r29, r1
     c48:	44 f0       	brlt	.+16     	; 0xc5a <popMetal+0x40>
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	0e 94 00 06 	call	0xc00	; 0xc00 <getMetalOffset>
     c52:	90 93 0a 01 	sts	0x010A, r25
     c56:	80 93 09 01 	sts	0x0109, r24
	metalCount--;
     c5a:	21 97       	sbiw	r28, 0x01	; 1
     c5c:	d0 93 0e 01 	sts	0x010E, r29
     c60:	c0 93 0d 01 	sts	0x010D, r28
	return content;
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <popMetal+0x50>
/* void popMetal()
   Purpose: pops the top item off the buffer
   */
int popMetal() {
	// if the buffer is empty, break
	if (metalCount == 0) return -1;
     c66:	0f ef       	ldi	r16, 0xFF	; 255
     c68:	1f ef       	ldi	r17, 0xFF	; 255
	int content = metalQueue[metalTop];
	if (metalCount>1) metalTop = getMetalOffset(metalTop, 1);
	metalCount--;
	return content;
}
     c6a:	80 2f       	mov	r24, r16
     c6c:	91 2f       	mov	r25, r17
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <newMetal>:
}

/* int newMetal()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newMetal(int content) {
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	8c 01       	movw	r16, r24
	// this next line is for cases when queue is not empty
	if(metalCount > 0) metalBottom = getMetalOffset(metalBottom, 1);
     c82:	c0 91 0d 01 	lds	r28, 0x010D
     c86:	d0 91 0e 01 	lds	r29, 0x010E
     c8a:	1c 16       	cp	r1, r28
     c8c:	1d 06       	cpc	r1, r29
     c8e:	64 f4       	brge	.+24     	; 0xca8 <newMetal+0x30>
     c90:	80 91 0b 01 	lds	r24, 0x010B
     c94:	90 91 0c 01 	lds	r25, 0x010C
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 00 06 	call	0xc00	; 0xc00 <getMetalOffset>
     ca0:	90 93 0c 01 	sts	0x010C, r25
     ca4:	80 93 0b 01 	sts	0x010B, r24
	metalCount++;
     ca8:	21 96       	adiw	r28, 0x01	; 1
     caa:	d0 93 0e 01 	sts	0x010E, r29
     cae:	c0 93 0d 01 	sts	0x010D, r28
	metalQueue[metalBottom] = content;
     cb2:	80 91 0b 01 	lds	r24, 0x010B
     cb6:	90 91 0c 01 	lds	r25, 0x010C
     cba:	fc 01       	movw	r30, r24
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	e1 5f       	subi	r30, 0xF1	; 241
     cc2:	fe 4f       	sbci	r31, 0xFE	; 254
     cc4:	11 83       	std	Z+1, r17	; 0x01
     cc6:	00 83       	st	Z, r16
	return metalBottom;
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	08 95       	ret

00000cd2 <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
     cd2:	10 92 dd 01 	sts	0x01DD, r1
     cd6:	10 92 dc 01 	sts	0x01DC, r1
	ringBottom = 0;
     cda:	10 92 d9 01 	sts	0x01D9, r1
     cde:	10 92 d8 01 	sts	0x01D8, r1
	currentMetal = -1;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	90 93 44 04 	sts	0x0444, r25
     cea:	80 93 43 04 	sts	0x0443, r24
	currentRefl = 0;
     cee:	10 92 db 01 	sts	0x01DB, r1
     cf2:	10 92 da 01 	sts	0x01DA, r1
	bufLength = 0;
     cf6:	10 92 40 04 	sts	0x0440, r1
     cfa:	10 92 3f 04 	sts	0x043F, r1
	inPause = 0;
     cfe:	10 92 d7 01 	sts	0x01D7, r1
	shutdown = 0;
     d02:	10 92 3a 04 	sts	0x043A, r1
	
	totalSorted = 0;
     d06:	10 92 42 04 	sts	0x0442, r1
     d0a:	10 92 41 04 	sts	0x0441, r1
	whiteSorted = 0;
     d0e:	10 92 3e 04 	sts	0x043E, r1
     d12:	10 92 3d 04 	sts	0x043D, r1
	blackSorted = 0;
     d16:	10 92 3c 04 	sts	0x043C, r1
     d1a:	10 92 3b 04 	sts	0x043B, r1
	steelSorted = 0;
     d1e:	10 92 37 04 	sts	0x0437, r1
     d22:	10 92 36 04 	sts	0x0436, r1
	aluminumSorted = 0;
     d26:	10 92 39 04 	sts	0x0439, r1
     d2a:	10 92 38 04 	sts	0x0438, r1
}
     d2e:	08 95       	ret

00000d30 <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
     d30:	86 0f       	add	r24, r22
     d32:	97 1f       	adc	r25, r23
     d34:	84 36       	cpi	r24, 0x64	; 100
     d36:	91 05       	cpc	r25, r1
     d38:	1c f0       	brlt	.+6      	; 0xd40 <getBufOffset+0x10>
		return ((index + offset) - RING_BUF_SIZE);
     d3a:	84 56       	subi	r24, 0x64	; 100
     d3c:	90 40       	sbci	r25, 0x00	; 0
     d3e:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
     d40:	99 23       	and	r25, r25
     d42:	14 f4       	brge	.+4      	; 0xd48 <getBufOffset+0x18>
		return ((index + offset) + RING_BUF_SIZE);
     d44:	8c 59       	subi	r24, 0x9C	; 156
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
     d48:	08 95       	ret

00000d4a <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
     d4e:	c0 91 3f 04 	lds	r28, 0x043F
     d52:	d0 91 40 04 	lds	r29, 0x0440
     d56:	20 97       	sbiw	r28, 0x00	; 0
     d58:	09 f1       	breq	.+66     	; 0xd9c <popBuf+0x52>
	// case for length is 1
	if(bufLength == 1) {
     d5a:	c1 30       	cpi	r28, 0x01	; 1
     d5c:	d1 05       	cpc	r29, r1
     d5e:	29 f4       	brne	.+10     	; 0xd6a <popBuf+0x20>
		bufLength--;
     d60:	10 92 40 04 	sts	0x0440, r1
     d64:	10 92 3f 04 	sts	0x043F, r1
     d68:	13 c0       	rjmp	.+38     	; 0xd90 <popBuf+0x46>
	} else {
		ringTop = getBufOffset(ringTop, 1);
     d6a:	80 91 dc 01 	lds	r24, 0x01DC
     d6e:	90 91 dd 01 	lds	r25, 0x01DD
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	0e 94 98 06 	call	0xd30	; 0xd30 <getBufOffset>
     d7a:	90 93 dd 01 	sts	0x01DD, r25
     d7e:	80 93 dc 01 	sts	0x01DC, r24
		bufLength--;
     d82:	21 97       	sbiw	r28, 0x01	; 1
     d84:	d0 93 40 04 	sts	0x0440, r29
     d88:	c0 93 3f 04 	sts	0x043F, r28
	}	
	if((bufLength == 0) && (shutdown == 1)) {
     d8c:	20 97       	sbiw	r28, 0x00	; 0
     d8e:	31 f4       	brne	.+12     	; 0xd9c <popBuf+0x52>
     d90:	80 91 3a 04 	lds	r24, 0x043A
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	11 f4       	brne	.+4      	; 0xd9c <popBuf+0x52>
		shutdownHandler();
     d98:	0e 94 4d 02 	call	0x49a	; 0x49a <shutdownHandler>
	}
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <newRingBufItem>:
}

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
	// this next line is for cases when queue is not empty
	if(bufLength > 0) {
     da6:	c0 91 3f 04 	lds	r28, 0x043F
     daa:	d0 91 40 04 	lds	r29, 0x0440
     dae:	1c 16       	cp	r1, r28
     db0:	1d 06       	cpc	r1, r29
     db2:	64 f4       	brge	.+24     	; 0xdcc <newRingBufItem+0x2a>
		ringBottom = getBufOffset(ringBottom, 1);
     db4:	80 91 d8 01 	lds	r24, 0x01D8
     db8:	90 91 d9 01 	lds	r25, 0x01D9
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 98 06 	call	0xd30	; 0xd30 <getBufOffset>
     dc4:	90 93 d9 01 	sts	0x01D9, r25
     dc8:	80 93 d8 01 	sts	0x01D8, r24
	}		
	bufLength++;
     dcc:	21 96       	adiw	r28, 0x01	; 1
     dce:	d0 93 40 04 	sts	0x0440, r29
     dd2:	c0 93 3f 04 	sts	0x043F, r28
	ringBuf[ringBottom].minRefl = 1024;
     dd6:	80 91 d8 01 	lds	r24, 0x01D8
     dda:	90 91 d9 01 	lds	r25, 0x01D9
     dde:	fc 01       	movw	r30, r24
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	e8 0f       	add	r30, r24
     de6:	f9 1f       	adc	r31, r25
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e2 52       	subi	r30, 0x22	; 34
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	34 e0       	ldi	r19, 0x04	; 4
     df4:	33 83       	std	Z+3, r19	; 0x03
     df6:	22 83       	std	Z+2, r18	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
     df8:	15 82       	std	Z+5, r1	; 0x05
     dfa:	14 82       	std	Z+4, r1	; 0x04
	ringBuf[ringBottom].metal = 0;
     dfc:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
     dfe:	10 82       	st	Z, r1
	return ringBottom;
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
     e06:	87 30       	cpi	r24, 0x07	; 7
     e08:	71 f1       	breq	.+92     	; 0xe66 <getPatFomHex+0x60>
     e0a:	88 30       	cpi	r24, 0x08	; 8
     e0c:	70 f4       	brcc	.+28     	; 0xe2a <getPatFomHex+0x24>
     e0e:	83 30       	cpi	r24, 0x03	; 3
     e10:	11 f1       	breq	.+68     	; 0xe56 <getPatFomHex+0x50>
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	28 f4       	brcc	.+10     	; 0xe20 <getPatFomHex+0x1a>
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	d1 f1       	breq	.+116    	; 0xe8e <getPatFomHex+0x88>
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	d0 f4       	brcc	.+52     	; 0xe52 <getPatFomHex+0x4c>
     e1e:	17 c0       	rjmp	.+46     	; 0xe4e <getPatFomHex+0x48>
     e20:	85 30       	cpi	r24, 0x05	; 5
     e22:	e9 f0       	breq	.+58     	; 0xe5e <getPatFomHex+0x58>
     e24:	86 30       	cpi	r24, 0x06	; 6
     e26:	e8 f4       	brcc	.+58     	; 0xe62 <getPatFomHex+0x5c>
     e28:	18 c0       	rjmp	.+48     	; 0xe5a <getPatFomHex+0x54>
     e2a:	8b 30       	cpi	r24, 0x0B	; 11
     e2c:	21 f1       	breq	.+72     	; 0xe76 <getPatFomHex+0x70>
     e2e:	8c 30       	cpi	r24, 0x0C	; 12
     e30:	28 f4       	brcc	.+10     	; 0xe3c <getPatFomHex+0x36>
     e32:	89 30       	cpi	r24, 0x09	; 9
     e34:	e1 f0       	breq	.+56     	; 0xe6e <getPatFomHex+0x68>
     e36:	8a 30       	cpi	r24, 0x0A	; 10
     e38:	e0 f4       	brcc	.+56     	; 0xe72 <getPatFomHex+0x6c>
     e3a:	17 c0       	rjmp	.+46     	; 0xe6a <getPatFomHex+0x64>
     e3c:	8d 30       	cpi	r24, 0x0D	; 13
     e3e:	f9 f0       	breq	.+62     	; 0xe7e <getPatFomHex+0x78>
     e40:	8d 30       	cpi	r24, 0x0D	; 13
     e42:	d8 f0       	brcs	.+54     	; 0xe7a <getPatFomHex+0x74>
     e44:	8e 30       	cpi	r24, 0x0E	; 14
     e46:	e9 f0       	breq	.+58     	; 0xe82 <getPatFomHex+0x7c>
     e48:	8f 30       	cpi	r24, 0x0F	; 15
     e4a:	f9 f4       	brne	.+62     	; 0xe8a <getPatFomHex+0x84>
     e4c:	1c c0       	rjmp	.+56     	; 0xe86 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
     e4e:	8c ef       	ldi	r24, 0xFC	; 252
     e50:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
     e52:	8a ed       	ldi	r24, 0xDA	; 218
     e54:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
     e56:	82 ef       	ldi	r24, 0xF2	; 242
     e58:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
     e5a:	86 e6       	ldi	r24, 0x66	; 102
     e5c:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
     e5e:	86 eb       	ldi	r24, 0xB6	; 182
     e60:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
     e62:	8e eb       	ldi	r24, 0xBE	; 190
     e64:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
     e66:	80 ee       	ldi	r24, 0xE0	; 224
     e68:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
     e6a:	8e ef       	ldi	r24, 0xFE	; 254
     e6c:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
     e6e:	86 ee       	ldi	r24, 0xE6	; 230
     e70:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
     e72:	8e ee       	ldi	r24, 0xEE	; 238
     e74:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
     e76:	8e e3       	ldi	r24, 0x3E	; 62
     e78:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
     e7a:	8c e9       	ldi	r24, 0x9C	; 156
     e7c:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
     e7e:	8a e7       	ldi	r24, 0x7A	; 122
     e80:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
     e82:	8e e9       	ldi	r24, 0x9E	; 158
     e84:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
     e86:	8e e8       	ldi	r24, 0x8E	; 142
     e88:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
     e8e:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
     e90:	08 95       	ret

00000e92 <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
     e96:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
     e98:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
     e9a:	ac 01       	movw	r20, r24
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <writePattern+0x12>
     ea0:	55 95       	asr	r21
     ea2:	47 95       	ror	r20
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <writePattern+0xe>
     ea8:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
     eaa:	42 95       	swap	r20
     eac:	44 0f       	add	r20, r20
     eae:	44 0f       	add	r20, r20
     eb0:	40 7c       	andi	r20, 0xC0	; 192
     eb2:	56 2f       	mov	r21, r22
     eb4:	5f 7b       	andi	r21, 0xBF	; 191
     eb6:	45 2b       	or	r20, r21
     eb8:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
     eba:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
     ebc:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	28 30       	cpi	r18, 0x08	; 8
     ec4:	31 05       	cpc	r19, r1
     ec6:	41 f7       	brne	.-48     	; 0xe98 <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
     ec8:	08 95       	ret

00000eca <writeError>:

/* void writeError(int code)
   Purpose: displays "ErrXX" on the 
   display, where XX is the hex representation of the integer
   */
void writeError(int code) {
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ec 01       	movw	r28, r24
	// write the error code
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(code % 16));
     ed0:	60 e1       	ldi	r22, 0x10	; 16
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     ed8:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     edc:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		code = code / 16;
     ee0:	ce 01       	movw	r24, r28
     ee2:	dd 23       	and	r29, r29
     ee4:	0c f4       	brge	.+2      	; 0xee8 <writeError+0x1e>
     ee6:	0f 96       	adiw	r24, 0x0f	; 15
     ee8:	95 95       	asr	r25
     eea:	87 95       	ror	r24
     eec:	95 95       	asr	r25
     eee:	87 95       	ror	r24
     ef0:	95 95       	asr	r25
     ef2:	87 95       	ror	r24
     ef4:	95 95       	asr	r25
     ef6:	87 95       	ror	r24
   display, where XX is the hex representation of the integer
   */
void writeError(int code) {
	// write the error code
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(code % 16));
     ef8:	60 e1       	ldi	r22, 0x10	; 16
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f00:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     f04:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		code = code / 16;
	}
	// write "r"
	writePattern(0b00001010);
     f08:	8a e0       	ldi	r24, 0x0A	; 10
     f0a:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "r"
	writePattern(0b00001010);
     f0e:	8a e0       	ldi	r24, 0x0A	; 10
     f10:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "E"
	writePattern(0b10011110);
     f14:	8e e9       	ldi	r24, 0x9E	; 158
     f16:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <writeTotal>:
/* void writeTotal(int count)
   Purpose: displays "totXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeTotal(int count) {
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
     f28:	ca e0       	ldi	r28, 0x0A	; 10
     f2a:	d0 e0       	ldi	r29, 0x00	; 0
     f2c:	be 01       	movw	r22, r28
     f2e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f32:	8b 01       	movw	r16, r22
     f34:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     f38:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
     f3c:	c8 01       	movw	r24, r16
     f3e:	be 01       	movw	r22, r28
     f40:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f44:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     f48:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "t"
	writePattern(0b00011110);
     f4c:	8e e1       	ldi	r24, 0x1E	; 30
     f4e:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "o"
	writePattern(0b00111010);
     f52:	8a e3       	ldi	r24, 0x3A	; 58
     f54:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "t"
	writePattern(0b00011110);
     f58:	8e e1       	ldi	r24, 0x1E	; 30
     f5a:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <writeBelt>:
/* void writeBelt(int count)
   Purpose: displays "bELXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeBelt(int count) {
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
     f70:	ca e0       	ldi	r28, 0x0A	; 10
     f72:	d0 e0       	ldi	r29, 0x00	; 0
     f74:	be 01       	movw	r22, r28
     f76:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f7a:	8b 01       	movw	r16, r22
     f7c:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     f80:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
     f84:	c8 01       	movw	r24, r16
     f86:	be 01       	movw	r22, r28
     f88:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     f8c:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     f90:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "L"
	writePattern(0b00011100);
     f94:	8c e1       	ldi	r24, 0x1C	; 28
     f96:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "E"
	writePattern(0b10011110);
     f9a:	8e e9       	ldi	r24, 0x9E	; 158
     f9c:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "b"
	writePattern(0b00111110);
     fa0:	8e e3       	ldi	r24, 0x3E	; 62
     fa2:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <writeAluminum>:
/* void writeAluminum(int count)
   Purpose: displays "ALUXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeAluminum(int count) {
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
     fb8:	ca e0       	ldi	r28, 0x0A	; 10
     fba:	d0 e0       	ldi	r29, 0x00	; 0
     fbc:	be 01       	movw	r22, r28
     fbe:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     fc2:	8b 01       	movw	r16, r22
     fc4:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     fc8:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
     fcc:	c8 01       	movw	r24, r16
     fce:	be 01       	movw	r22, r28
     fd0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
     fd4:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
     fd8:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "U"
	writePattern(0b01111100);
     fdc:	8c e7       	ldi	r24, 0x7C	; 124
     fde:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "L"
	writePattern(0b00011100);
     fe2:	8c e1       	ldi	r24, 0x1C	; 28
     fe4:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "A"
	writePattern(0b11101110);
     fe8:	8e ee       	ldi	r24, 0xEE	; 238
     fea:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <writeSteel>:
/* void writeSteel(int count)
   Purpose: displays "StLXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeSteel(int count) {
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
    1000:	ca e0       	ldi	r28, 0x0A	; 10
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	be 01       	movw	r22, r28
    1006:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    100a:	8b 01       	movw	r16, r22
    100c:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    1010:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
    1014:	c8 01       	movw	r24, r16
    1016:	be 01       	movw	r22, r28
    1018:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    101c:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    1020:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "L"
	writePattern(0b00011100);
    1024:	8c e1       	ldi	r24, 0x1C	; 28
    1026:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "t"
	writePattern(0b00011110);
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "S"
	writePattern(0b10110110);
    1030:	86 eb       	ldi	r24, 0xB6	; 182
    1032:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <writeBlack>:
/* void writeBlack(int count)
   Purpose: displays "bLAXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeBlack(int count) {
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
    1048:	ca e0       	ldi	r28, 0x0A	; 10
    104a:	d0 e0       	ldi	r29, 0x00	; 0
    104c:	be 01       	movw	r22, r28
    104e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    1052:	8b 01       	movw	r16, r22
    1054:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    1058:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
    105c:	c8 01       	movw	r24, r16
    105e:	be 01       	movw	r22, r28
    1060:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    1064:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    1068:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "A"
	writePattern(0b11101110);
    106c:	8e ee       	ldi	r24, 0xEE	; 238
    106e:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "L"
	writePattern(0b00011100);
    1072:	8c e1       	ldi	r24, 0x1C	; 28
    1074:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "b"
	writePattern(0b00111110);
    1078:	8e e3       	ldi	r24, 0x3E	; 62
    107a:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <writeWhite>:
/* void writeWhite(int count)
   Purpose: displays "LtEXX" on the 
   display, where XX is the decimal
   representation of the integer
   */
void writeWhite(int count) {
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
	// write the count
	for (int i=0; i < 2; i++) {
		writePattern(getPatFomHex(count % 10));
    1090:	ca e0       	ldi	r28, 0x0A	; 10
    1092:	d0 e0       	ldi	r29, 0x00	; 0
    1094:	be 01       	movw	r22, r28
    1096:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    109a:	8b 01       	movw	r16, r22
    109c:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    10a0:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
    10a4:	c8 01       	movw	r24, r16
    10a6:	be 01       	movw	r22, r28
    10a8:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    10ac:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    10b0:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		count = count / 10;
	}
	// write "E"
	writePattern(0b10011110);
    10b4:	8e e9       	ldi	r24, 0x9E	; 158
    10b6:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "t"
	writePattern(0b00011110);
    10ba:	8e e1       	ldi	r24, 0x1E	; 30
    10bc:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
	// write "L"
	writePattern(0b00011100);
    10c0:	8c e1       	ldi	r24, 0x1C	; 28
    10c2:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	c5 e0       	ldi	r28, 0x05	; 5
    10de:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
    10e0:	0f 2e       	mov	r0, r31
    10e2:	fa e0       	ldi	r31, 0x0A	; 10
    10e4:	ef 2e       	mov	r14, r31
    10e6:	ff 24       	eor	r15, r15
    10e8:	f0 2d       	mov	r31, r0
    10ea:	b7 01       	movw	r22, r14
    10ec:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    10f0:	16 2f       	mov	r17, r22
    10f2:	07 2f       	mov	r16, r23
    10f4:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    10f8:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		number = number / 10;
    10fc:	81 2f       	mov	r24, r17
    10fe:	90 2f       	mov	r25, r16
    1100:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
    1102:	99 f7       	brne	.-26     	; 0x10ea <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	08 95       	ret

00001112 <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	ec 01       	movw	r28, r24
    1120:	05 e0       	ldi	r16, 0x05	; 5
    1122:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
    1124:	ee 24       	eor	r14, r14
    1126:	ff 24       	eor	r15, r15
    1128:	68 94       	set
    112a:	e4 f8       	bld	r14, 4
    112c:	ce 01       	movw	r24, r28
    112e:	b7 01       	movw	r22, r14
    1130:	0e 94 bd 0a 	call	0x157a	; 0x157a <__divmodhi4>
    1134:	0e 94 03 07 	call	0xe06	; 0xe06 <getPatFomHex>
    1138:	0e 94 49 07 	call	0xe92	; 0xe92 <writePattern>
		number = number / 16;
    113c:	ce 01       	movw	r24, r28
    113e:	dd 23       	and	r29, r29
    1140:	0c f4       	brge	.+2      	; 0x1144 <writeHexInt+0x32>
    1142:	0f 96       	adiw	r24, 0x0f	; 15
    1144:	ec 01       	movw	r28, r24
    1146:	d5 95       	asr	r29
    1148:	c7 95       	ror	r28
    114a:	d5 95       	asr	r29
    114c:	c7 95       	ror	r28
    114e:	d5 95       	asr	r29
    1150:	c7 95       	ror	r28
    1152:	d5 95       	asr	r29
    1154:	c7 95       	ror	r28
    1156:	01 50       	subi	r16, 0x01	; 1
    1158:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
    115a:	41 f7       	brne	.-48     	; 0x112c <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	08 95       	ret

0000116a <initalizeStepper>:
int accelLimit;

// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
    116a:	81 b1       	in	r24, 0x01	; 1
    116c:	8f 63       	ori	r24, 0x3F	; 63
    116e:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
    1170:	10 92 4a 04 	sts	0x044A, r1
    1174:	10 92 49 04 	sts	0x0449, r1
	PORTA = (PORTA & 0b11000000) | states[currentState];
    1178:	82 b1       	in	r24, 0x02	; 2
    117a:	80 7c       	andi	r24, 0xC0	; 192
    117c:	80 63       	ori	r24, 0x30	; 48
    117e:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
    1180:	10 92 4f 04 	sts	0x044F, r1
	steps = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	90 93 4c 04 	sts	0x044C, r25
    118c:	80 93 4b 04 	sts	0x044B, r24
}
    1190:	08 95       	ret

00001192 <stepTime>:


void stepTime(int stepTime, char direction) {
    1192:	cf 93       	push	r28
    1194:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
    1196:	0e 94 9c 0a 	call	0x1538	; 0x1538 <delaynms>
	if(direction == 0) { //forward direction
    119a:	cc 23       	and	r28, r28
    119c:	c9 f5       	brne	.+114    	; 0x1210 <stepTime+0x7e>
		currentState++;
    119e:	80 91 49 04 	lds	r24, 0x0449
    11a2:	90 91 4a 04 	lds	r25, 0x044A
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	90 93 4a 04 	sts	0x044A, r25
    11ac:	80 93 49 04 	sts	0x0449, r24
		if (currentState==4) currentState = 0;
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	91 05       	cpc	r25, r1
    11b4:	21 f4       	brne	.+8      	; 0x11be <stepTime+0x2c>
    11b6:	10 92 4a 04 	sts	0x044A, r1
    11ba:	10 92 49 04 	sts	0x0449, r1
		PORTA = (PORTA & 0b11000000) | states[currentState];
    11be:	82 b1       	in	r24, 0x02	; 2
    11c0:	e0 91 49 04 	lds	r30, 0x0449
    11c4:	f0 91 4a 04 	lds	r31, 0x044A
    11c8:	e0 50       	subi	r30, 0x00	; 0
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 7c       	andi	r24, 0xC0	; 192
    11ce:	90 81       	ld	r25, Z
    11d0:	89 2b       	or	r24, r25
    11d2:	82 b9       	out	0x02, r24	; 2
		steps++;
    11d4:	80 91 4b 04 	lds	r24, 0x044B
    11d8:	90 91 4c 04 	lds	r25, 0x044C
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	90 93 4c 04 	sts	0x044C, r25
    11e2:	80 93 4b 04 	sts	0x044B, r24
		currentSteps++;
    11e6:	80 91 47 04 	lds	r24, 0x0447
    11ea:	90 91 48 04 	lds	r25, 0x0448
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	90 93 48 04 	sts	0x0448, r25
    11f4:	80 93 47 04 	sts	0x0447, r24
		if(hallLow == 1) {
    11f8:	80 91 4f 04 	lds	r24, 0x044F
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	09 f0       	breq	.+2      	; 0x1202 <stepTime+0x70>
    1200:	4a c0       	rjmp	.+148    	; 0x1296 <stepTime+0x104>
			steps = 0;
    1202:	10 92 4c 04 	sts	0x044C, r1
    1206:	10 92 4b 04 	sts	0x044B, r1
			hallLow = 0;
    120a:	10 92 4f 04 	sts	0x044F, r1
    120e:	43 c0       	rjmp	.+134    	; 0x1296 <stepTime+0x104>
		}
	}
	else { //reverse direction
		currentState--;
    1210:	80 91 49 04 	lds	r24, 0x0449
    1214:	90 91 4a 04 	lds	r25, 0x044A
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	90 93 4a 04 	sts	0x044A, r25
    121e:	80 93 49 04 	sts	0x0449, r24
		if (currentState==-1) currentState = 3;
    1222:	2f ef       	ldi	r18, 0xFF	; 255
    1224:	8f 3f       	cpi	r24, 0xFF	; 255
    1226:	92 07       	cpc	r25, r18
    1228:	31 f4       	brne	.+12     	; 0x1236 <stepTime+0xa4>
    122a:	83 e0       	ldi	r24, 0x03	; 3
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	90 93 4a 04 	sts	0x044A, r25
    1232:	80 93 49 04 	sts	0x0449, r24
		PORTA = (PORTA & 0b11000000) | states[currentState];
    1236:	82 b1       	in	r24, 0x02	; 2
    1238:	e0 91 49 04 	lds	r30, 0x0449
    123c:	f0 91 4a 04 	lds	r31, 0x044A
    1240:	e0 50       	subi	r30, 0x00	; 0
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 7c       	andi	r24, 0xC0	; 192
    1246:	90 81       	ld	r25, Z
    1248:	89 2b       	or	r24, r25
    124a:	82 b9       	out	0x02, r24	; 2
		steps--;
    124c:	80 91 4b 04 	lds	r24, 0x044B
    1250:	90 91 4c 04 	lds	r25, 0x044C
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	90 93 4c 04 	sts	0x044C, r25
    125a:	80 93 4b 04 	sts	0x044B, r24
		currentSteps++;
    125e:	20 91 47 04 	lds	r18, 0x0447
    1262:	30 91 48 04 	lds	r19, 0x0448
    1266:	2f 5f       	subi	r18, 0xFF	; 255
    1268:	3f 4f       	sbci	r19, 0xFF	; 255
    126a:	30 93 48 04 	sts	0x0448, r19
    126e:	20 93 47 04 	sts	0x0447, r18
		if(steps < 0) steps = 199;
    1272:	99 23       	and	r25, r25
    1274:	34 f4       	brge	.+12     	; 0x1282 <stepTime+0xf0>
    1276:	87 ec       	ldi	r24, 0xC7	; 199
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 4c 04 	sts	0x044C, r25
    127e:	80 93 4b 04 	sts	0x044B, r24
		if(hallLow == 1) {
    1282:	80 91 4f 04 	lds	r24, 0x044F
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	31 f4       	brne	.+12     	; 0x1296 <stepTime+0x104>
			steps = 0;
    128a:	10 92 4c 04 	sts	0x044C, r1
    128e:	10 92 4b 04 	sts	0x044B, r1
			hallLow = 0;
    1292:	10 92 4f 04 	sts	0x044F, r1
		}				
	}
}
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
    129a:	86 17       	cp	r24, r22
    129c:	97 07       	cpc	r25, r23
    129e:	4c f4       	brge	.+18     	; 0x12b2 <forwardSteps+0x18>
    12a0:	68 1b       	sub	r22, r24
    12a2:	79 0b       	sbc	r23, r25
    12a4:	1a f4       	brpl	.+6      	; 0x12ac <forwardSteps+0x12>
    12a6:	70 95       	com	r23
    12a8:	61 95       	neg	r22
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	86 2f       	mov	r24, r22
    12ae:	97 2f       	mov	r25, r23
    12b0:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - abs(target - current));
    12b2:	68 1b       	sub	r22, r24
    12b4:	79 0b       	sbc	r23, r25
    12b6:	1a f4       	brpl	.+6      	; 0x12be <forwardSteps+0x24>
    12b8:	70 95       	com	r23
    12ba:	61 95       	neg	r22
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	28 ec       	ldi	r18, 0xC8	; 200
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	26 1b       	sub	r18, r22
    12c4:	37 0b       	sbc	r19, r23
    12c6:	1a f4       	brpl	.+6      	; 0x12ce <forwardSteps+0x34>
    12c8:	30 95       	com	r19
    12ca:	21 95       	neg	r18
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	82 2f       	mov	r24, r18
    12d0:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
    12d2:	08 95       	ret

000012d4 <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
    12d4:	68 17       	cp	r22, r24
    12d6:	79 07       	cpc	r23, r25
    12d8:	4c f4       	brge	.+18     	; 0x12ec <reverseSteps+0x18>
    12da:	68 1b       	sub	r22, r24
    12dc:	79 0b       	sbc	r23, r25
    12de:	1a f4       	brpl	.+6      	; 0x12e6 <reverseSteps+0x12>
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	86 2f       	mov	r24, r22
    12e8:	97 2f       	mov	r25, r23
    12ea:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - abs(target - current));
    12ec:	68 1b       	sub	r22, r24
    12ee:	79 0b       	sbc	r23, r25
    12f0:	1a f4       	brpl	.+6      	; 0x12f8 <reverseSteps+0x24>
    12f2:	70 95       	com	r23
    12f4:	61 95       	neg	r22
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	28 ec       	ldi	r18, 0xC8	; 200
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	26 1b       	sub	r18, r22
    12fe:	37 0b       	sbc	r19, r23
    1300:	1a f4       	brpl	.+6      	; 0x1308 <reverseSteps+0x34>
    1302:	30 95       	com	r19
    1304:	21 95       	neg	r18
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	82 2f       	mov	r24, r18
    130a:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
    130c:	08 95       	ret

0000130e <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	8c 01       	movw	r16, r24
	currentSteps = 0;
    131c:	10 92 48 04 	sts	0x0448, r1
    1320:	10 92 47 04 	sts	0x0447, r1
	modifier = 0;
    1324:	10 92 4e 04 	sts	0x044E, r1
    1328:	10 92 4d 04 	sts	0x044D, r1
	if (steps == nextPosition) return;
    132c:	c0 91 4b 04 	lds	r28, 0x044B
    1330:	d0 91 4c 04 	lds	r29, 0x044C
    1334:	c8 17       	cp	r28, r24
    1336:	d9 07       	cpc	r29, r25
    1338:	09 f4       	brne	.+2      	; 0x133c <stepperMoveTo+0x2e>
    133a:	db c0       	rjmp	.+438    	; 0x14f2 <stepperMoveTo+0x1e4>
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
    133c:	ce 01       	movw	r24, r28
    133e:	b8 01       	movw	r22, r16
    1340:	0e 94 4d 09 	call	0x129a	; 0x129a <forwardSteps>
    1344:	7c 01       	movw	r14, r24
    1346:	ce 01       	movw	r24, r28
    1348:	b8 01       	movw	r22, r16
    134a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <reverseSteps>
    134e:	e8 16       	cp	r14, r24
    1350:	f9 06       	cpc	r15, r25
    1352:	0c f0       	brlt	.+2      	; 0x1356 <stepperMoveTo+0x48>
    1354:	61 c0       	rjmp	.+194    	; 0x1418 <stepperMoveTo+0x10a>
		accelLimit = KNEE_NUMERATOR * forwardSteps(steps,nextPosition) / KNEE_DENOMINATOR;
    1356:	c7 01       	movw	r24, r14
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	8e 19       	sub	r24, r14
    1366:	9f 09       	sbc	r25, r15
    1368:	0a f4       	brpl	.+2      	; 0x136c <stepperMoveTo+0x5e>
    136a:	07 96       	adiw	r24, 0x07	; 7
    136c:	95 95       	asr	r25
    136e:	87 95       	ror	r24
    1370:	95 95       	asr	r25
    1372:	87 95       	ror	r24
    1374:	95 95       	asr	r25
    1376:	87 95       	ror	r24
    1378:	90 93 46 04 	sts	0x0446, r25
    137c:	80 93 45 04 	sts	0x0445, r24
		while(steps != nextPosition) {
    1380:	42 c0       	rjmp	.+132    	; 0x1406 <stepperMoveTo+0xf8>
			stepTime((STEP_BASE_SPEED + modifier),0);
    1382:	80 91 4d 04 	lds	r24, 0x044D
    1386:	90 91 4e 04 	lds	r25, 0x044E
    138a:	0f 96       	adiw	r24, 0x0f	; 15
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	0e 94 c9 08 	call	0x1192	; 0x1192 <stepTime>
			writeDecInt(abs(modifier));
    1392:	80 91 4d 04 	lds	r24, 0x044D
    1396:	90 91 4e 04 	lds	r25, 0x044E
    139a:	99 23       	and	r25, r25
    139c:	1c f4       	brge	.+6      	; 0x13a4 <stepperMoveTo+0x96>
    139e:	90 95       	com	r25
    13a0:	81 95       	neg	r24
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			// decrease delay to accelerate stepper
			if( ((currentSteps % ACCEL_INTERVAL) == 0) && (currentSteps < accelLimit) && (modifier > MODIFIER_LOWER_LIMIT)) {
    13a8:	80 91 47 04 	lds	r24, 0x0447
    13ac:	90 91 48 04 	lds	r25, 0x0448
    13b0:	80 fd       	sbrc	r24, 0
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <stepperMoveTo+0xcc>
    13b4:	20 91 45 04 	lds	r18, 0x0445
    13b8:	30 91 46 04 	lds	r19, 0x0446
    13bc:	82 17       	cp	r24, r18
    13be:	93 07       	cpc	r25, r19
    13c0:	bc f4       	brge	.+46     	; 0x13f0 <stepperMoveTo+0xe2>
    13c2:	80 91 4d 04 	lds	r24, 0x044D
    13c6:	90 91 4e 04 	lds	r25, 0x044E
    13ca:	18 16       	cp	r1, r24
    13cc:	19 06       	cpc	r1, r25
    13ce:	dc f4       	brge	.+54     	; 0x1406 <stepperMoveTo+0xf8>
				modifier--;
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	90 93 4e 04 	sts	0x044E, r25
    13d6:	80 93 4d 04 	sts	0x044D, r24
			}
			// increase delay to decelerate stepper, keep total delay less than 16 ms
			if( (currentSteps >= accelLimit) && (modifier < MODIFIER_UPPER_LIMIT))	modifier++;
    13da:	20 91 47 04 	lds	r18, 0x0447
    13de:	30 91 48 04 	lds	r19, 0x0448
    13e2:	80 91 45 04 	lds	r24, 0x0445
    13e6:	90 91 46 04 	lds	r25, 0x0446
    13ea:	28 17       	cp	r18, r24
    13ec:	39 07       	cpc	r19, r25
    13ee:	5c f0       	brlt	.+22     	; 0x1406 <stepperMoveTo+0xf8>
    13f0:	80 91 4d 04 	lds	r24, 0x044D
    13f4:	90 91 4e 04 	lds	r25, 0x044E
    13f8:	99 23       	and	r25, r25
    13fa:	2c f4       	brge	.+10     	; 0x1406 <stepperMoveTo+0xf8>
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	90 93 4e 04 	sts	0x044E, r25
    1402:	80 93 4d 04 	sts	0x044D, r24
	currentSteps = 0;
	modifier = 0;
	if (steps == nextPosition) return;
	if(forwardSteps(steps, nextPosition) < reverseSteps(steps, nextPosition)) {
		accelLimit = KNEE_NUMERATOR * forwardSteps(steps,nextPosition) / KNEE_DENOMINATOR;
		while(steps != nextPosition) {
    1406:	80 91 4b 04 	lds	r24, 0x044B
    140a:	90 91 4c 04 	lds	r25, 0x044C
    140e:	80 17       	cp	r24, r16
    1410:	91 07       	cpc	r25, r17
    1412:	09 f0       	breq	.+2      	; 0x1416 <stepperMoveTo+0x108>
    1414:	b6 cf       	rjmp	.-148    	; 0x1382 <stepperMoveTo+0x74>
    1416:	63 c0       	rjmp	.+198    	; 0x14de <stepperMoveTo+0x1d0>
			if( (currentSteps >= accelLimit) && (modifier < MODIFIER_UPPER_LIMIT))	modifier++;
		}
	}
	
	else {
		accelLimit = KNEE_NUMERATOR * reverseSteps(steps,nextPosition) / KNEE_DENOMINATOR;
    1418:	9c 01       	movw	r18, r24
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	a9 01       	movw	r20, r18
    1428:	48 1b       	sub	r20, r24
    142a:	59 0b       	sbc	r21, r25
    142c:	ca 01       	movw	r24, r20
    142e:	99 23       	and	r25, r25
    1430:	0c f4       	brge	.+2      	; 0x1434 <stepperMoveTo+0x126>
    1432:	07 96       	adiw	r24, 0x07	; 7
    1434:	95 95       	asr	r25
    1436:	87 95       	ror	r24
    1438:	95 95       	asr	r25
    143a:	87 95       	ror	r24
    143c:	95 95       	asr	r25
    143e:	87 95       	ror	r24
    1440:	90 93 46 04 	sts	0x0446, r25
    1444:	80 93 45 04 	sts	0x0445, r24
		while(steps != nextPosition) {
    1448:	42 c0       	rjmp	.+132    	; 0x14ce <stepperMoveTo+0x1c0>
			stepTime((STEP_BASE_SPEED + modifier),1);
    144a:	80 91 4d 04 	lds	r24, 0x044D
    144e:	90 91 4e 04 	lds	r25, 0x044E
    1452:	0f 96       	adiw	r24, 0x0f	; 15
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	0e 94 c9 08 	call	0x1192	; 0x1192 <stepTime>
			writeDecInt(abs(modifier));
    145a:	80 91 4d 04 	lds	r24, 0x044D
    145e:	90 91 4e 04 	lds	r25, 0x044E
    1462:	99 23       	and	r25, r25
    1464:	1c f4       	brge	.+6      	; 0x146c <stepperMoveTo+0x15e>
    1466:	90 95       	com	r25
    1468:	81 95       	neg	r24
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <writeDecInt>
			// decrease delay to accelerate stepper
			if( ((currentSteps % ACCEL_INTERVAL) == 0) && (currentSteps < accelLimit) && (modifier > MODIFIER_LOWER_LIMIT)) {
    1470:	80 91 47 04 	lds	r24, 0x0447
    1474:	90 91 48 04 	lds	r25, 0x0448
    1478:	80 fd       	sbrc	r24, 0
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <stepperMoveTo+0x194>
    147c:	20 91 45 04 	lds	r18, 0x0445
    1480:	30 91 46 04 	lds	r19, 0x0446
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	bc f4       	brge	.+46     	; 0x14b8 <stepperMoveTo+0x1aa>
    148a:	80 91 4d 04 	lds	r24, 0x044D
    148e:	90 91 4e 04 	lds	r25, 0x044E
    1492:	18 16       	cp	r1, r24
    1494:	19 06       	cpc	r1, r25
    1496:	dc f4       	brge	.+54     	; 0x14ce <stepperMoveTo+0x1c0>
				modifier--;
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	90 93 4e 04 	sts	0x044E, r25
    149e:	80 93 4d 04 	sts	0x044D, r24
			}
			// increase delay to decelerate stepper, keep total delay less than 16 ms
			if( (currentSteps >= accelLimit) && (modifier < MODIFIER_UPPER_LIMIT))	modifier++;
    14a2:	20 91 47 04 	lds	r18, 0x0447
    14a6:	30 91 48 04 	lds	r19, 0x0448
    14aa:	80 91 45 04 	lds	r24, 0x0445
    14ae:	90 91 46 04 	lds	r25, 0x0446
    14b2:	28 17       	cp	r18, r24
    14b4:	39 07       	cpc	r19, r25
    14b6:	5c f0       	brlt	.+22     	; 0x14ce <stepperMoveTo+0x1c0>
    14b8:	80 91 4d 04 	lds	r24, 0x044D
    14bc:	90 91 4e 04 	lds	r25, 0x044E
    14c0:	99 23       	and	r25, r25
    14c2:	2c f4       	brge	.+10     	; 0x14ce <stepperMoveTo+0x1c0>
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	90 93 4e 04 	sts	0x044E, r25
    14ca:	80 93 4d 04 	sts	0x044D, r24
		}
	}
	
	else {
		accelLimit = KNEE_NUMERATOR * reverseSteps(steps,nextPosition) / KNEE_DENOMINATOR;
		while(steps != nextPosition) {
    14ce:	80 91 4b 04 	lds	r24, 0x044B
    14d2:	90 91 4c 04 	lds	r25, 0x044C
    14d6:	80 17       	cp	r24, r16
    14d8:	91 07       	cpc	r25, r17
    14da:	09 f0       	breq	.+2      	; 0x14de <stepperMoveTo+0x1d0>
    14dc:	b6 cf       	rjmp	.-148    	; 0x144a <stepperMoveTo+0x13c>
			// increase delay to decelerate stepper, keep total delay less than 16 ms
			if( (currentSteps >= accelLimit) && (modifier < MODIFIER_UPPER_LIMIT))	modifier++;
		}
	}
	
	if(motorWaitForStepper == 1) {
    14de:	80 91 06 01 	lds	r24, 0x0106
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <stepperMoveTo+0x1e4>
		// start the motor back up
		setMotorFwd();
    14e6:	0e 94 23 01 	call	0x246	; 0x246 <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
    14ea:	10 92 06 01 	sts	0x0106, r1
		// fire the exit logic again
		exitHandler();
    14ee:	0e 94 8c 02 	call	0x518	; 0x518 <exitHandler>
	}
		
}	
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	08 95       	ret

00001500 <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
    1500:	e1 e8       	ldi	r30, 0x81	; 129
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	80 83       	st	Z, r24
} 
    150a:	08 95       	ret

0000150c <delaynus>:

void delaynus(int n)   // delay microseconds
{
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
    150c:	e1 e8       	ldi	r30, 0x81	; 129
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	20 81       	ld	r18, Z
    1512:	28 60       	ori	r18, 0x08	; 8
    1514:	20 83       	st	Z, r18
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
    1516:	20 81       	ld	r18, Z
    1518:	23 60       	ori	r18, 0x03	; 3
    151a:	20 83       	st	Z, r18

	// set the output compare register
	// to 1 ms
	OCR1A = n;
    151c:	28 2f       	mov	r18, r24
    151e:	39 2f       	mov	r19, r25
    1520:	30 93 89 00 	sts	0x0089, r19
    1524:	20 93 88 00 	sts	0x0088, r18

	// set initial value to zero
	TCNT1 = 0;
    1528:	10 92 85 00 	sts	0x0085, r1
    152c:	10 92 84 00 	sts	0x0084, r1

	// enable output compare interrupt enable
	//TIMSK1|=0b00000010;

	// begin timer
	TIFR1|=_BV(OCF1A);
    1530:	b1 9a       	sbi	0x16, 1	; 22

	// poll until we reach our number of milliseconds
	while(1) {
		if((TIFR1 & 0x02) == 0x02) break;
    1532:	b1 9b       	sbis	0x16, 1	; 22
    1534:	fe cf       	rjmp	.-4      	; 0x1532 <delaynus+0x26>
	}
}
    1536:	08 95       	ret

00001538 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
    1538:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
    153a:	e1 e8       	ldi	r30, 0x81	; 129
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
    1544:	80 81       	ld	r24, Z
    1546:	83 60       	ori	r24, 0x03	; 3
    1548:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
    154a:	12 16       	cp	r1, r18
    154c:	13 06       	cpc	r1, r19
    154e:	a4 f4       	brge	.+40     	; 0x1578 <delaynms+0x40>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
    1554:	e8 e8       	ldi	r30, 0x88	; 136
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	4d e7       	ldi	r20, 0x7D	; 125
    155a:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
    155c:	a4 e8       	ldi	r26, 0x84	; 132
    155e:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
    1560:	51 83       	std	Z+1, r21	; 0x01
    1562:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	1c 92       	st	X, r1
    1568:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
    156a:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
    156c:	b1 9b       	sbis	0x16, 1	; 22
    156e:	fe cf       	rjmp	.-4      	; 0x156c <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	82 17       	cp	r24, r18
    1574:	93 07       	cpc	r25, r19
    1576:	a1 f7       	brne	.-24     	; 0x1560 <delaynms+0x28>
    1578:	08 95       	ret

0000157a <__divmodhi4>:
    157a:	97 fb       	bst	r25, 7
    157c:	09 2e       	mov	r0, r25
    157e:	07 26       	eor	r0, r23
    1580:	0a d0       	rcall	.+20     	; 0x1596 <__divmodhi4_neg1>
    1582:	77 fd       	sbrc	r23, 7
    1584:	04 d0       	rcall	.+8      	; 0x158e <__divmodhi4_neg2>
    1586:	0c d0       	rcall	.+24     	; 0x15a0 <__udivmodhi4>
    1588:	06 d0       	rcall	.+12     	; 0x1596 <__divmodhi4_neg1>
    158a:	00 20       	and	r0, r0
    158c:	1a f4       	brpl	.+6      	; 0x1594 <__divmodhi4_exit>

0000158e <__divmodhi4_neg2>:
    158e:	70 95       	com	r23
    1590:	61 95       	neg	r22
    1592:	7f 4f       	sbci	r23, 0xFF	; 255

00001594 <__divmodhi4_exit>:
    1594:	08 95       	ret

00001596 <__divmodhi4_neg1>:
    1596:	f6 f7       	brtc	.-4      	; 0x1594 <__divmodhi4_exit>
    1598:	90 95       	com	r25
    159a:	81 95       	neg	r24
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <__udivmodhi4>:
    15a0:	aa 1b       	sub	r26, r26
    15a2:	bb 1b       	sub	r27, r27
    15a4:	51 e1       	ldi	r21, 0x11	; 17
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <__udivmodhi4_ep>

000015a8 <__udivmodhi4_loop>:
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	a6 17       	cp	r26, r22
    15ae:	b7 07       	cpc	r27, r23
    15b0:	10 f0       	brcs	.+4      	; 0x15b6 <__udivmodhi4_ep>
    15b2:	a6 1b       	sub	r26, r22
    15b4:	b7 0b       	sbc	r27, r23

000015b6 <__udivmodhi4_ep>:
    15b6:	88 1f       	adc	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	5a 95       	dec	r21
    15bc:	a9 f7       	brne	.-22     	; 0x15a8 <__udivmodhi4_loop>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	08 95       	ret

000015c8 <_exit>:
    15c8:	f8 94       	cli

000015ca <__stop_program>:
    15ca:	ff cf       	rjmp	.-2      	; 0x15ca <__stop_program>
