
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000cb6  00000d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000192  00800104  00800104  00000d4e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001534  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ca4  00000000  00000000  0000333a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00003fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbb  00000000  00000000  00004a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00005700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_1>
   8:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_2>
   c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_3>
  10:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_4>
  14:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_5>
  18:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_6>
  1c:	0c 94 47 03 	jmp	0x68e	; 0x68e <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 eb       	ldi	r30, 0xB6	; 182
  ac:	fc e0       	ldi	r31, 0x0C	; 12
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 39       	cpi	r26, 0x96	; 150
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <main>
  d4:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:
#include <avr/interrupt.h>

char ADC_is_running;

void setupADC() {
	DDRF = 0x00;
  dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADMUX |= _BV(REFS0) | 0b01;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 64       	ori	r24, 0x41	; 65
  fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
  fe:	10 92 04 01 	sts	0x0104, r1
	sei();
 102:	78 94       	sei
}
 104:	08 95       	ret

00000106 <startADC>:

void startADC() {
	ADC_is_running = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 04 01 	sts	0x0104, r24
	ADCSRA |= _BV(ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	sei();
 116:	78 94       	sei
}
 118:	08 95       	ret

0000011a <stopADC>:

void stopADC() {
	ADC_is_running = 0;
 11a:	10 92 04 01 	sts	0x0104, r1
	ADCSRA &= ~_BV(ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <updateAverage>:

void updateAverage(int refl) {
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	fc 01       	movw	r30, r24
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
 138:	80 91 09 01 	lds	r24, 0x0109
 13c:	90 91 0a 01 	lds	r25, 0x010A
 140:	dc 01       	movw	r26, r24
 142:	aa 0f       	add	r26, r26
 144:	bb 1f       	adc	r27, r27
 146:	a8 0f       	add	r26, r24
 148:	b9 1f       	adc	r27, r25
 14a:	aa 0f       	add	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	a3 5f       	subi	r26, 0xF3	; 243
 150:	be 4f       	sbci	r27, 0xFE	; 254
 152:	14 96       	adiw	r26, 0x04	; 4
 154:	4d 91       	ld	r20, X+
 156:	5c 91       	ld	r21, X
 158:	15 97       	sbiw	r26, 0x05	; 5
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	4d 32       	cpi	r20, 0x2D	; 45
 15e:	50 07       	cpc	r21, r16
 160:	7c f5       	brge	.+94     	; 0x1c0 <updateAverage+0x96>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
 162:	9f 01       	movw	r18, r30
 164:	28 5c       	subi	r18, 0xC8	; 200
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	28 33       	cpi	r18, 0x38	; 56
 16a:	31 05       	cpc	r19, r1
 16c:	48 f5       	brcc	.+82     	; 0x1c0 <updateAverage+0x96>
	// average it out
	long int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
 16e:	ed 01       	movw	r28, r26
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	48 9f       	mul	r20, r24
 176:	b0 01       	movw	r22, r0
 178:	49 9f       	mul	r20, r25
 17a:	70 0d       	add	r23, r0
 17c:	58 9f       	mul	r21, r24
 17e:	70 0d       	add	r23, r0
 180:	11 24       	eor	r1, r1
 182:	cb 01       	movw	r24, r22
 184:	aa 27       	eor	r26, r26
 186:	97 fd       	sbrc	r25, 7
 188:	a0 95       	com	r26
 18a:	ba 2f       	mov	r27, r26
	meanprod += refl;
	ringBuf[currentRefl].reflSamples++;
 18c:	9a 01       	movw	r18, r20
 18e:	2f 5f       	subi	r18, 0xFF	; 255
 190:	3f 4f       	sbci	r19, 0xFF	; 255
 192:	3d 83       	std	Y+5, r19	; 0x05
 194:	2c 83       	std	Y+4, r18	; 0x04
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
	// average it out
	long int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
	meanprod += refl;
 196:	af 01       	movw	r20, r30
 198:	66 27       	eor	r22, r22
 19a:	57 fd       	sbrc	r21, 7
 19c:	60 95       	com	r22
 19e:	76 2f       	mov	r23, r22
 1a0:	7a 01       	movw	r14, r20
 1a2:	8b 01       	movw	r16, r22
 1a4:	e8 0e       	add	r14, r24
 1a6:	f9 1e       	adc	r15, r25
 1a8:	0a 1f       	adc	r16, r26
 1aa:	1b 1f       	adc	r17, r27
 1ac:	c8 01       	movw	r24, r16
 1ae:	b7 01       	movw	r22, r14
	ringBuf[currentRefl].reflSamples++;
	ringBuf[currentRefl].avgRefl = meanprod / ringBuf[currentRefl].reflSamples;
 1b0:	44 27       	eor	r20, r20
 1b2:	37 fd       	sbrc	r19, 7
 1b4:	40 95       	com	r20
 1b6:	54 2f       	mov	r21, r20
 1b8:	0e 94 08 06 	call	0xc10	; 0xc10 <__divmodsi4>
 1bc:	3b 83       	std	Y+3, r19	; 0x03
 1be:	2a 83       	std	Y+2, r18	; 0x02
	return;
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	08 95       	ret

000001ce <__vector_29>:

ISR(ADC_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	0b b6       	in	r0, 0x3b	; 59
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	updateAverage((ADCL << 8) + ADCH);
 1f4:	30 91 78 00 	lds	r19, 0x0078
 1f8:	20 91 79 00 	lds	r18, 0x0079
 1fc:	93 2f       	mov	r25, r19
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	82 0f       	add	r24, r18
 202:	91 1d       	adc	r25, r1
 204:	0e 94 95 00 	call	0x12a	; 0x12a <updateAverage>
	ADCSRA |= _BV(ADSC);
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	80 64       	ori	r24, 0x40	; 64
 210:	80 83       	st	Z, r24
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <setupMotor>:

int motorWaitForStepper;

void setupMotor() {
	// enable port for output
	DDRC |= MOTOR_BITMASK;
 238:	87 b1       	in	r24, 0x07	; 7
 23a:	8f 60       	ori	r24, 0x0F	; 15
 23c:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 23e:	88 b1       	in	r24, 0x08	; 8
 240:	83 70       	andi	r24, 0x03	; 3
 242:	8c 60       	ori	r24, 0x0C	; 12
 244:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
 246:	83 ea       	ldi	r24, 0xA3	; 163
 248:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
 24e:	8f e7       	ldi	r24, 0x7F	; 127
 250:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
 252:	10 92 06 01 	sts	0x0106, r1
 256:	10 92 05 01 	sts	0x0105, r1
}
 25a:	08 95       	ret

0000025c <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
 25c:	87 bd       	out	0x27, r24	; 39
}
 25e:	08 95       	ret

00000260 <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
 260:	88 b1       	in	r24, 0x08	; 8
 262:	87 70       	andi	r24, 0x07	; 7
 264:	88 60       	ori	r24, 0x08	; 8
 266:	88 b9       	out	0x08, r24	; 8
}
 268:	08 95       	ret

0000026a <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
 26a:	88 b1       	in	r24, 0x08	; 8
 26c:	8b 70       	andi	r24, 0x0B	; 11
 26e:	84 60       	ori	r24, 0x04	; 4
 270:	88 b9       	out	0x08, r24	; 8
}
 272:	08 95       	ret

00000274 <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 274:	88 b1       	in	r24, 0x08	; 8
 276:	83 70       	andi	r24, 0x03	; 3
 278:	8c 60       	ori	r24, 0x0C	; 12
 27a:	88 b9       	out	0x08, r24	; 8
}
 27c:	08 95       	ret

0000027e <setMotorCoast>:

void setMotorCoast() {
	PORTC = PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	8c 70       	andi	r24, 0x0C	; 12
 282:	83 60       	ori	r24, 0x03	; 3
 284:	88 b9       	out	0x08, r24	; 8
 286:	88 b9       	out	0x08, r24	; 8
 288:	08 95       	ret

0000028a <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
 28a:	8d b3       	in	r24, 0x1d	; 29
 28c:	80 78       	andi	r24, 0x80	; 128
 28e:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
 290:	8a b1       	in	r24, 0x0a	; 10
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
 296:	8d b1       	in	r24, 0x0d	; 13
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Falling-edge interrupt
	EICRA |= _BV(ISC01);
 29c:	e9 e6       	ldi	r30, 0x69	; 105
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	82 60       	ori	r24, 0x02	; 2
 2a4:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
 2a6:	80 81       	ld	r24, Z
 2a8:	8e 7f       	andi	r24, 0xFE	; 254
 2aa:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
 2ac:	80 81       	ld	r24, Z
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
 2b2:	80 81       	ld	r24, Z
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 7d       	andi	r24, 0xDF	; 223
 2bc:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 2be:	80 81       	ld	r24, Z
 2c0:	80 61       	ori	r24, 0x10	; 16
 2c2:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
 2c4:	80 81       	ld	r24, Z
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
 2ca:	80 81       	ld	r24, Z
 2cc:	8f 7b       	andi	r24, 0xBF	; 191
 2ce:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
 2d0:	ea e6       	ldi	r30, 0x6A	; 106
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
 2da:	80 81       	ld	r24, Z
 2dc:	8e 7f       	andi	r24, 0xFE	; 254
 2de:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
 2e0:	80 81       	ld	r24, Z
 2e2:	88 60       	ori	r24, 0x08	; 8
 2e4:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
 2e6:	80 81       	ld	r24, Z
 2e8:	8b 7f       	andi	r24, 0xFB	; 251
 2ea:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
 2ec:	80 81       	ld	r24, Z
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
 2f2:	80 81       	ld	r24, Z
 2f4:	8f 7e       	andi	r24, 0xEF	; 239
 2f6:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
 2f8:	8d b3       	in	r24, 0x1d	; 29
 2fa:	8f 67       	ori	r24, 0x7F	; 127
 2fc:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
 2fe:	8c b3       	in	r24, 0x1c	; 28
 300:	8f 67       	ori	r24, 0x7F	; 127
 302:	8c bb       	out	0x1c, r24	; 28
	sei();
 304:	78 94       	sei
}
 306:	08 95       	ret

00000308 <makeDecision>:

void makeDecision(int index) {
	if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
 308:	fc 01       	movw	r30, r24
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e8 0f       	add	r30, r24
 310:	f9 1f       	adc	r31, r25
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	e3 5f       	subi	r30, 0xF3	; 243
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	24 81       	ldd	r18, Z+4	; 0x04
 31c:	35 81       	ldd	r19, Z+5	; 0x05
 31e:	33 23       	and	r19, r19
 320:	64 f1       	brlt	.+88     	; 0x37a <makeDecision+0x72>
	char refl = ringBuf[index].avgRefl;
 322:	fc 01       	movw	r30, r24
 324:	ee 0f       	add	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	e8 0f       	add	r30, r24
 32a:	f9 1f       	adc	r31, r25
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	e3 5f       	subi	r30, 0xF3	; 243
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	22 81       	ldd	r18, Z+2	; 0x02
	if(ringBuf[index].metal == 1) {
 336:	31 81       	ldd	r19, Z+1	; 0x01
 338:	31 30       	cpi	r19, 0x01	; 1
 33a:	81 f4       	brne	.+32     	; 0x35c <makeDecision+0x54>
		if((refl < STEEL_MAX) && (refl > STEEL_MIN)) {
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	2e 3f       	cpi	r18, 0xFE	; 254
 340:	e0 f4       	brcc	.+56     	; 0x37a <makeDecision+0x72>
			ringBuf[index].type = STEEL;
		}
		if((refl < ALUMINUM_MAX) && (refl > ALUMINUM_MIN)) {
			ringBuf[index].type = ALUMINUM;
 342:	fc 01       	movw	r30, r24
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	8e 0f       	add	r24, r30
 34a:	9f 1f       	adc	r25, r31
 34c:	fc 01       	movw	r30, r24
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	e3 5f       	subi	r30, 0xF3	; 243
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret
		}
	} else {	
		if((refl < BLACK_MAX) && (refl > BLACK_MIN)) {
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	2e 3f       	cpi	r18, 0xFE	; 254
 360:	60 f4       	brcc	.+24     	; 0x37a <makeDecision+0x72>
			ringBuf[index].type = BLACK;
		}
		if((refl < WHITE_MAX) && (refl > WHITE_MIN)) {
			ringBuf[index].type = WHITE;
 362:	fc 01       	movw	r30, r24
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	8e 0f       	add	r24, r30
 36a:	9f 1f       	adc	r25, r31
 36c:	fc 01       	movw	r30, r24
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e3 5f       	subi	r30, 0xF3	; 243
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <firstLaserHandler>:

/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	currentMetal = newRingBufItem();
 37c:	0e 94 26 04 	call	0x84c	; 0x84c <newRingBufItem>
 380:	90 93 90 02 	sts	0x0290, r25
 384:	80 93 8f 02 	sts	0x028F, r24
}
 388:	08 95       	ret

0000038a <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	ringBuf[currentMetal].metal = 1;
 38a:	80 91 8f 02 	lds	r24, 0x028F
 38e:	90 91 90 02 	lds	r25, 0x0290
 392:	fc 01       	movw	r30, r24
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	8e 0f       	add	r24, r30
 39a:	9f 1f       	adc	r25, r31
 39c:	fc 01       	movw	r30, r24
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	e3 5f       	subi	r30, 0xF3	; 243
 3a4:	fe 4f       	sbci	r31, 0xFE	; 254
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	81 83       	std	Z+1, r24	; 0x01
}
 3aa:	08 95       	ret

000003ac <secondLaserHandler>:
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
 3ac:	80 91 04 01 	lds	r24, 0x0104
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	49 f4       	brne	.+18     	; 0x3c6 <secondLaserHandler+0x1a>
		// stop ADC
		stopADC();
 3b4:	0e 94 8d 00 	call	0x11a	; 0x11a <stopADC>
		makeDecision(currentRefl);
 3b8:	80 91 09 01 	lds	r24, 0x0109
 3bc:	90 91 0a 01 	lds	r25, 0x010A
 3c0:	0e 94 84 01 	call	0x308	; 0x308 <makeDecision>
 3c4:	08 95       	ret
		// TODO
	} else {
		currentRefl = currentMetal;
 3c6:	80 91 8f 02 	lds	r24, 0x028F
 3ca:	90 91 90 02 	lds	r25, 0x0290
 3ce:	90 93 0a 01 	sts	0x010A, r25
 3d2:	80 93 09 01 	sts	0x0109, r24
		startADC();
 3d6:	0e 94 83 00 	call	0x106	; 0x106 <startADC>
 3da:	08 95       	ret

000003dc <exitHandler>:
/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	// is there an item on the queue?
	if(bufLength==0) return; // Throw an error here
 3dc:	80 91 8d 02 	lds	r24, 0x028D
 3e0:	90 91 8e 02 	lds	r25, 0x028E
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	09 f4       	brne	.+2      	; 0x3ea <exitHandler+0xe>
 3e8:	4a c0       	rjmp	.+148    	; 0x47e <exitHandler+0xa2>
	// are we in position?
	switch(ringBuf[ringTop].type) {
 3ea:	80 91 0b 01 	lds	r24, 0x010B
 3ee:	90 91 0c 01 	lds	r25, 0x010C
 3f2:	fc 01       	movw	r30, r24
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	8e 0f       	add	r24, r30
 3fa:	9f 1f       	adc	r25, r31
 3fc:	fc 01       	movw	r30, r24
 3fe:	ee 0f       	add	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	e3 5f       	subi	r30, 0xF3	; 243
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	80 81       	ld	r24, Z
 408:	82 30       	cpi	r24, 0x02	; 2
 40a:	39 f1       	breq	.+78     	; 0x45a <exitHandler+0x7e>
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	18 f4       	brcc	.+6      	; 0x416 <exitHandler+0x3a>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	69 f5       	brne	.+90     	; 0x46e <exitHandler+0x92>
 414:	05 c0       	rjmp	.+10     	; 0x420 <exitHandler+0x44>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	61 f0       	breq	.+24     	; 0x432 <exitHandler+0x56>
 41a:	84 30       	cpi	r24, 0x04	; 4
 41c:	41 f5       	brne	.+80     	; 0x46e <exitHandler+0x92>
 41e:	13 c0       	rjmp	.+38     	; 0x446 <exitHandler+0x6a>
		case BLACK:
			if(steps==BLACK_POSITION) {
 420:	80 91 93 02 	lds	r24, 0x0293
 424:	90 91 94 02 	lds	r25, 0x0294
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	09 f5       	brne	.+66     	; 0x46e <exitHandler+0x92>
				popBuf();
 42c:	0e 94 0a 04 	call	0x814	; 0x814 <popBuf>
				return;
 430:	08 95       	ret
			}
			break;
		case STEEL:
			if(steps==STEEL_POSITION) {
 432:	80 91 93 02 	lds	r24, 0x0293
 436:	90 91 94 02 	lds	r25, 0x0294
 43a:	86 39       	cpi	r24, 0x96	; 150
 43c:	91 05       	cpc	r25, r1
 43e:	b9 f4       	brne	.+46     	; 0x46e <exitHandler+0x92>
				popBuf();
 440:	0e 94 0a 04 	call	0x814	; 0x814 <popBuf>
				return;
 444:	08 95       	ret
			}
			break;
		case ALUMINUM:
			if(steps==ALUMINUM_POSIITION) {
 446:	80 91 93 02 	lds	r24, 0x0293
 44a:	90 91 94 02 	lds	r25, 0x0294
 44e:	82 33       	cpi	r24, 0x32	; 50
 450:	91 05       	cpc	r25, r1
 452:	69 f4       	brne	.+26     	; 0x46e <exitHandler+0x92>
				popBuf();
 454:	0e 94 0a 04 	call	0x814	; 0x814 <popBuf>
				return;
 458:	08 95       	ret
			}
			break;
		case WHITE:
			if(steps==WHITE_POSITION) {
 45a:	80 91 93 02 	lds	r24, 0x0293
 45e:	90 91 94 02 	lds	r25, 0x0294
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	91 05       	cpc	r25, r1
 466:	19 f4       	brne	.+6      	; 0x46e <exitHandler+0x92>
				popBuf();
 468:	0e 94 0a 04 	call	0x814	; 0x814 <popBuf>
				return;
 46c:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
 46e:	0e 94 3a 01 	call	0x274	; 0x274 <setMotorBrake>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 06 01 	sts	0x0106, r25
 47a:	80 93 05 01 	sts	0x0105, r24
 47e:	08 95       	ret

00000480 <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	0b b6       	in	r0, 0x3b	; 59
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
	writeDecInt(0);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
	firstLaserHandler();
 4ae:	0e 94 be 01 	call	0x37c	; 0x37c <firstLaserHandler>
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	0b b6       	in	r0, 0x3b	; 59
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	writeDecInt(1);
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
	metalHandler();
 506:	0e 94 c5 01 	call	0x38a	; 0x38a <metalHandler>
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	0f 90       	pop	r0
 524:	0b be       	out	0x3b, r0	; 59
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	0b b6       	in	r0, 0x3b	; 59
 53a:	0f 92       	push	r0
 53c:	11 24       	eor	r1, r1
 53e:	2f 93       	push	r18
 540:	3f 93       	push	r19
 542:	4f 93       	push	r20
 544:	5f 93       	push	r21
 546:	6f 93       	push	r22
 548:	7f 93       	push	r23
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
 54e:	af 93       	push	r26
 550:	bf 93       	push	r27
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	secondLaserHandler();
 556:	0e 94 d6 01 	call	0x3ac	; 0x3ac <secondLaserHandler>
	writeDecInt(2);
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
}
 562:	ff 91       	pop	r31
 564:	ef 91       	pop	r30
 566:	bf 91       	pop	r27
 568:	af 91       	pop	r26
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	7f 91       	pop	r23
 570:	6f 91       	pop	r22
 572:	5f 91       	pop	r21
 574:	4f 91       	pop	r20
 576:	3f 91       	pop	r19
 578:	2f 91       	pop	r18
 57a:	0f 90       	pop	r0
 57c:	0b be       	out	0x3b, r0	; 59
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	0b b6       	in	r0, 0x3b	; 59
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	exitHandler();
 5ae:	0e 94 ee 01 	call	0x3dc	; 0x3dc <exitHandler>
	writeDecInt(3);
 5b2:	83 e0       	ldi	r24, 0x03	; 3
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
}
 5ba:	ff 91       	pop	r31
 5bc:	ef 91       	pop	r30
 5be:	bf 91       	pop	r27
 5c0:	af 91       	pop	r26
 5c2:	9f 91       	pop	r25
 5c4:	8f 91       	pop	r24
 5c6:	7f 91       	pop	r23
 5c8:	6f 91       	pop	r22
 5ca:	5f 91       	pop	r21
 5cc:	4f 91       	pop	r20
 5ce:	3f 91       	pop	r19
 5d0:	2f 91       	pop	r18
 5d2:	0f 90       	pop	r0
 5d4:	0b be       	out	0x3b, r0	; 59
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	0b b6       	in	r0, 0x3b	; 59
 5ea:	0f 92       	push	r0
 5ec:	11 24       	eor	r1, r1
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	hallLow = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 95 02 	sts	0x0295, r24
	writeDecInt(4);
 60c:	84 e0       	ldi	r24, 0x04	; 4
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
}
 614:	ff 91       	pop	r31
 616:	ef 91       	pop	r30
 618:	bf 91       	pop	r27
 61a:	af 91       	pop	r26
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	7f 91       	pop	r23
 622:	6f 91       	pop	r22
 624:	5f 91       	pop	r21
 626:	4f 91       	pop	r20
 628:	3f 91       	pop	r19
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0b be       	out	0x3b, r0	; 59
 630:	0f 90       	pop	r0
 632:	0f be       	out	0x3f, r0	; 63
 634:	0f 90       	pop	r0
 636:	1f 90       	pop	r1
 638:	18 95       	reti

0000063a <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
 63a:	1f 92       	push	r1
 63c:	0f 92       	push	r0
 63e:	0f b6       	in	r0, 0x3f	; 63
 640:	0f 92       	push	r0
 642:	0b b6       	in	r0, 0x3b	; 59
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	3f 93       	push	r19
 64c:	4f 93       	push	r20
 64e:	5f 93       	push	r21
 650:	6f 93       	push	r22
 652:	7f 93       	push	r23
 654:	8f 93       	push	r24
 656:	9f 93       	push	r25
 658:	af 93       	push	r26
 65a:	bf 93       	push	r27
 65c:	ef 93       	push	r30
 65e:	ff 93       	push	r31
	writeDecInt(5);
 660:	85 e0       	ldi	r24, 0x05	; 5
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	0f 90       	pop	r0
 682:	0b be       	out	0x3b, r0	; 59
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	0b b6       	in	r0, 0x3b	; 59
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
	writeDecInt(6);
 6b4:	86 e0       	ldi	r24, 0x06	; 6
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 ae 04 	call	0x95c	; 0x95c <writeDecInt>
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	bf 91       	pop	r27
 6c2:	af 91       	pop	r26
 6c4:	9f 91       	pop	r25
 6c6:	8f 91       	pop	r24
 6c8:	7f 91       	pop	r23
 6ca:	6f 91       	pop	r22
 6cc:	5f 91       	pop	r21
 6ce:	4f 91       	pop	r20
 6d0:	3f 91       	pop	r19
 6d2:	2f 91       	pop	r18
 6d4:	0f 90       	pop	r0
 6d6:	0b be       	out	0x3b, r0	; 59
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
 6e2:	e1 e6       	ldi	r30, 0x61	; 97
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 e8       	ldi	r24, 0x80	; 128
 6e8:	80 83       	st	Z, r24
	CLKPR = 0;
 6ea:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
 6ec:	0e 94 ce 05 	call	0xb9c	; 0xb9c <initializeTimer>
	
	// Initialize ring buffer
	initRingBuf();
 6f0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <initRingBuf>
	
	// enable output for stepper and display.
	DDRA = 0xFF;
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
 6f8:	0e 94 45 01 	call	0x28a	; 0x28a <vectorInterrupts>

	// init stepper
	initalizeStepper();
 6fc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <initalizeStepper>

	// zero stepper
	while(hallLow == 0){
 700:	80 91 95 02 	lds	r24, 0x0295
 704:	88 23       	and	r24, r24
 706:	49 f4       	brne	.+18     	; 0x71a <main+0x38>
		stepTime(25,0);
 708:	89 e1       	ldi	r24, 0x19	; 25
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	0e 94 08 05 	call	0xa10	; 0xa10 <stepTime>

	// init stepper
	initalizeStepper();

	// zero stepper
	while(hallLow == 0){
 712:	80 91 95 02 	lds	r24, 0x0295
 716:	88 23       	and	r24, r24
 718:	b9 f3       	breq	.-18     	; 0x708 <main+0x26>
		stepTime(25,0);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
 71a:	10 92 94 02 	sts	0x0294, r1
 71e:	10 92 93 02 	sts	0x0293, r1
	// reset hall effect check
	hallLow = 0;
 722:	10 92 95 02 	sts	0x0295, r1

	setupADC();
 726:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>
	startADC();
 72a:	0e 94 83 00 	call	0x106	; 0x106 <startADC>

	// wait one second
	delaynms(1000);
 72e:	88 ee       	ldi	r24, 0xE8	; 232
 730:	93 e0       	ldi	r25, 0x03	; 3
 732:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
	
	// start the motor
	setupMotor();
 736:	0e 94 1c 01 	call	0x238	; 0x238 <setupMotor>
	setMotorFwd();
 73a:	0e 94 30 01 	call	0x260	; 0x260 <setMotorFwd>
	

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
			switch(ringBuf[ringTop].type) {
 73e:	cd e0       	ldi	r28, 0x0D	; 13
 740:	d1 e0       	ldi	r29, 0x01	; 1
	setMotorFwd();
	

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
 742:	40 91 8d 02 	lds	r20, 0x028D
 746:	50 91 8e 02 	lds	r21, 0x028E
			switch(ringBuf[ringTop].type) {
 74a:	80 91 0b 01 	lds	r24, 0x010B
 74e:	90 91 0c 01 	lds	r25, 0x010C
 752:	9c 01       	movw	r18, r24
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	82 0f       	add	r24, r18
 75a:	93 1f       	adc	r25, r19
 75c:	fc 01       	movw	r30, r24
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	ec 0f       	add	r30, r28
 764:	fd 1f       	adc	r31, r29
 766:	80 81       	ld	r24, Z
	setMotorFwd();
	

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
 768:	14 16       	cp	r1, r20
 76a:	15 06       	cpc	r1, r21
 76c:	84 f5       	brge	.+96     	; 0x7ce <main+0xec>
			switch(ringBuf[ringTop].type) {
 76e:	82 30       	cpi	r24, 0x02	; 2
 770:	99 f0       	breq	.+38     	; 0x798 <main+0xb6>
 772:	83 30       	cpi	r24, 0x03	; 3
 774:	18 f4       	brcc	.+6      	; 0x77c <main+0x9a>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	b9 f7       	brne	.-18     	; 0x768 <main+0x86>
 77a:	05 c0       	rjmp	.+10     	; 0x786 <main+0xa4>
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	a9 f0       	breq	.+42     	; 0x7aa <main+0xc8>
 780:	84 30       	cpi	r24, 0x04	; 4
 782:	91 f7       	brne	.-28     	; 0x768 <main+0x86>
 784:	1b c0       	rjmp	.+54     	; 0x7bc <main+0xda>
				case BLACK:
					stepperMoveTo(BLACK_POSITION);
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 86 05 	call	0xb0c	; 0xb0c <stepperMoveTo>
					delaynms(500);
 78e:	84 ef       	ldi	r24, 0xF4	; 244
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
					break;
 796:	d5 cf       	rjmp	.-86     	; 0x742 <main+0x60>
				case WHITE:
					stepperMoveTo(WHITE_POSITION);
 798:	84 e6       	ldi	r24, 0x64	; 100
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 86 05 	call	0xb0c	; 0xb0c <stepperMoveTo>
					delaynms(500);
 7a0:	84 ef       	ldi	r24, 0xF4	; 244
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
					break;
 7a8:	cc cf       	rjmp	.-104    	; 0x742 <main+0x60>
				case STEEL:
					stepperMoveTo(STEEL_POSITION);
 7aa:	86 e9       	ldi	r24, 0x96	; 150
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 86 05 	call	0xb0c	; 0xb0c <stepperMoveTo>
					delaynms(500);
 7b2:	84 ef       	ldi	r24, 0xF4	; 244
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
					break;
 7ba:	c3 cf       	rjmp	.-122    	; 0x742 <main+0x60>
				case ALUMINUM:
					stepperMoveTo(ALUMINUM_POSIITION);
 7bc:	82 e3       	ldi	r24, 0x32	; 50
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 86 05 	call	0xb0c	; 0xb0c <stepperMoveTo>
					delaynms(500);
 7c4:	84 ef       	ldi	r24, 0xF4	; 244
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
					break;
 7cc:	ba cf       	rjmp	.-140    	; 0x742 <main+0x60>
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <main+0xec>

000007d0 <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
 7d0:	10 92 0c 01 	sts	0x010C, r1
 7d4:	10 92 0b 01 	sts	0x010B, r1
	ringBottom = 0;
 7d8:	10 92 08 01 	sts	0x0108, r1
 7dc:	10 92 07 01 	sts	0x0107, r1
	currentMetal = 0;
 7e0:	10 92 90 02 	sts	0x0290, r1
 7e4:	10 92 8f 02 	sts	0x028F, r1
	currentRefl = 0;
 7e8:	10 92 0a 01 	sts	0x010A, r1
 7ec:	10 92 09 01 	sts	0x0109, r1
	bufLength = 0;
 7f0:	10 92 8e 02 	sts	0x028E, r1
 7f4:	10 92 8d 02 	sts	0x028D, r1
}
 7f8:	08 95       	ret

000007fa <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
 7fa:	86 0f       	add	r24, r22
 7fc:	97 1f       	adc	r25, r23
 7fe:	80 34       	cpi	r24, 0x40	; 64
 800:	91 05       	cpc	r25, r1
 802:	1c f0       	brlt	.+6      	; 0x80a <getBufOffset+0x10>
		return ((index + offset) - RING_BUF_SIZE);
 804:	80 54       	subi	r24, 0x40	; 64
 806:	90 40       	sbci	r25, 0x00	; 0
 808:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 80a:	99 23       	and	r25, r25
 80c:	14 f4       	brge	.+4      	; 0x812 <getBufOffset+0x18>
		return ((index + offset) + RING_BUF_SIZE);
 80e:	80 5c       	subi	r24, 0xC0	; 192
 810:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
 812:	08 95       	ret

00000814 <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
 818:	c0 91 8d 02 	lds	r28, 0x028D
 81c:	d0 91 8e 02 	lds	r29, 0x028E
 820:	20 97       	sbiw	r28, 0x00	; 0
 822:	89 f0       	breq	.+34     	; 0x846 <popBuf+0x32>
	ringTop = getBufOffset(ringTop, 1);
 824:	80 91 0b 01 	lds	r24, 0x010B
 828:	90 91 0c 01 	lds	r25, 0x010C
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	0e 94 fd 03 	call	0x7fa	; 0x7fa <getBufOffset>
 834:	90 93 0c 01 	sts	0x010C, r25
 838:	80 93 0b 01 	sts	0x010B, r24
	bufLength--;
 83c:	21 97       	sbiw	r28, 0x01	; 1
 83e:	d0 93 8e 02 	sts	0x028E, r29
 842:	c0 93 8d 02 	sts	0x028D, r28
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret

0000084c <newRingBufItem>:

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
	ringBottom = getBufOffset(ringBottom, 1);
 84c:	80 91 07 01 	lds	r24, 0x0107
 850:	90 91 08 01 	lds	r25, 0x0108
 854:	61 e0       	ldi	r22, 0x01	; 1
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	0e 94 fd 03 	call	0x7fa	; 0x7fa <getBufOffset>
 85c:	90 93 08 01 	sts	0x0108, r25
 860:	80 93 07 01 	sts	0x0107, r24
	bufLength++;
 864:	20 91 8d 02 	lds	r18, 0x028D
 868:	30 91 8e 02 	lds	r19, 0x028E
 86c:	2f 5f       	subi	r18, 0xFF	; 255
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	30 93 8e 02 	sts	0x028E, r19
 874:	20 93 8d 02 	sts	0x028D, r18
	ringBuf[ringBottom].avgRefl = 0;
 878:	fc 01       	movw	r30, r24
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	e8 0f       	add	r30, r24
 880:	f9 1f       	adc	r31, r25
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	e3 5f       	subi	r30, 0xF3	; 243
 888:	fe 4f       	sbci	r31, 0xFE	; 254
 88a:	13 82       	std	Z+3, r1	; 0x03
 88c:	12 82       	std	Z+2, r1	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
 88e:	15 82       	std	Z+5, r1	; 0x05
 890:	14 82       	std	Z+4, r1	; 0x04
	ringBuf[ringBottom].metal = 0;
 892:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
 894:	10 82       	st	Z, r1
	return ringBottom;
}
 896:	08 95       	ret

00000898 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
 898:	87 30       	cpi	r24, 0x07	; 7
 89a:	71 f1       	breq	.+92     	; 0x8f8 <getPatFomHex+0x60>
 89c:	88 30       	cpi	r24, 0x08	; 8
 89e:	70 f4       	brcc	.+28     	; 0x8bc <getPatFomHex+0x24>
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	11 f1       	breq	.+68     	; 0x8e8 <getPatFomHex+0x50>
 8a4:	84 30       	cpi	r24, 0x04	; 4
 8a6:	28 f4       	brcc	.+10     	; 0x8b2 <getPatFomHex+0x1a>
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	d1 f1       	breq	.+116    	; 0x920 <getPatFomHex+0x88>
 8ac:	82 30       	cpi	r24, 0x02	; 2
 8ae:	d0 f4       	brcc	.+52     	; 0x8e4 <getPatFomHex+0x4c>
 8b0:	17 c0       	rjmp	.+46     	; 0x8e0 <getPatFomHex+0x48>
 8b2:	85 30       	cpi	r24, 0x05	; 5
 8b4:	e9 f0       	breq	.+58     	; 0x8f0 <getPatFomHex+0x58>
 8b6:	86 30       	cpi	r24, 0x06	; 6
 8b8:	e8 f4       	brcc	.+58     	; 0x8f4 <getPatFomHex+0x5c>
 8ba:	18 c0       	rjmp	.+48     	; 0x8ec <getPatFomHex+0x54>
 8bc:	8b 30       	cpi	r24, 0x0B	; 11
 8be:	21 f1       	breq	.+72     	; 0x908 <getPatFomHex+0x70>
 8c0:	8c 30       	cpi	r24, 0x0C	; 12
 8c2:	28 f4       	brcc	.+10     	; 0x8ce <getPatFomHex+0x36>
 8c4:	89 30       	cpi	r24, 0x09	; 9
 8c6:	e1 f0       	breq	.+56     	; 0x900 <getPatFomHex+0x68>
 8c8:	8a 30       	cpi	r24, 0x0A	; 10
 8ca:	e0 f4       	brcc	.+56     	; 0x904 <getPatFomHex+0x6c>
 8cc:	17 c0       	rjmp	.+46     	; 0x8fc <getPatFomHex+0x64>
 8ce:	8d 30       	cpi	r24, 0x0D	; 13
 8d0:	f9 f0       	breq	.+62     	; 0x910 <getPatFomHex+0x78>
 8d2:	8d 30       	cpi	r24, 0x0D	; 13
 8d4:	d8 f0       	brcs	.+54     	; 0x90c <getPatFomHex+0x74>
 8d6:	8e 30       	cpi	r24, 0x0E	; 14
 8d8:	e9 f0       	breq	.+58     	; 0x914 <getPatFomHex+0x7c>
 8da:	8f 30       	cpi	r24, 0x0F	; 15
 8dc:	f9 f4       	brne	.+62     	; 0x91c <getPatFomHex+0x84>
 8de:	1c c0       	rjmp	.+56     	; 0x918 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
 8e0:	8c ef       	ldi	r24, 0xFC	; 252
 8e2:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
 8e4:	8a ed       	ldi	r24, 0xDA	; 218
 8e6:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
 8e8:	82 ef       	ldi	r24, 0xF2	; 242
 8ea:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
 8ec:	86 e6       	ldi	r24, 0x66	; 102
 8ee:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
 8f0:	86 eb       	ldi	r24, 0xB6	; 182
 8f2:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
 8f4:	8e eb       	ldi	r24, 0xBE	; 190
 8f6:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
 8f8:	80 ee       	ldi	r24, 0xE0	; 224
 8fa:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
 8fc:	8e ef       	ldi	r24, 0xFE	; 254
 8fe:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
 900:	86 ee       	ldi	r24, 0xE6	; 230
 902:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
 904:	8e ee       	ldi	r24, 0xEE	; 238
 906:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
 908:	8e e3       	ldi	r24, 0x3E	; 62
 90a:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
 90c:	8c e9       	ldi	r24, 0x9C	; 156
 90e:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
 910:	8a e7       	ldi	r24, 0x7A	; 122
 912:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
 914:	8e e9       	ldi	r24, 0x9E	; 158
 916:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
 918:	8e e8       	ldi	r24, 0x8E	; 142
 91a:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
 920:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
 922:	08 95       	ret

00000924 <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
 928:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 92a:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
 92c:	ac 01       	movw	r20, r24
 92e:	02 2e       	mov	r0, r18
 930:	02 c0       	rjmp	.+4      	; 0x936 <writePattern+0x12>
 932:	55 95       	asr	r21
 934:	47 95       	ror	r20
 936:	0a 94       	dec	r0
 938:	e2 f7       	brpl	.-8      	; 0x932 <writePattern+0xe>
 93a:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 93c:	42 95       	swap	r20
 93e:	44 0f       	add	r20, r20
 940:	44 0f       	add	r20, r20
 942:	40 7c       	andi	r20, 0xC0	; 192
 944:	56 2f       	mov	r21, r22
 946:	5f 7b       	andi	r21, 0xBF	; 191
 948:	45 2b       	or	r20, r21
 94a:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
 94c:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
 94e:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	28 30       	cpi	r18, 0x08	; 8
 956:	31 05       	cpc	r19, r1
 958:	41 f7       	brne	.-48     	; 0x92a <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
 95a:	08 95       	ret

0000095c <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
 95c:	ef 92       	push	r14
 95e:	ff 92       	push	r15
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	c3 e0       	ldi	r28, 0x03	; 3
 96a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
 96c:	0f 2e       	mov	r0, r31
 96e:	fa e0       	ldi	r31, 0x0A	; 10
 970:	ef 2e       	mov	r14, r31
 972:	ff 24       	eor	r15, r15
 974:	f0 2d       	mov	r31, r0
 976:	b7 01       	movw	r22, r14
 978:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 97c:	16 2f       	mov	r17, r22
 97e:	07 2f       	mov	r16, r23
 980:	0e 94 4c 04 	call	0x898	; 0x898 <getPatFomHex>
 984:	0e 94 92 04 	call	0x924	; 0x924 <writePattern>
		number = number / 10;
 988:	81 2f       	mov	r24, r17
 98a:	90 2f       	mov	r25, r16
 98c:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 98e:	99 f7       	brne	.-26     	; 0x976 <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	1f 91       	pop	r17
 996:	0f 91       	pop	r16
 998:	ff 90       	pop	r15
 99a:	ef 90       	pop	r14
 99c:	08 95       	ret

0000099e <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
 99e:	ef 92       	push	r14
 9a0:	ff 92       	push	r15
 9a2:	0f 93       	push	r16
 9a4:	1f 93       	push	r17
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	ec 01       	movw	r28, r24
 9ac:	03 e0       	ldi	r16, 0x03	; 3
 9ae:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
 9b0:	ee 24       	eor	r14, r14
 9b2:	ff 24       	eor	r15, r15
 9b4:	68 94       	set
 9b6:	e4 f8       	bld	r14, 4
 9b8:	ce 01       	movw	r24, r28
 9ba:	b7 01       	movw	r22, r14
 9bc:	0e 94 f5 05 	call	0xbea	; 0xbea <__divmodhi4>
 9c0:	0e 94 4c 04 	call	0x898	; 0x898 <getPatFomHex>
 9c4:	0e 94 92 04 	call	0x924	; 0x924 <writePattern>
		number = number / 16;
 9c8:	ce 01       	movw	r24, r28
 9ca:	dd 23       	and	r29, r29
 9cc:	0c f4       	brge	.+2      	; 0x9d0 <writeHexInt+0x32>
 9ce:	0f 96       	adiw	r24, 0x0f	; 15
 9d0:	ec 01       	movw	r28, r24
 9d2:	d5 95       	asr	r29
 9d4:	c7 95       	ror	r28
 9d6:	d5 95       	asr	r29
 9d8:	c7 95       	ror	r28
 9da:	d5 95       	asr	r29
 9dc:	c7 95       	ror	r28
 9de:	d5 95       	asr	r29
 9e0:	c7 95       	ror	r28
 9e2:	01 50       	subi	r16, 0x01	; 1
 9e4:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 9e6:	41 f7       	brne	.-48     	; 0x9b8 <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	ff 90       	pop	r15
 9f2:	ef 90       	pop	r14
 9f4:	08 95       	ret

000009f6 <initalizeStepper>:


// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
 9f6:	81 b1       	in	r24, 0x01	; 1
 9f8:	8f 63       	ori	r24, 0x3F	; 63
 9fa:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
 9fc:	10 92 92 02 	sts	0x0292, r1
 a00:	10 92 91 02 	sts	0x0291, r1
	PORTA = PORTA & (0b11000000|states[currentState]);
 a04:	82 b1       	in	r24, 0x02	; 2
 a06:	80 7f       	andi	r24, 0xF0	; 240
 a08:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
 a0a:	10 92 95 02 	sts	0x0295, r1
}
 a0e:	08 95       	ret

00000a10 <stepTime>:


void stepTime(int stepTime, char direction) {
 a10:	cf 93       	push	r28
 a12:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
 a14:	0e 94 d4 05 	call	0xba8	; 0xba8 <delaynms>
	if(direction == 0) { //forward direction
 a18:	cc 23       	and	r28, r28
 a1a:	11 f5       	brne	.+68     	; 0xa60 <stepTime+0x50>
		currentState++;
 a1c:	80 91 91 02 	lds	r24, 0x0291
 a20:	90 91 92 02 	lds	r25, 0x0292
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	90 93 92 02 	sts	0x0292, r25
 a2a:	80 93 91 02 	sts	0x0291, r24
		if (currentState==4) currentState = 0;
 a2e:	84 30       	cpi	r24, 0x04	; 4
 a30:	91 05       	cpc	r25, r1
 a32:	21 f4       	brne	.+8      	; 0xa3c <stepTime+0x2c>
 a34:	10 92 92 02 	sts	0x0292, r1
 a38:	10 92 91 02 	sts	0x0291, r1
		PORTA = PORTA & (0b11000000 | states[currentState]);
 a3c:	92 b1       	in	r25, 0x02	; 2
 a3e:	e0 91 91 02 	lds	r30, 0x0291
 a42:	f0 91 92 02 	lds	r31, 0x0292
 a46:	e0 50       	subi	r30, 0x00	; 0
 a48:	ff 4f       	sbci	r31, 0xFF	; 255
 a4a:	80 81       	ld	r24, Z
 a4c:	80 6c       	ori	r24, 0xC0	; 192
 a4e:	89 23       	and	r24, r25
 a50:	82 b9       	out	0x02, r24	; 2
		steps++;
		if(hallLow = 1) {
			steps = 0;
 a52:	10 92 94 02 	sts	0x0294, r1
 a56:	10 92 93 02 	sts	0x0293, r1
			hallLow = 0;
 a5a:	10 92 95 02 	sts	0x0295, r1
 a5e:	24 c0       	rjmp	.+72     	; 0xaa8 <stepTime+0x98>
		}
	}
	else { //reverse direction
		currentState--;
 a60:	80 91 91 02 	lds	r24, 0x0291
 a64:	90 91 92 02 	lds	r25, 0x0292
 a68:	01 97       	sbiw	r24, 0x01	; 1
 a6a:	90 93 92 02 	sts	0x0292, r25
 a6e:	80 93 91 02 	sts	0x0291, r24
		if (currentState==-1) currentState = 3;
 a72:	2f ef       	ldi	r18, 0xFF	; 255
 a74:	8f 3f       	cpi	r24, 0xFF	; 255
 a76:	92 07       	cpc	r25, r18
 a78:	31 f4       	brne	.+12     	; 0xa86 <stepTime+0x76>
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	90 93 92 02 	sts	0x0292, r25
 a82:	80 93 91 02 	sts	0x0291, r24
		PORTA = PORTA & (0b11000000 | states[currentState]);
 a86:	92 b1       	in	r25, 0x02	; 2
 a88:	e0 91 91 02 	lds	r30, 0x0291
 a8c:	f0 91 92 02 	lds	r31, 0x0292
 a90:	e0 50       	subi	r30, 0x00	; 0
 a92:	ff 4f       	sbci	r31, 0xFF	; 255
 a94:	80 81       	ld	r24, Z
 a96:	80 6c       	ori	r24, 0xC0	; 192
 a98:	89 23       	and	r24, r25
 a9a:	82 b9       	out	0x02, r24	; 2
		steps--;
		if(hallLow = 1) {
			steps = 0;
 a9c:	10 92 94 02 	sts	0x0294, r1
 aa0:	10 92 93 02 	sts	0x0293, r1
			hallLow = 0;
 aa4:	10 92 95 02 	sts	0x0295, r1
		}				
	}
}
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
 aac:	86 17       	cp	r24, r22
 aae:	97 07       	cpc	r25, r23
 ab0:	4c f4       	brge	.+18     	; 0xac4 <forwardSteps+0x18>
 ab2:	68 1b       	sub	r22, r24
 ab4:	79 0b       	sbc	r23, r25
 ab6:	1a f4       	brpl	.+6      	; 0xabe <forwardSteps+0x12>
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	86 2f       	mov	r24, r22
 ac0:	97 2f       	mov	r25, r23
 ac2:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - (target - current));
 ac4:	86 1b       	sub	r24, r22
 ac6:	97 0b       	sbc	r25, r23
 ac8:	9c 01       	movw	r18, r24
 aca:	28 53       	subi	r18, 0x38	; 56
 acc:	3f 4f       	sbci	r19, 0xFF	; 255
 ace:	1a f4       	brpl	.+6      	; 0xad6 <forwardSteps+0x2a>
 ad0:	30 95       	com	r19
 ad2:	21 95       	neg	r18
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	82 2f       	mov	r24, r18
 ad8:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 ada:	08 95       	ret

00000adc <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
 adc:	68 17       	cp	r22, r24
 ade:	79 07       	cpc	r23, r25
 ae0:	4c f4       	brge	.+18     	; 0xaf4 <reverseSteps+0x18>
 ae2:	68 1b       	sub	r22, r24
 ae4:	79 0b       	sbc	r23, r25
 ae6:	1a f4       	brpl	.+6      	; 0xaee <reverseSteps+0x12>
 ae8:	70 95       	com	r23
 aea:	61 95       	neg	r22
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	86 2f       	mov	r24, r22
 af0:	97 2f       	mov	r25, r23
 af2:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - (target - current));
 af4:	86 1b       	sub	r24, r22
 af6:	97 0b       	sbc	r25, r23
 af8:	9c 01       	movw	r18, r24
 afa:	28 53       	subi	r18, 0x38	; 56
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	1a f4       	brpl	.+6      	; 0xb06 <reverseSteps+0x2a>
 b00:	30 95       	com	r19
 b02:	21 95       	neg	r18
 b04:	3f 4f       	sbci	r19, 0xFF	; 255
 b06:	82 2f       	mov	r24, r18
 b08:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 b0a:	08 95       	ret

00000b0c <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
 b0c:	ef 92       	push	r14
 b0e:	ff 92       	push	r15
 b10:	0f 93       	push	r16
 b12:	1f 93       	push	r17
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	ec 01       	movw	r28, r24
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
 b1a:	e0 90 93 02 	lds	r14, 0x0293
 b1e:	f0 90 94 02 	lds	r15, 0x0294
 b22:	b7 01       	movw	r22, r14
 b24:	0e 94 56 05 	call	0xaac	; 0xaac <forwardSteps>
 b28:	8c 01       	movw	r16, r24
 b2a:	ce 01       	movw	r24, r28
 b2c:	b7 01       	movw	r22, r14
 b2e:	0e 94 6e 05 	call	0xadc	; 0xadc <reverseSteps>
 b32:	ec 01       	movw	r28, r24
 b34:	08 17       	cp	r16, r24
 b36:	19 07       	cpc	r17, r25
 b38:	24 f0       	brlt	.+8      	; 0xb42 <stepperMoveTo+0x36>
		}
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 b3a:	18 16       	cp	r1, r24
 b3c:	19 06       	cpc	r1, r25
 b3e:	7c f0       	brlt	.+30     	; 0xb5e <stepperMoveTo+0x52>
 b40:	17 c0       	rjmp	.+46     	; 0xb70 <stepperMoveTo+0x64>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
		int j = forwardSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 b42:	10 16       	cp	r1, r16
 b44:	11 06       	cpc	r1, r17
 b46:	a4 f4       	brge	.+40     	; 0xb70 <stepperMoveTo+0x64>
			stepTime(15,0);
 b48:	8f e0       	ldi	r24, 0x0F	; 15
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	0e 94 08 05 	call	0xa10	; 0xa10 <stepTime>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
		int j = forwardSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 b52:	0f 5f       	subi	r16, 0xFF	; 255
 b54:	1f 4f       	sbci	r17, 0xFF	; 255
 b56:	10 16       	cp	r1, r16
 b58:	11 06       	cpc	r1, r17
 b5a:	b4 f3       	brlt	.-20     	; 0xb48 <stepperMoveTo+0x3c>
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <stepperMoveTo+0x64>
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
			stepTime(15,1);
 b5e:	8f e0       	ldi	r24, 0x0F	; 15
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	61 e0       	ldi	r22, 0x01	; 1
 b64:	0e 94 08 05 	call	0xa10	; 0xa10 <stepTime>
		}
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 b68:	21 96       	adiw	r28, 0x01	; 1
 b6a:	1c 16       	cp	r1, r28
 b6c:	1d 06       	cpc	r1, r29
 b6e:	bc f3       	brlt	.-18     	; 0xb5e <stepperMoveTo+0x52>
			stepTime(15,1);
		}
	}
	
	if(motorWaitForStepper == 1) {
 b70:	80 91 05 01 	lds	r24, 0x0105
 b74:	90 91 06 01 	lds	r25, 0x0106
 b78:	81 30       	cpi	r24, 0x01	; 1
 b7a:	91 05       	cpc	r25, r1
 b7c:	41 f4       	brne	.+16     	; 0xb8e <stepperMoveTo+0x82>
		// start the motor back up
		setMotorFwd();
 b7e:	0e 94 30 01 	call	0x260	; 0x260 <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
 b82:	10 92 06 01 	sts	0x0106, r1
 b86:	10 92 05 01 	sts	0x0105, r1
		// fire the exit logic again
		exitHandler();
 b8a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <exitHandler>
	}
}
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	1f 91       	pop	r17
 b94:	0f 91       	pop	r16
 b96:	ff 90       	pop	r15
 b98:	ef 90       	pop	r14
 b9a:	08 95       	ret

00000b9c <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
 b9c:	e1 e8       	ldi	r30, 0x81	; 129
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	81 60       	ori	r24, 0x01	; 1
 ba4:	80 83       	st	Z, r24
} 
 ba6:	08 95       	ret

00000ba8 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
 ba8:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
 baa:	e1 e8       	ldi	r30, 0x81	; 129
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	80 81       	ld	r24, Z
 bb0:	88 60       	ori	r24, 0x08	; 8
 bb2:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
 bb4:	80 81       	ld	r24, Z
 bb6:	83 60       	ori	r24, 0x03	; 3
 bb8:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
 bba:	12 16       	cp	r1, r18
 bbc:	13 06       	cpc	r1, r19
 bbe:	a4 f4       	brge	.+40     	; 0xbe8 <delaynms+0x40>
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 bc4:	e8 e8       	ldi	r30, 0x88	; 136
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	4d e7       	ldi	r20, 0x7D	; 125
 bca:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
 bcc:	a4 e8       	ldi	r26, 0x84	; 132
 bce:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 bd0:	51 83       	std	Z+1, r21	; 0x01
 bd2:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
 bd4:	11 96       	adiw	r26, 0x01	; 1
 bd6:	1c 92       	st	X, r1
 bd8:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
 bda:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
 bdc:	b1 9b       	sbis	0x16, 1	; 22
 bde:	fe cf       	rjmp	.-4      	; 0xbdc <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
 be0:	01 96       	adiw	r24, 0x01	; 1
 be2:	82 17       	cp	r24, r18
 be4:	93 07       	cpc	r25, r19
 be6:	a1 f7       	brne	.-24     	; 0xbd0 <delaynms+0x28>
 be8:	08 95       	ret

00000bea <__divmodhi4>:
 bea:	97 fb       	bst	r25, 7
 bec:	09 2e       	mov	r0, r25
 bee:	07 26       	eor	r0, r23
 bf0:	0a d0       	rcall	.+20     	; 0xc06 <__divmodhi4_neg1>
 bf2:	77 fd       	sbrc	r23, 7
 bf4:	04 d0       	rcall	.+8      	; 0xbfe <__divmodhi4_neg2>
 bf6:	27 d0       	rcall	.+78     	; 0xc46 <__udivmodhi4>
 bf8:	06 d0       	rcall	.+12     	; 0xc06 <__divmodhi4_neg1>
 bfa:	00 20       	and	r0, r0
 bfc:	1a f4       	brpl	.+6      	; 0xc04 <__divmodhi4_exit>

00000bfe <__divmodhi4_neg2>:
 bfe:	70 95       	com	r23
 c00:	61 95       	neg	r22
 c02:	7f 4f       	sbci	r23, 0xFF	; 255

00000c04 <__divmodhi4_exit>:
 c04:	08 95       	ret

00000c06 <__divmodhi4_neg1>:
 c06:	f6 f7       	brtc	.-4      	; 0xc04 <__divmodhi4_exit>
 c08:	90 95       	com	r25
 c0a:	81 95       	neg	r24
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	08 95       	ret

00000c10 <__divmodsi4>:
 c10:	97 fb       	bst	r25, 7
 c12:	09 2e       	mov	r0, r25
 c14:	05 26       	eor	r0, r21
 c16:	0e d0       	rcall	.+28     	; 0xc34 <__divmodsi4_neg1>
 c18:	57 fd       	sbrc	r21, 7
 c1a:	04 d0       	rcall	.+8      	; 0xc24 <__divmodsi4_neg2>
 c1c:	28 d0       	rcall	.+80     	; 0xc6e <__udivmodsi4>
 c1e:	0a d0       	rcall	.+20     	; 0xc34 <__divmodsi4_neg1>
 c20:	00 1c       	adc	r0, r0
 c22:	38 f4       	brcc	.+14     	; 0xc32 <__divmodsi4_exit>

00000c24 <__divmodsi4_neg2>:
 c24:	50 95       	com	r21
 c26:	40 95       	com	r20
 c28:	30 95       	com	r19
 c2a:	21 95       	neg	r18
 c2c:	3f 4f       	sbci	r19, 0xFF	; 255
 c2e:	4f 4f       	sbci	r20, 0xFF	; 255
 c30:	5f 4f       	sbci	r21, 0xFF	; 255

00000c32 <__divmodsi4_exit>:
 c32:	08 95       	ret

00000c34 <__divmodsi4_neg1>:
 c34:	f6 f7       	brtc	.-4      	; 0xc32 <__divmodsi4_exit>
 c36:	90 95       	com	r25
 c38:	80 95       	com	r24
 c3a:	70 95       	com	r23
 c3c:	61 95       	neg	r22
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	8f 4f       	sbci	r24, 0xFF	; 255
 c42:	9f 4f       	sbci	r25, 0xFF	; 255
 c44:	08 95       	ret

00000c46 <__udivmodhi4>:
 c46:	aa 1b       	sub	r26, r26
 c48:	bb 1b       	sub	r27, r27
 c4a:	51 e1       	ldi	r21, 0x11	; 17
 c4c:	07 c0       	rjmp	.+14     	; 0xc5c <__udivmodhi4_ep>

00000c4e <__udivmodhi4_loop>:
 c4e:	aa 1f       	adc	r26, r26
 c50:	bb 1f       	adc	r27, r27
 c52:	a6 17       	cp	r26, r22
 c54:	b7 07       	cpc	r27, r23
 c56:	10 f0       	brcs	.+4      	; 0xc5c <__udivmodhi4_ep>
 c58:	a6 1b       	sub	r26, r22
 c5a:	b7 0b       	sbc	r27, r23

00000c5c <__udivmodhi4_ep>:
 c5c:	88 1f       	adc	r24, r24
 c5e:	99 1f       	adc	r25, r25
 c60:	5a 95       	dec	r21
 c62:	a9 f7       	brne	.-22     	; 0xc4e <__udivmodhi4_loop>
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	bc 01       	movw	r22, r24
 c6a:	cd 01       	movw	r24, r26
 c6c:	08 95       	ret

00000c6e <__udivmodsi4>:
 c6e:	a1 e2       	ldi	r26, 0x21	; 33
 c70:	1a 2e       	mov	r1, r26
 c72:	aa 1b       	sub	r26, r26
 c74:	bb 1b       	sub	r27, r27
 c76:	fd 01       	movw	r30, r26
 c78:	0d c0       	rjmp	.+26     	; 0xc94 <__udivmodsi4_ep>

00000c7a <__udivmodsi4_loop>:
 c7a:	aa 1f       	adc	r26, r26
 c7c:	bb 1f       	adc	r27, r27
 c7e:	ee 1f       	adc	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	a2 17       	cp	r26, r18
 c84:	b3 07       	cpc	r27, r19
 c86:	e4 07       	cpc	r30, r20
 c88:	f5 07       	cpc	r31, r21
 c8a:	20 f0       	brcs	.+8      	; 0xc94 <__udivmodsi4_ep>
 c8c:	a2 1b       	sub	r26, r18
 c8e:	b3 0b       	sbc	r27, r19
 c90:	e4 0b       	sbc	r30, r20
 c92:	f5 0b       	sbc	r31, r21

00000c94 <__udivmodsi4_ep>:
 c94:	66 1f       	adc	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	1a 94       	dec	r1
 c9e:	69 f7       	brne	.-38     	; 0xc7a <__udivmodsi4_loop>
 ca0:	60 95       	com	r22
 ca2:	70 95       	com	r23
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	9b 01       	movw	r18, r22
 caa:	ac 01       	movw	r20, r24
 cac:	bd 01       	movw	r22, r26
 cae:	cf 01       	movw	r24, r30
 cb0:	08 95       	ret

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
