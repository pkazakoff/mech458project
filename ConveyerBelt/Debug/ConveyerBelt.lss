
ConveyerBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000bc6  00000c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  00800104  00800104  00000c5e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000013b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135e  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b56  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00003b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000471  00000000  00000000  00004138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf1  00000000  00000000  000045a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000519a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_1>
   8:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_2>
   c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_3>
  10:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_4>
  14:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_5>
  18:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_6>
  1c:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_29>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 ec       	ldi	r30, 0xC6	; 198
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>
  be:	1b be       	out	0x3b, r1	; 59

000000c0 <__do_clear_bss>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a4 e0       	ldi	r26, 0x04	; 4
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a6 35       	cpi	r26, 0x56	; 86
  cc:	b1 07       	cpc	r27, r17
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 3b 03 	call	0x676	; 0x676 <main>
  d4:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupADC>:
#include <avr/interrupt.h>

char ADC_is_running;

void setupADC() {
	DDRF = 0x00;
  dc:	10 ba       	out	0x10, r1	; 16
	// ADC setup
	ADCSRA |= _BV(ADEN);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR) | _BV(REFS0) | 0b01;
  f4:	ec e7       	ldi	r30, 0x7C	; 124
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 66       	ori	r24, 0x61	; 97
  fc:	80 83       	st	Z, r24
	ADC_is_running = 0;
  fe:	10 92 04 01 	sts	0x0104, r1
	sei();
 102:	78 94       	sei
}
 104:	08 95       	ret

00000106 <startADC>:

void startADC() {
	ADC_is_running = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 04 01 	sts	0x0104, r24
	ADCSRA |= _BV(ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
	sei();
 116:	78 94       	sei
}
 118:	08 95       	ret

0000011a <stopADC>:

void stopADC() {
	ADC_is_running = 0;
 11a:	10 92 04 01 	sts	0x0104, r1
	ADCSRA &= ~_BV(ADSC);
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	80 83       	st	Z, r24
}
 128:	08 95       	ret

0000012a <updateAverage>:

void updateAverage(int refl) {
 12a:	ac 01       	movw	r20, r24
	// if we have too many samples, toss 'em
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
 12c:	80 91 09 01 	lds	r24, 0x0109
 130:	90 91 0a 01 	lds	r25, 0x010A
 134:	fc 01       	movw	r30, r24
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e8 0f       	add	r30, r24
 140:	f9 1f       	adc	r31, r25
 142:	e3 5f       	subi	r30, 0xF3	; 243
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	63 81       	ldd	r22, Z+3	; 0x03
 148:	74 81       	ldd	r23, Z+4	; 0x04
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	6d 32       	cpi	r22, 0x2D	; 45
 14e:	72 07       	cpc	r23, r18
 150:	1c f5       	brge	.+70     	; 0x198 <updateAverage+0x6e>
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
 152:	9a 01       	movw	r18, r20
 154:	28 5c       	subi	r18, 0xC8	; 200
 156:	30 40       	sbci	r19, 0x00	; 0
 158:	28 33       	cpi	r18, 0x38	; 56
 15a:	31 05       	cpc	r19, r1
 15c:	e8 f4       	brcc	.+58     	; 0x198 <updateAverage+0x6e>
	// average it out
	int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
 15e:	9c 01       	movw	r18, r24
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	82 0f       	add	r24, r18
 16a:	93 1f       	adc	r25, r19
 16c:	fc 01       	movw	r30, r24
 16e:	e3 5f       	subi	r30, 0xF3	; 243
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	82 81       	ldd	r24, Z+2	; 0x02
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	68 9f       	mul	r22, r24
 178:	90 01       	movw	r18, r0
 17a:	69 9f       	mul	r22, r25
 17c:	30 0d       	add	r19, r0
 17e:	78 9f       	mul	r23, r24
 180:	30 0d       	add	r19, r0
 182:	11 24       	eor	r1, r1
	meanprod += refl;
	ringBuf[currentRefl].reflSamples++;
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	74 83       	std	Z+4, r23	; 0x04
 18a:	63 83       	std	Z+3, r22	; 0x03
	if(ringBuf[currentRefl].reflSamples > REFL_MAX_SAMPLES) return;
	// throw out spurious values
	if((refl < REFL_MIN) || (refl > REFL_MAX)) return;
	// average it out
	int meanprod = ringBuf[currentRefl].avgRefl * ringBuf[currentRefl].reflSamples;
	meanprod += refl;
 18c:	c9 01       	movw	r24, r18
 18e:	84 0f       	add	r24, r20
 190:	95 1f       	adc	r25, r21
	ringBuf[currentRefl].reflSamples++;
	ringBuf[currentRefl].avgRefl = meanprod / ringBuf[currentRefl].reflSamples;
 192:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
 196:	62 83       	std	Z+2, r22	; 0x02
 198:	08 95       	ret

0000019a <__vector_29>:
}

ISR(ADC_vect) {
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	updateAverage(ADCH);
 1c0:	80 91 79 00 	lds	r24, 0x0079
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 95 00 	call	0x12a	; 0x12a <updateAverage>
	ADCSRA |= _BV(ADSC);
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <setupMotor>:

int motorWaitForStepper;

void setupMotor() {
	// enable port for output
	DDRC |= MOTOR_BITMASK;
 1fa:	87 b1       	in	r24, 0x07	; 7
 1fc:	8f 60       	ori	r24, 0x0F	; 15
 1fe:	87 b9       	out	0x07, r24	; 7
	
	// put the brakes on
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 200:	88 b1       	in	r24, 0x08	; 8
 202:	83 70       	andi	r24, 0x03	; 3
 204:	8c 60       	ori	r24, 0x0C	; 12
 206:	88 b9       	out	0x08, r24	; 8
	
	// start the PWM output
	
	// enable PWM fast mode
	TCCR0A = _BV(WGM00) | _BV(WGM01) | _BV(COM0A1) | _BV(COM0B1);
 208:	83 ea       	ldi	r24, 0xA3	; 163
 20a:	84 bd       	out	0x24, r24	; 36
	
	// disable prescaler
	TCCR0B = _BV(CS00);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	85 bd       	out	0x25, r24	; 37
	
	// set duty cycle
	OCR0A = MOTOR_DEF_SPEED;
 210:	8f e7       	ldi	r24, 0x7F	; 127
 212:	87 bd       	out	0x27, r24	; 39
	motorWaitForStepper = 0;
 214:	10 92 06 01 	sts	0x0106, r1
 218:	10 92 05 01 	sts	0x0105, r1
}
 21c:	08 95       	ret

0000021e <setMotorSpeed>:

void setMotorSpeed(char speed) {
	OCR0A = speed;
 21e:	87 bd       	out	0x27, r24	; 39
}
 220:	08 95       	ret

00000222 <setMotorFwd>:

void setMotorFwd() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_FWD_PATTERN;
 222:	88 b1       	in	r24, 0x08	; 8
 224:	87 70       	andi	r24, 0x07	; 7
 226:	88 60       	ori	r24, 0x08	; 8
 228:	88 b9       	out	0x08, r24	; 8
}
 22a:	08 95       	ret

0000022c <setMotorRev>:

void setMotorRev() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_REV_PATTERN;
 22c:	88 b1       	in	r24, 0x08	; 8
 22e:	8b 70       	andi	r24, 0x0B	; 11
 230:	84 60       	ori	r24, 0x04	; 4
 232:	88 b9       	out	0x08, r24	; 8
}
 234:	08 95       	ret

00000236 <setMotorBrake>:

void setMotorBrake() {
	PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_BRAKE_PATTERN;
 236:	88 b1       	in	r24, 0x08	; 8
 238:	83 70       	andi	r24, 0x03	; 3
 23a:	8c 60       	ori	r24, 0x0C	; 12
 23c:	88 b9       	out	0x08, r24	; 8
}
 23e:	08 95       	ret

00000240 <setMotorCoast>:

void setMotorCoast() {
	PORTC = PORTC = (PORTC & MOTOR_BITMASK) | MOTOR_COAST_PATTERN;
 240:	88 b1       	in	r24, 0x08	; 8
 242:	8c 70       	andi	r24, 0x0C	; 12
 244:	83 60       	ori	r24, 0x03	; 3
 246:	88 b9       	out	0x08, r24	; 8
 248:	88 b9       	out	0x08, r24	; 8
 24a:	08 95       	ret

0000024c <vectorInterrupts>:
   external interrupts on the desired pins
   */
void vectorInterrupts() {
	
	// disable external interrupts temporarily
	EIMSK &= 0b10000000;
 24c:	8d b3       	in	r24, 0x1d	; 29
 24e:	80 78       	andi	r24, 0x80	; 128
 250:	8d bb       	out	0x1d, r24	; 29
	
	// Set all interrupt pins to input
	DDRD = DDRD & 0xF0;
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	8a b9       	out	0x0a, r24	; 10
	DDRE = DDRE & 0x0F;
 258:	8d b1       	in	r24, 0x0d	; 13
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	8d b9       	out	0x0d, r24	; 13
	
	// INT0 - First Laser
	// Falling-edge interrupt
	EICRA |= _BV(ISC01);
 25e:	e9 e6       	ldi	r30, 0x69	; 105
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	82 60       	ori	r24, 0x02	; 2
 266:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC00));
 268:	80 81       	ld	r24, Z
 26a:	8e 7f       	andi	r24, 0xFE	; 254
 26c:	80 83       	st	Z, r24
	
	// INT1 - Metal Detector
	// Falling-edge interrupt
	EICRA |= _BV(ISC11);
 26e:	80 81       	ld	r24, Z
 270:	88 60       	ori	r24, 0x08	; 8
 272:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC10));
 274:	80 81       	ld	r24, Z
 276:	8b 7f       	andi	r24, 0xFB	; 251
 278:	80 83       	st	Z, r24
	
	// INT2 - Second Laser
	// Rising and falling edge interrupt
	EICRA &= ~(_BV(ISC21));
 27a:	80 81       	ld	r24, Z
 27c:	8f 7d       	andi	r24, 0xDF	; 223
 27e:	80 83       	st	Z, r24
	EICRA |= _BV(ISC20);
 280:	80 81       	ld	r24, Z
 282:	80 61       	ori	r24, 0x10	; 16
 284:	80 83       	st	Z, r24
	
	// INT3 - Exit Sensor
	// Falling-edge interrupt
	EICRA |= _BV(ISC31);
 286:	80 81       	ld	r24, Z
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	80 83       	st	Z, r24
	EICRA &= ~(_BV(ISC30));	
 28c:	80 81       	ld	r24, Z
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	80 83       	st	Z, r24
	
	// INT4 - Hall-effect sensor
	// Falling-edge interrupt
	EICRB |= _BV(ISC41);
 292:	ea e6       	ldi	r30, 0x6A	; 106
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC40));
 29c:	80 81       	ld	r24, Z
 29e:	8e 7f       	andi	r24, 0xFE	; 254
 2a0:	80 83       	st	Z, r24
	
	// INT5 - Button2
	// Falling-edge interrupt
	EICRB |= _BV(ISC51);
 2a2:	80 81       	ld	r24, Z
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC50));
 2a8:	80 81       	ld	r24, Z
 2aa:	8b 7f       	andi	r24, 0xFB	; 251
 2ac:	80 83       	st	Z, r24
	
	// INT6 - Button1
	// Falling-edge interrupt
	EICRB |= _BV(ISC61);
 2ae:	80 81       	ld	r24, Z
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	80 83       	st	Z, r24
	EICRB &= ~(_BV(ISC60));
 2b4:	80 81       	ld	r24, Z
 2b6:	8f 7e       	andi	r24, 0xEF	; 239
 2b8:	80 83       	st	Z, r24
	
	
	// Enable interrupts
	EIMSK |= 0b01111111;
 2ba:	8d b3       	in	r24, 0x1d	; 29
 2bc:	8f 67       	ori	r24, 0x7F	; 127
 2be:	8d bb       	out	0x1d, r24	; 29
	EIFR |= 0b01111111;
 2c0:	8c b3       	in	r24, 0x1c	; 28
 2c2:	8f 67       	ori	r24, 0x7F	; 127
 2c4:	8c bb       	out	0x1c, r24	; 28
	sei();
 2c6:	78 94       	sei
}
 2c8:	08 95       	ret

000002ca <makeDecision>:

void makeDecision(int index) {
	if(ringBuf[index].reflSamples < REFL_MIN_SAMPLES) return; // TODO: goes to error
 2ca:	fc 01       	movw	r30, r24
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	e8 0f       	add	r30, r24
 2d6:	f9 1f       	adc	r31, r25
 2d8:	e3 5f       	subi	r30, 0xF3	; 243
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	23 81       	ldd	r18, Z+3	; 0x03
 2de:	34 81       	ldd	r19, Z+4	; 0x04
 2e0:	33 23       	and	r19, r19
 2e2:	cc f0       	brlt	.+50     	; 0x316 <makeDecision+0x4c>
	char refl = ringBuf[index].avgRefl;
 2e4:	fc 01       	movw	r30, r24
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	ee 0f       	add	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	e8 0f       	add	r30, r24
 2f0:	f9 1f       	adc	r31, r25
 2f2:	e3 5f       	subi	r30, 0xF3	; 243
 2f4:	fe 4f       	sbci	r31, 0xFE	; 254
	if((refl < STEEL_MAX) && (refl > STEEL_MIN)) {
 2f6:	22 81       	ldd	r18, Z+2	; 0x02
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	2e 3f       	cpi	r18, 0xFE	; 254
 2fc:	60 f4       	brcc	.+24     	; 0x316 <makeDecision+0x4c>
	}
	if((refl < BLACK_MAX) && (refl > BLACK_MIN)) {
		ringBuf[index].type = BLACK;
	}
	if((refl < WHITE_MAX) && (refl > WHITE_MIN)) {
		ringBuf[index].type = WHITE;
 2fe:	fc 01       	movw	r30, r24
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	ee 0f       	add	r30, r30
 306:	ff 1f       	adc	r31, r31
 308:	8e 0f       	add	r24, r30
 30a:	9f 1f       	adc	r25, r31
 30c:	fc 01       	movw	r30, r24
 30e:	e3 5f       	subi	r30, 0xF3	; 243
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <firstLaserHandler>:

/* void firstLaserHandler()
   Purpose: handler for the first laser
   */
void firstLaserHandler() {
	currentMetal = newRingBufItem();
 318:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <newRingBufItem>
 31c:	90 93 50 02 	sts	0x0250, r25
 320:	80 93 4f 02 	sts	0x024F, r24
}
 324:	08 95       	ret

00000326 <metalHandler>:

/* void metalHandler()
   Purpose: handler for the inductive sensor
   */
void metalHandler() {
	ringBuf[currentMetal].metal = 1;
 326:	80 91 4f 02 	lds	r24, 0x024F
 32a:	90 91 50 02 	lds	r25, 0x0250
 32e:	fc 01       	movw	r30, r24
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	8e 0f       	add	r24, r30
 33a:	9f 1f       	adc	r25, r31
 33c:	fc 01       	movw	r30, r24
 33e:	e3 5f       	subi	r30, 0xF3	; 243
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	81 83       	std	Z+1, r24	; 0x01
}
 346:	08 95       	ret

00000348 <secondLaserHandler>:
/* void secondLaserHandler()
   Purpose: on RE completes the inductive stage and starts
   the reflectivity stage.
   on FE completes the reflective stage */
void secondLaserHandler() {
	if(ADC_is_running == 1) {
 348:	80 91 04 01 	lds	r24, 0x0104
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	49 f4       	brne	.+18     	; 0x362 <secondLaserHandler+0x1a>
		// stop ADC
		stopADC();
 350:	0e 94 8d 00 	call	0x11a	; 0x11a <stopADC>
		makeDecision(currentRefl);
 354:	80 91 09 01 	lds	r24, 0x0109
 358:	90 91 0a 01 	lds	r25, 0x010A
 35c:	0e 94 65 01 	call	0x2ca	; 0x2ca <makeDecision>
 360:	08 95       	ret
		// TODO
	} else {
		currentRefl = currentMetal;
 362:	80 91 4f 02 	lds	r24, 0x024F
 366:	90 91 50 02 	lds	r25, 0x0250
 36a:	90 93 0a 01 	sts	0x010A, r25
 36e:	80 93 09 01 	sts	0x0109, r24
		startADC();
 372:	0e 94 83 00 	call	0x106	; 0x106 <startADC>
 376:	08 95       	ret

00000378 <exitHandler>:
/* void exitHandler()
   Purpose: handles the exit sensor
   */
void exitHandler() {
	// is there an item on the queue?
	if(bufLength==0) return; // Throw an error here
 378:	80 91 4d 02 	lds	r24, 0x024D
 37c:	90 91 4e 02 	lds	r25, 0x024E
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	09 f4       	brne	.+2      	; 0x386 <exitHandler+0xe>
 384:	46 c0       	rjmp	.+140    	; 0x412 <exitHandler+0x9a>
	// are we in position?
	switch(ringBuf[bufLength].type) {
 386:	fc 01       	movw	r30, r24
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	8e 0f       	add	r24, r30
 392:	9f 1f       	adc	r25, r31
 394:	fc 01       	movw	r30, r24
 396:	e3 5f       	subi	r30, 0xF3	; 243
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 81       	ld	r24, Z
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	39 f1       	breq	.+78     	; 0x3ee <exitHandler+0x76>
 3a0:	83 30       	cpi	r24, 0x03	; 3
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <exitHandler+0x32>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	69 f5       	brne	.+90     	; 0x402 <exitHandler+0x8a>
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <exitHandler+0x3c>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	61 f0       	breq	.+24     	; 0x3c6 <exitHandler+0x4e>
 3ae:	84 30       	cpi	r24, 0x04	; 4
 3b0:	41 f5       	brne	.+80     	; 0x402 <exitHandler+0x8a>
 3b2:	13 c0       	rjmp	.+38     	; 0x3da <exitHandler+0x62>
		case BLACK:
			if(steps==BLACK_POSITION) {
 3b4:	80 91 53 02 	lds	r24, 0x0253
 3b8:	90 91 54 02 	lds	r25, 0x0254
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	09 f5       	brne	.+66     	; 0x402 <exitHandler+0x8a>
				popBuf();
 3c0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <popBuf>
				return;
 3c4:	08 95       	ret
			}
			break;
		case STEEL:
			if(steps==STEEL_POSITION) {
 3c6:	80 91 53 02 	lds	r24, 0x0253
 3ca:	90 91 54 02 	lds	r25, 0x0254
 3ce:	86 39       	cpi	r24, 0x96	; 150
 3d0:	91 05       	cpc	r25, r1
 3d2:	b9 f4       	brne	.+46     	; 0x402 <exitHandler+0x8a>
				popBuf();
 3d4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <popBuf>
				return;
 3d8:	08 95       	ret
			}
			break;
		case ALUMINUM:
			if(steps==ALUMINUM_POSIITION) {
 3da:	80 91 53 02 	lds	r24, 0x0253
 3de:	90 91 54 02 	lds	r25, 0x0254
 3e2:	82 33       	cpi	r24, 0x32	; 50
 3e4:	91 05       	cpc	r25, r1
 3e6:	69 f4       	brne	.+26     	; 0x402 <exitHandler+0x8a>
				popBuf();
 3e8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <popBuf>
				return;
 3ec:	08 95       	ret
			}
			break;
		case WHITE:
			if(steps==WHITE_POSITION) {
 3ee:	80 91 53 02 	lds	r24, 0x0253
 3f2:	90 91 54 02 	lds	r25, 0x0254
 3f6:	84 36       	cpi	r24, 0x64	; 100
 3f8:	91 05       	cpc	r25, r1
 3fa:	19 f4       	brne	.+6      	; 0x402 <exitHandler+0x8a>
				popBuf();
 3fc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <popBuf>
				return;
 400:	08 95       	ret
		default:
			break;
	}			
	// we got here, so we're not at the correct position yet.
	// stop the motor
	setMotorBrake();
 402:	0e 94 1b 01 	call	0x236	; 0x236 <setMotorBrake>
	// set a flag to let the stepper know we're waiting
	motorWaitForStepper = 1;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	90 93 06 01 	sts	0x0106, r25
 40e:	80 93 05 01 	sts	0x0105, r24
 412:	08 95       	ret

00000414 <__vector_1>:

/* ISR(INT0_vect)
   Purpose: Falling-edge interrupt vector
   for FIRST LASER
   */
ISR(INT0_vect){
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
	writeDecInt(0);
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
	firstLaserHandler();
 442:	0e 94 8c 01 	call	0x318	; 0x318 <firstLaserHandler>
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	bf 91       	pop	r27
 44c:	af 91       	pop	r26
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	7f 91       	pop	r23
 454:	6f 91       	pop	r22
 456:	5f 91       	pop	r21
 458:	4f 91       	pop	r20
 45a:	3f 91       	pop	r19
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__vector_2>:

/* ISR(INT1_vect)
   Purpose: Falling-edge interrupt vector
   for INDUCTIVE SENSOR
   */
ISR(INT1_vect){
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	0b b6       	in	r0, 0x3b	; 59
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	writeDecInt(1);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
	metalHandler();
 49a:	0e 94 93 01 	call	0x326	; 0x326 <metalHandler>
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0b be       	out	0x3b, r0	; 59
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_3>:

/* ISR(INT2_vect)
   Purpose: Rising and falling-edge interrupt
   vector for SECOND LASER
   */
ISR(INT2_vect){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	0b b6       	in	r0, 0x3b	; 59
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 93       	push	r18
 4d4:	3f 93       	push	r19
 4d6:	4f 93       	push	r20
 4d8:	5f 93       	push	r21
 4da:	6f 93       	push	r22
 4dc:	7f 93       	push	r23
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
	secondLaserHandler();
 4ea:	0e 94 a4 01 	call	0x348	; 0x348 <secondLaserHandler>
	writeDecInt(2);
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	0f 90       	pop	r0
 510:	0b be       	out	0x3b, r0	; 59
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_4>:

/* ISR(INT3_vect)
   Purpose: Falling-edge interrupt vector
   for EXIT SENSOR
   */
ISR(INT3_vect) {
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	0b b6       	in	r0, 0x3b	; 59
 526:	0f 92       	push	r0
 528:	11 24       	eor	r1, r1
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
	exitHandler();
 542:	0e 94 bc 01 	call	0x378	; 0x378 <exitHandler>
	writeDecInt(3);
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
}
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	7f 91       	pop	r23
 55c:	6f 91       	pop	r22
 55e:	5f 91       	pop	r21
 560:	4f 91       	pop	r20
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0b be       	out	0x3b, r0	; 59
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_5>:

/* ISR(INT4_vect)
   Purpose: Falling-edge interrupt vector
   for HALL EFFECT SENSOR
   */
ISR(INT4_vect) {
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	0b b6       	in	r0, 0x3b	; 59
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	2f 93       	push	r18
 584:	3f 93       	push	r19
 586:	4f 93       	push	r20
 588:	5f 93       	push	r21
 58a:	6f 93       	push	r22
 58c:	7f 93       	push	r23
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
	hallLow = 1;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	80 93 55 02 	sts	0x0255, r24
	writeDecInt(4);
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
}
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	bf 91       	pop	r27
 5ae:	af 91       	pop	r26
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	7f 91       	pop	r23
 5b6:	6f 91       	pop	r22
 5b8:	5f 91       	pop	r21
 5ba:	4f 91       	pop	r20
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0b be       	out	0x3b, r0	; 59
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_6>:

/* ISR(INT5_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 2
   */
ISR(INT5_vect) {
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	0b b6       	in	r0, 0x3b	; 59
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	3f 93       	push	r19
 5e0:	4f 93       	push	r20
 5e2:	5f 93       	push	r21
 5e4:	6f 93       	push	r22
 5e6:	7f 93       	push	r23
 5e8:	8f 93       	push	r24
 5ea:	9f 93       	push	r25
 5ec:	af 93       	push	r26
 5ee:	bf 93       	push	r27
 5f0:	ef 93       	push	r30
 5f2:	ff 93       	push	r31
	writeDecInt(5);
 5f4:	85 e0       	ldi	r24, 0x05	; 5
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0b be       	out	0x3b, r0	; 59
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <__vector_7>:

/* ISR(INT6_vect)
   Purpose: Falling-edge interrupt vector
   for BUTTON 1
   */
ISR(INT6_vect){
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	0b b6       	in	r0, 0x3b	; 59
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
	writeDecInt(6);
 648:	86 e0       	ldi	r24, 0x06	; 6
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <writeDecInt>
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0b be       	out	0x3b, r0	; 59
 66c:	0f 90       	pop	r0
 66e:	0f be       	out	0x3f, r0	; 63
 670:	0f 90       	pop	r0
 672:	1f 90       	pop	r1
 674:	18 95       	reti

00000676 <main>:

int main(void)
{
	// Set the dev board's clock speed to the external oscillator with
	// no prescaler (8MHz)
	CLKPR = (1<<CLKPCE);
 676:	e1 e6       	ldi	r30, 0x61	; 97
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	80 83       	st	Z, r24
	CLKPR = 0;
 67e:	10 82       	st	Z, r1
	
	// Initialize hardware timer
	initializeTimer();
 680:	0e 94 93 05 	call	0xb26	; 0xb26 <initializeTimer>
	
	// enable output
	DDRA = 0xFF;
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	81 b9       	out	0x01, r24	; 1

	// vector interrupts
	vectorInterrupts();
 688:	0e 94 26 01 	call	0x24c	; 0x24c <vectorInterrupts>

	// zero stepper
	while(hallLow == 0){
 68c:	80 91 55 02 	lds	r24, 0x0255
 690:	88 23       	and	r24, r24
 692:	49 f4       	brne	.+18     	; 0x6a6 <main+0x30>
		stepTime(25,0);
 694:	89 e1       	ldi	r24, 0x19	; 25
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	0e 94 cd 04 	call	0x99a	; 0x99a <stepTime>

	// vector interrupts
	vectorInterrupts();

	// zero stepper
	while(hallLow == 0){
 69e:	80 91 55 02 	lds	r24, 0x0255
 6a2:	88 23       	and	r24, r24
 6a4:	b9 f3       	breq	.-18     	; 0x694 <main+0x1e>
		stepTime(25,0);
	}
	// set steps from zero to 0 and respective position
	steps = BLACK_POSITION;
 6a6:	10 92 54 02 	sts	0x0254, r1
 6aa:	10 92 53 02 	sts	0x0253, r1
	// reset hall effect check
	hallLow = 0;
 6ae:	10 92 55 02 	sts	0x0255, r1

	setupADC();
 6b2:	0e 94 6e 00 	call	0xdc	; 0xdc <setupADC>
	startADC();
 6b6:	0e 94 83 00 	call	0x106	; 0x106 <startADC>

	// wait one second
	delaynms(1000);
 6ba:	88 ee       	ldi	r24, 0xE8	; 232
 6bc:	93 e0       	ldi	r25, 0x03	; 3
 6be:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
	
	// start the motor
	setupMotor();
 6c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <setupMotor>
	setMotorFwd();
 6c6:	0e 94 11 01 	call	0x222	; 0x222 <setMotorFwd>

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
			switch(ringBuf[ringTop].type) {
 6ca:	cd e0       	ldi	r28, 0x0D	; 13
 6cc:	d1 e0       	ldi	r29, 0x01	; 1
	setupMotor();
	setMotorFwd();

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
 6ce:	40 91 4d 02 	lds	r20, 0x024D
 6d2:	50 91 4e 02 	lds	r21, 0x024E
			switch(ringBuf[ringTop].type) {
 6d6:	80 91 0b 01 	lds	r24, 0x010B
 6da:	90 91 0c 01 	lds	r25, 0x010C
 6de:	9c 01       	movw	r18, r24
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	22 0f       	add	r18, r18
 6e6:	33 1f       	adc	r19, r19
 6e8:	82 0f       	add	r24, r18
 6ea:	93 1f       	adc	r25, r19
 6ec:	fe 01       	movw	r30, r28
 6ee:	e8 0f       	add	r30, r24
 6f0:	f9 1f       	adc	r31, r25
 6f2:	80 81       	ld	r24, Z
	setupMotor();
	setMotorFwd();

	while(1) {
		// check the next item off the conveyer belt, rotate to the correct position
		if(bufLength > 0) {
 6f4:	14 16       	cp	r1, r20
 6f6:	15 06       	cpc	r1, r21
 6f8:	84 f5       	brge	.+96     	; 0x75a <main+0xe4>
			switch(ringBuf[ringTop].type) {
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	99 f0       	breq	.+38     	; 0x724 <main+0xae>
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	18 f4       	brcc	.+6      	; 0x708 <main+0x92>
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	b9 f7       	brne	.-18     	; 0x6f4 <main+0x7e>
 706:	05 c0       	rjmp	.+10     	; 0x712 <main+0x9c>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	a9 f0       	breq	.+42     	; 0x736 <main+0xc0>
 70c:	84 30       	cpi	r24, 0x04	; 4
 70e:	91 f7       	brne	.-28     	; 0x6f4 <main+0x7e>
 710:	1b c0       	rjmp	.+54     	; 0x748 <main+0xd2>
				case BLACK:
					stepperMoveTo(BLACK_POSITION);
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 4b 05 	call	0xa96	; 0xa96 <stepperMoveTo>
					delaynms(500);
 71a:	84 ef       	ldi	r24, 0xF4	; 244
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
					break;
 722:	d5 cf       	rjmp	.-86     	; 0x6ce <main+0x58>
				case WHITE:
					stepperMoveTo(WHITE_POSITION);
 724:	84 e6       	ldi	r24, 0x64	; 100
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 4b 05 	call	0xa96	; 0xa96 <stepperMoveTo>
					delaynms(500);
 72c:	84 ef       	ldi	r24, 0xF4	; 244
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
					break;
 734:	cc cf       	rjmp	.-104    	; 0x6ce <main+0x58>
				case STEEL:
					stepperMoveTo(STEEL_POSITION);
 736:	86 e9       	ldi	r24, 0x96	; 150
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 4b 05 	call	0xa96	; 0xa96 <stepperMoveTo>
					delaynms(500);
 73e:	84 ef       	ldi	r24, 0xF4	; 244
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
					break;
 746:	c3 cf       	rjmp	.-122    	; 0x6ce <main+0x58>
				case ALUMINUM:
					stepperMoveTo(ALUMINUM_POSIITION);
 748:	82 e3       	ldi	r24, 0x32	; 50
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 4b 05 	call	0xa96	; 0xa96 <stepperMoveTo>
					delaynms(500);
 750:	84 ef       	ldi	r24, 0xF4	; 244
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
					break;
 758:	ba cf       	rjmp	.-140    	; 0x6ce <main+0x58>
 75a:	ff cf       	rjmp	.-2      	; 0x75a <main+0xe4>

0000075c <initRingBuf>:

/* void initRingBuf()
   Purpose: initializes the ring buffer
   */
void initRingBuf() {
	ringTop = 0;
 75c:	10 92 0c 01 	sts	0x010C, r1
 760:	10 92 0b 01 	sts	0x010B, r1
	ringBottom = 0;
 764:	10 92 08 01 	sts	0x0108, r1
 768:	10 92 07 01 	sts	0x0107, r1
	currentMetal = 0;
 76c:	10 92 50 02 	sts	0x0250, r1
 770:	10 92 4f 02 	sts	0x024F, r1
	currentRefl = 0;
 774:	10 92 0a 01 	sts	0x010A, r1
 778:	10 92 09 01 	sts	0x0109, r1
	bufLength = 0;
 77c:	10 92 4e 02 	sts	0x024E, r1
 780:	10 92 4d 02 	sts	0x024D, r1
}
 784:	08 95       	ret

00000786 <getBufOffset>:
   Purpose: gets the index which is an integer offset of the given
   index.
   */
int getBufOffset(int index, int offset) {
	// case for wrapping around top end
	if((index + offset) > (RING_BUF_SIZE - 1)) {
 786:	86 0f       	add	r24, r22
 788:	97 1f       	adc	r25, r23
 78a:	80 34       	cpi	r24, 0x40	; 64
 78c:	91 05       	cpc	r25, r1
 78e:	1c f0       	brlt	.+6      	; 0x796 <getBufOffset+0x10>
		return ((index + offset) - RING_BUF_SIZE);
 790:	80 54       	subi	r24, 0x40	; 64
 792:	90 40       	sbci	r25, 0x00	; 0
 794:	08 95       	ret
	}
	// case for wrapping around bottom end
	if((index + offset) < 0) {
 796:	99 23       	and	r25, r25
 798:	14 f4       	brge	.+4      	; 0x79e <getBufOffset+0x18>
		return ((index + offset) + RING_BUF_SIZE);
 79a:	80 5c       	subi	r24, 0xC0	; 192
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
	}

	// didn't wrap
	return (index + offset);
 79e:	08 95       	ret

000007a0 <popBuf>:
}

/* void popBuf()
   Purpose: pops the top item off the buffer
   */
void popBuf() {
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
	// if the buffer is empty, break
	if (bufLength == 0) return;
 7a4:	c0 91 4d 02 	lds	r28, 0x024D
 7a8:	d0 91 4e 02 	lds	r29, 0x024E
 7ac:	20 97       	sbiw	r28, 0x00	; 0
 7ae:	89 f0       	breq	.+34     	; 0x7d2 <popBuf+0x32>
	ringTop = getBufOffset(ringTop, 1);
 7b0:	80 91 0b 01 	lds	r24, 0x010B
 7b4:	90 91 0c 01 	lds	r25, 0x010C
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	0e 94 c3 03 	call	0x786	; 0x786 <getBufOffset>
 7c0:	90 93 0c 01 	sts	0x010C, r25
 7c4:	80 93 0b 01 	sts	0x010B, r24
	bufLength--;
 7c8:	21 97       	sbiw	r28, 0x01	; 1
 7ca:	d0 93 4e 02 	sts	0x024E, r29
 7ce:	c0 93 4d 02 	sts	0x024D, r28
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <newRingBufItem>:

/* int newRingBufItem()
   Purpose: adds an item to the ring buffer and returns its index
   */
int newRingBufItem() {
	ringBottom = getBufOffset(ringBottom, 1);
 7d8:	80 91 07 01 	lds	r24, 0x0107
 7dc:	90 91 08 01 	lds	r25, 0x0108
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	0e 94 c3 03 	call	0x786	; 0x786 <getBufOffset>
 7e8:	90 93 08 01 	sts	0x0108, r25
 7ec:	80 93 07 01 	sts	0x0107, r24
	bufLength++;
 7f0:	20 91 4d 02 	lds	r18, 0x024D
 7f4:	30 91 4e 02 	lds	r19, 0x024E
 7f8:	2f 5f       	subi	r18, 0xFF	; 255
 7fa:	3f 4f       	sbci	r19, 0xFF	; 255
 7fc:	30 93 4e 02 	sts	0x024E, r19
 800:	20 93 4d 02 	sts	0x024D, r18
	ringBuf[ringBottom].avgRefl = 0;
 804:	fc 01       	movw	r30, r24
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31
 80e:	e8 0f       	add	r30, r24
 810:	f9 1f       	adc	r31, r25
 812:	e3 5f       	subi	r30, 0xF3	; 243
 814:	fe 4f       	sbci	r31, 0xFE	; 254
 816:	12 82       	std	Z+2, r1	; 0x02
	ringBuf[ringBottom].reflSamples = 0;
 818:	14 82       	std	Z+4, r1	; 0x04
 81a:	13 82       	std	Z+3, r1	; 0x03
	ringBuf[ringBottom].metal = 0;
 81c:	11 82       	std	Z+1, r1	; 0x01
	ringBuf[ringBottom].type = UNDEF;
 81e:	10 82       	st	Z, r1
	return ringBottom;
}
 820:	08 95       	ret

00000822 <getPatFomHex>:
   Purpose: looks up the appropriate pattern for 
   the seven segment display for a given number.
   If input is not between 0-F, returns blank pattern
   */
char getPatFomHex(char number) {
	switch(number) {
 822:	87 30       	cpi	r24, 0x07	; 7
 824:	71 f1       	breq	.+92     	; 0x882 <getPatFomHex+0x60>
 826:	88 30       	cpi	r24, 0x08	; 8
 828:	70 f4       	brcc	.+28     	; 0x846 <getPatFomHex+0x24>
 82a:	83 30       	cpi	r24, 0x03	; 3
 82c:	11 f1       	breq	.+68     	; 0x872 <getPatFomHex+0x50>
 82e:	84 30       	cpi	r24, 0x04	; 4
 830:	28 f4       	brcc	.+10     	; 0x83c <getPatFomHex+0x1a>
 832:	81 30       	cpi	r24, 0x01	; 1
 834:	d1 f1       	breq	.+116    	; 0x8aa <getPatFomHex+0x88>
 836:	82 30       	cpi	r24, 0x02	; 2
 838:	d0 f4       	brcc	.+52     	; 0x86e <getPatFomHex+0x4c>
 83a:	17 c0       	rjmp	.+46     	; 0x86a <getPatFomHex+0x48>
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	e9 f0       	breq	.+58     	; 0x87a <getPatFomHex+0x58>
 840:	86 30       	cpi	r24, 0x06	; 6
 842:	e8 f4       	brcc	.+58     	; 0x87e <getPatFomHex+0x5c>
 844:	18 c0       	rjmp	.+48     	; 0x876 <getPatFomHex+0x54>
 846:	8b 30       	cpi	r24, 0x0B	; 11
 848:	21 f1       	breq	.+72     	; 0x892 <getPatFomHex+0x70>
 84a:	8c 30       	cpi	r24, 0x0C	; 12
 84c:	28 f4       	brcc	.+10     	; 0x858 <getPatFomHex+0x36>
 84e:	89 30       	cpi	r24, 0x09	; 9
 850:	e1 f0       	breq	.+56     	; 0x88a <getPatFomHex+0x68>
 852:	8a 30       	cpi	r24, 0x0A	; 10
 854:	e0 f4       	brcc	.+56     	; 0x88e <getPatFomHex+0x6c>
 856:	17 c0       	rjmp	.+46     	; 0x886 <getPatFomHex+0x64>
 858:	8d 30       	cpi	r24, 0x0D	; 13
 85a:	f9 f0       	breq	.+62     	; 0x89a <getPatFomHex+0x78>
 85c:	8d 30       	cpi	r24, 0x0D	; 13
 85e:	d8 f0       	brcs	.+54     	; 0x896 <getPatFomHex+0x74>
 860:	8e 30       	cpi	r24, 0x0E	; 14
 862:	e9 f0       	breq	.+58     	; 0x89e <getPatFomHex+0x7c>
 864:	8f 30       	cpi	r24, 0x0F	; 15
 866:	f9 f4       	brne	.+62     	; 0x8a6 <getPatFomHex+0x84>
 868:	1c c0       	rjmp	.+56     	; 0x8a2 <getPatFomHex+0x80>
		case 0:
			return 0b11111100;
 86a:	8c ef       	ldi	r24, 0xFC	; 252
 86c:	08 95       	ret
			break;
		case 1:
			return 0b01100000;
			break;
		case 2:
			return 0b11011010;
 86e:	8a ed       	ldi	r24, 0xDA	; 218
 870:	08 95       	ret
			break;
		case 3:
			return 0b11110010;
 872:	82 ef       	ldi	r24, 0xF2	; 242
 874:	08 95       	ret
			break;
		case 4:
			return 0b01100110;
 876:	86 e6       	ldi	r24, 0x66	; 102
 878:	08 95       	ret
			break;
		case 5:
			return 0b10110110;
 87a:	86 eb       	ldi	r24, 0xB6	; 182
 87c:	08 95       	ret
			break;
		case 6:
			return 0b10111110;
 87e:	8e eb       	ldi	r24, 0xBE	; 190
 880:	08 95       	ret
			break;
		case 7:
			return 0b11100000;
 882:	80 ee       	ldi	r24, 0xE0	; 224
 884:	08 95       	ret
			break;
		case 8:
			return 0b11111110;
 886:	8e ef       	ldi	r24, 0xFE	; 254
 888:	08 95       	ret
			break;
		case 9:
			return 0b11100110;
 88a:	86 ee       	ldi	r24, 0xE6	; 230
 88c:	08 95       	ret
			break;
		case 10:
			return 0b11101110;
 88e:	8e ee       	ldi	r24, 0xEE	; 238
 890:	08 95       	ret
			break;
		case 11:
			return 0b00111110;
 892:	8e e3       	ldi	r24, 0x3E	; 62
 894:	08 95       	ret
			break;
		case 12:
			return 0b10011100;
 896:	8c e9       	ldi	r24, 0x9C	; 156
 898:	08 95       	ret
			break;
		case 13:
			return 0b01111010;
 89a:	8a e7       	ldi	r24, 0x7A	; 122
 89c:	08 95       	ret
			break;
		case 14:
			return 0b10011110;
 89e:	8e e9       	ldi	r24, 0x9E	; 158
 8a0:	08 95       	ret
			break;
		case 15:
			return 0b10001110;
 8a2:	8e e8       	ldi	r24, 0x8E	; 142
 8a4:	08 95       	ret
		default:
			break;			
	}
	return 0x00;
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	08 95       	ret
	switch(number) {
		case 0:
			return 0b11111100;
			break;
		case 1:
			return 0b01100000;
 8aa:	80 e6       	ldi	r24, 0x60	; 96
			return 0b10001110;
		default:
			break;			
	}
	return 0x00;
}
 8ac:	08 95       	ret

000008ae <writePattern>:
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 8ae:	20 e0       	ldi	r18, 0x00	; 0
 8b0:	30 e0       	ldi	r19, 0x00	; 0
		// assert the data
		char databit = 0x01 & (pattern >> i);
 8b2:	90 e0       	ldi	r25, 0x00	; 0
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 8b4:	62 b1       	in	r22, 0x02	; 2
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
		// assert the data
		char databit = 0x01 & (pattern >> i);
 8b6:	ac 01       	movw	r20, r24
 8b8:	02 2e       	mov	r0, r18
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <writePattern+0x12>
 8bc:	55 95       	asr	r21
 8be:	47 95       	ror	r20
 8c0:	0a 94       	dec	r0
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <writePattern+0xe>
 8c4:	41 70       	andi	r20, 0x01	; 1
		PORTA = (PORTA & 0b10111111) | (databit << 6);
 8c6:	42 95       	swap	r20
 8c8:	44 0f       	add	r20, r20
 8ca:	44 0f       	add	r20, r20
 8cc:	40 7c       	andi	r20, 0xC0	; 192
 8ce:	56 2f       	mov	r21, r22
 8d0:	5f 7b       	andi	r21, 0xBF	; 191
 8d2:	45 2b       	or	r20, r21
 8d4:	42 b9       	out	0x02, r20	; 2
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
 8d6:	17 9a       	sbi	0x02, 7	; 2
		// falling edge
		PORTA = (PORTA & 0b01111111);
 8d8:	17 98       	cbi	0x02, 7	; 2
/* void writePattern(char pattern)
   Purpose: Bit-bangs out an integer over
   the serial interface to the display
   */
void writePattern(char pattern) {
	for (int i=0; i<8; i++) {
 8da:	2f 5f       	subi	r18, 0xFF	; 255
 8dc:	3f 4f       	sbci	r19, 0xFF	; 255
 8de:	28 30       	cpi	r18, 0x08	; 8
 8e0:	31 05       	cpc	r19, r1
 8e2:	41 f7       	brne	.-48     	; 0x8b4 <writePattern+0x6>
		// rising edge
		PORTA = (PORTA & 0b01111111) | 0b10000000;
		// falling edge
		PORTA = (PORTA & 0b01111111);
	}
}
 8e4:	08 95       	ret

000008e6 <writeDecInt>:

/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	c3 e0       	ldi	r28, 0x03	; 3
 8f4:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 10));
 8f6:	0f 2e       	mov	r0, r31
 8f8:	fa e0       	ldi	r31, 0x0A	; 10
 8fa:	ef 2e       	mov	r14, r31
 8fc:	ff 24       	eor	r15, r15
 8fe:	f0 2d       	mov	r31, r0
 900:	b7 01       	movw	r22, r14
 902:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
 906:	16 2f       	mov	r17, r22
 908:	07 2f       	mov	r16, r23
 90a:	0e 94 11 04 	call	0x822	; 0x822 <getPatFomHex>
 90e:	0e 94 57 04 	call	0x8ae	; 0x8ae <writePattern>
		number = number / 10;
 912:	81 2f       	mov	r24, r17
 914:	90 2f       	mov	r25, r16
 916:	21 97       	sbiw	r28, 0x01	; 1
/* void writeDecInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as decimal.
   */
void writeDecInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 918:	99 f7       	brne	.-26     	; 0x900 <writeDecInt+0x1a>
		writePattern(getPatFomHex(number % 10));
		number = number / 10;
	}
}
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	ff 90       	pop	r15
 924:	ef 90       	pop	r14
 926:	08 95       	ret

00000928 <writeHexInt>:

/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	ec 01       	movw	r28, r24
 936:	03 e0       	ldi	r16, 0x03	; 3
 938:	10 e0       	ldi	r17, 0x00	; 0
	for (int i=0; i < DISPLAY_DIGITS; i++) {
		writePattern(getPatFomHex(number % 16));
 93a:	ee 24       	eor	r14, r14
 93c:	ff 24       	eor	r15, r15
 93e:	68 94       	set
 940:	e4 f8       	bld	r14, 4
 942:	ce 01       	movw	r24, r28
 944:	b7 01       	movw	r22, r14
 946:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divmodhi4>
 94a:	0e 94 11 04 	call	0x822	; 0x822 <getPatFomHex>
 94e:	0e 94 57 04 	call	0x8ae	; 0x8ae <writePattern>
		number = number / 16;
 952:	ce 01       	movw	r24, r28
 954:	dd 23       	and	r29, r29
 956:	0c f4       	brge	.+2      	; 0x95a <writeHexInt+0x32>
 958:	0f 96       	adiw	r24, 0x0f	; 15
 95a:	ec 01       	movw	r28, r24
 95c:	d5 95       	asr	r29
 95e:	c7 95       	ror	r28
 960:	d5 95       	asr	r29
 962:	c7 95       	ror	r28
 964:	d5 95       	asr	r29
 966:	c7 95       	ror	r28
 968:	d5 95       	asr	r29
 96a:	c7 95       	ror	r28
 96c:	01 50       	subi	r16, 0x01	; 1
 96e:	10 40       	sbci	r17, 0x00	; 0
/* void writeHexInt(int number)
   Purpose: fills the seven segment display with
   an integer number, formatted as hexadecimal.
   */
void writeHexInt(int number) {
	for (int i=0; i < DISPLAY_DIGITS; i++) {
 970:	41 f7       	brne	.-48     	; 0x942 <writeHexInt+0x1a>
		writePattern(getPatFomHex(number % 16));
		number = number / 16;
	}
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	ff 90       	pop	r15
 97c:	ef 90       	pop	r14
 97e:	08 95       	ret

00000980 <initalizeStepper>:


// set initial values for stepper
void initalizeStepper() {
	// enable output
	DDRA |= 0b00111111;
 980:	81 b1       	in	r24, 0x01	; 1
 982:	8f 63       	ori	r24, 0x3F	; 63
 984:	81 b9       	out	0x01, r24	; 1
	currentState = 0;
 986:	10 92 52 02 	sts	0x0252, r1
 98a:	10 92 51 02 	sts	0x0251, r1
	PORTA = PORTA & (0b11000000|states[currentState]);
 98e:	82 b1       	in	r24, 0x02	; 2
 990:	80 7f       	andi	r24, 0xF0	; 240
 992:	82 b9       	out	0x02, r24	; 2
	hallLow = 0;
 994:	10 92 55 02 	sts	0x0255, r1
}
 998:	08 95       	ret

0000099a <stepTime>:


void stepTime(int stepTime, char direction) {
 99a:	cf 93       	push	r28
 99c:	c6 2f       	mov	r28, r22
	delaynms(stepTime);
 99e:	0e 94 99 05 	call	0xb32	; 0xb32 <delaynms>
	if(direction == 0) { //forward direction
 9a2:	cc 23       	and	r28, r28
 9a4:	11 f5       	brne	.+68     	; 0x9ea <stepTime+0x50>
		currentState++;
 9a6:	80 91 51 02 	lds	r24, 0x0251
 9aa:	90 91 52 02 	lds	r25, 0x0252
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	90 93 52 02 	sts	0x0252, r25
 9b4:	80 93 51 02 	sts	0x0251, r24
		if (currentState==4) currentState = 0;
 9b8:	84 30       	cpi	r24, 0x04	; 4
 9ba:	91 05       	cpc	r25, r1
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <stepTime+0x2c>
 9be:	10 92 52 02 	sts	0x0252, r1
 9c2:	10 92 51 02 	sts	0x0251, r1
		PORTA = PORTA & (0b11000000 | states[currentState]);
 9c6:	92 b1       	in	r25, 0x02	; 2
 9c8:	e0 91 51 02 	lds	r30, 0x0251
 9cc:	f0 91 52 02 	lds	r31, 0x0252
 9d0:	e0 50       	subi	r30, 0x00	; 0
 9d2:	ff 4f       	sbci	r31, 0xFF	; 255
 9d4:	80 81       	ld	r24, Z
 9d6:	80 6c       	ori	r24, 0xC0	; 192
 9d8:	89 23       	and	r24, r25
 9da:	82 b9       	out	0x02, r24	; 2
		steps++;
		if(hallLow = 1) {
			steps = 0;
 9dc:	10 92 54 02 	sts	0x0254, r1
 9e0:	10 92 53 02 	sts	0x0253, r1
			hallLow = 0;
 9e4:	10 92 55 02 	sts	0x0255, r1
 9e8:	24 c0       	rjmp	.+72     	; 0xa32 <stepTime+0x98>
		}
	}
	else { //reverse direction
		currentState--;
 9ea:	80 91 51 02 	lds	r24, 0x0251
 9ee:	90 91 52 02 	lds	r25, 0x0252
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	90 93 52 02 	sts	0x0252, r25
 9f8:	80 93 51 02 	sts	0x0251, r24
		if (currentState==-1) currentState = 3;
 9fc:	2f ef       	ldi	r18, 0xFF	; 255
 9fe:	8f 3f       	cpi	r24, 0xFF	; 255
 a00:	92 07       	cpc	r25, r18
 a02:	31 f4       	brne	.+12     	; 0xa10 <stepTime+0x76>
 a04:	83 e0       	ldi	r24, 0x03	; 3
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	90 93 52 02 	sts	0x0252, r25
 a0c:	80 93 51 02 	sts	0x0251, r24
		PORTA = PORTA & (0b11000000 | states[currentState]);
 a10:	92 b1       	in	r25, 0x02	; 2
 a12:	e0 91 51 02 	lds	r30, 0x0251
 a16:	f0 91 52 02 	lds	r31, 0x0252
 a1a:	e0 50       	subi	r30, 0x00	; 0
 a1c:	ff 4f       	sbci	r31, 0xFF	; 255
 a1e:	80 81       	ld	r24, Z
 a20:	80 6c       	ori	r24, 0xC0	; 192
 a22:	89 23       	and	r24, r25
 a24:	82 b9       	out	0x02, r24	; 2
		steps--;
		if(hallLow = 1) {
			steps = 0;
 a26:	10 92 54 02 	sts	0x0254, r1
 a2a:	10 92 53 02 	sts	0x0253, r1
			hallLow = 0;
 a2e:	10 92 55 02 	sts	0x0255, r1
		}				
	}
}
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

00000a36 <forwardSteps>:

int forwardSteps(int current, int target) {
	int stepsRequired;
	
	// no wrap around
	if(target > current) stepsRequired = abs(target - current);
 a36:	86 17       	cp	r24, r22
 a38:	97 07       	cpc	r25, r23
 a3a:	4c f4       	brge	.+18     	; 0xa4e <forwardSteps+0x18>
 a3c:	68 1b       	sub	r22, r24
 a3e:	79 0b       	sbc	r23, r25
 a40:	1a f4       	brpl	.+6      	; 0xa48 <forwardSteps+0x12>
 a42:	70 95       	com	r23
 a44:	61 95       	neg	r22
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	86 2f       	mov	r24, r22
 a4a:	97 2f       	mov	r25, r23
 a4c:	08 95       	ret
	
	// wrap arround
	else stepsRequired = abs(200 - (target - current));
 a4e:	86 1b       	sub	r24, r22
 a50:	97 0b       	sbc	r25, r23
 a52:	9c 01       	movw	r18, r24
 a54:	28 53       	subi	r18, 0x38	; 56
 a56:	3f 4f       	sbci	r19, 0xFF	; 255
 a58:	1a f4       	brpl	.+6      	; 0xa60 <forwardSteps+0x2a>
 a5a:	30 95       	com	r19
 a5c:	21 95       	neg	r18
 a5e:	3f 4f       	sbci	r19, 0xFF	; 255
 a60:	82 2f       	mov	r24, r18
 a62:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 a64:	08 95       	ret

00000a66 <reverseSteps>:

int reverseSteps(int current, int target) {
	int stepsRequired;
	
	// wrap around
	if(target < current) stepsRequired = abs(target - current);
 a66:	68 17       	cp	r22, r24
 a68:	79 07       	cpc	r23, r25
 a6a:	4c f4       	brge	.+18     	; 0xa7e <reverseSteps+0x18>
 a6c:	68 1b       	sub	r22, r24
 a6e:	79 0b       	sbc	r23, r25
 a70:	1a f4       	brpl	.+6      	; 0xa78 <reverseSteps+0x12>
 a72:	70 95       	com	r23
 a74:	61 95       	neg	r22
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	86 2f       	mov	r24, r22
 a7a:	97 2f       	mov	r25, r23
 a7c:	08 95       	ret

	// no wrap around
	else stepsRequired = abs(200 - (target - current));
 a7e:	86 1b       	sub	r24, r22
 a80:	97 0b       	sbc	r25, r23
 a82:	9c 01       	movw	r18, r24
 a84:	28 53       	subi	r18, 0x38	; 56
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	1a f4       	brpl	.+6      	; 0xa90 <reverseSteps+0x2a>
 a8a:	30 95       	com	r19
 a8c:	21 95       	neg	r18
 a8e:	3f 4f       	sbci	r19, 0xFF	; 255
 a90:	82 2f       	mov	r24, r18
 a92:	93 2f       	mov	r25, r19
	
	return stepsRequired;
}
 a94:	08 95       	ret

00000a96 <stepperMoveTo>:
		}				
	}
}

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
 a96:	ef 92       	push	r14
 a98:	ff 92       	push	r15
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	ec 01       	movw	r28, r24
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
 aa4:	e0 90 53 02 	lds	r14, 0x0253
 aa8:	f0 90 54 02 	lds	r15, 0x0254
 aac:	b7 01       	movw	r22, r14
 aae:	0e 94 1b 05 	call	0xa36	; 0xa36 <forwardSteps>
 ab2:	8c 01       	movw	r16, r24
 ab4:	ce 01       	movw	r24, r28
 ab6:	b7 01       	movw	r22, r14
 ab8:	0e 94 33 05 	call	0xa66	; 0xa66 <reverseSteps>
 abc:	ec 01       	movw	r28, r24
 abe:	08 17       	cp	r16, r24
 ac0:	19 07       	cpc	r17, r25
 ac2:	24 f0       	brlt	.+8      	; 0xacc <stepperMoveTo+0x36>
		}
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 ac4:	18 16       	cp	r1, r24
 ac6:	19 06       	cpc	r1, r25
 ac8:	7c f0       	brlt	.+30     	; 0xae8 <stepperMoveTo+0x52>
 aca:	17 c0       	rjmp	.+46     	; 0xafa <stepperMoveTo+0x64>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
		int j = forwardSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 acc:	10 16       	cp	r1, r16
 ace:	11 06       	cpc	r1, r17
 ad0:	a4 f4       	brge	.+40     	; 0xafa <stepperMoveTo+0x64>
			stepTime(15,0);
 ad2:	8f e0       	ldi	r24, 0x0F	; 15
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	60 e0       	ldi	r22, 0x00	; 0
 ad8:	0e 94 cd 04 	call	0x99a	; 0x99a <stepTime>

// function to calculate how stepper should rotate
void stepperMoveTo(int nextPosition){
	if(forwardSteps(nextPosition, steps) < reverseSteps(nextPosition, steps)) {
		int j = forwardSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 adc:	0f 5f       	subi	r16, 0xFF	; 255
 ade:	1f 4f       	sbci	r17, 0xFF	; 255
 ae0:	10 16       	cp	r1, r16
 ae2:	11 06       	cpc	r1, r17
 ae4:	b4 f3       	brlt	.-20     	; 0xad2 <stepperMoveTo+0x3c>
 ae6:	09 c0       	rjmp	.+18     	; 0xafa <stepperMoveTo+0x64>
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
			stepTime(15,0);
 ae8:	8f e0       	ldi	r24, 0x0F	; 15
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	60 e0       	ldi	r22, 0x00	; 0
 aee:	0e 94 cd 04 	call	0x99a	; 0x99a <stepTime>
		}
	}
	
	else {
		int j = reverseSteps(nextPosition, steps);
		for(int i = 0;i < j;j++) {
 af2:	21 96       	adiw	r28, 0x01	; 1
 af4:	1c 16       	cp	r1, r28
 af6:	1d 06       	cpc	r1, r29
 af8:	bc f3       	brlt	.-18     	; 0xae8 <stepperMoveTo+0x52>
			stepTime(15,0);
		}
	}
	
	if(motorWaitForStepper == 1) {
 afa:	80 91 05 01 	lds	r24, 0x0105
 afe:	90 91 06 01 	lds	r25, 0x0106
 b02:	81 30       	cpi	r24, 0x01	; 1
 b04:	91 05       	cpc	r25, r1
 b06:	41 f4       	brne	.+16     	; 0xb18 <stepperMoveTo+0x82>
		// start the motor back up
		setMotorFwd();
 b08:	0e 94 11 01 	call	0x222	; 0x222 <setMotorFwd>
		// clear the flag
		motorWaitForStepper = 0;
 b0c:	10 92 06 01 	sts	0x0106, r1
 b10:	10 92 05 01 	sts	0x0105, r1
		// fire the exit logic again
		exitHandler();
 b14:	0e 94 bc 01 	call	0x378	; 0x378 <exitHandler>
	}
}
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
 b20:	ff 90       	pop	r15
 b22:	ef 90       	pop	r14
 b24:	08 95       	ret

00000b26 <initializeTimer>:
#include <avr/io.h>

void initializeTimer() {
	// bitwise OR to set timer/counter control register
	// to cpu clock, pure timer.
	TCCR1B|=_BV(CS10);
 b26:	e1 e8       	ldi	r30, 0x81	; 129
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	81 60       	ori	r24, 0x01	; 1
 b2e:	80 83       	st	Z, r24
} 
 b30:	08 95       	ret

00000b32 <delaynms>:

void delaynms(int n)   // delay milliseconds
{
 b32:	9c 01       	movw	r18, r24
	// Set waveform generator bits to 0100 (count up and
	// reset on hit)
	TCCR1B |=_BV(WGM12);
 b34:	e1 e8       	ldi	r30, 0x81	; 129
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	88 60       	ori	r24, 0x08	; 8
 b3c:	80 83       	st	Z, r24
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;
 b3e:	80 81       	ld	r24, Z
 b40:	83 60       	ori	r24, 0x03	; 3
 b42:	80 83       	st	Z, r24

	for(int i=0; i<n; i++) {
 b44:	12 16       	cp	r1, r18
 b46:	13 06       	cpc	r1, r19
 b48:	a4 f4       	brge	.+40     	; 0xb72 <delaynms+0x40>
 b4a:	80 e0       	ldi	r24, 0x00	; 0
 b4c:	90 e0       	ldi	r25, 0x00	; 0
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 b4e:	e8 e8       	ldi	r30, 0x88	; 136
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	4d e7       	ldi	r20, 0x7D	; 125
 b54:	50 e0       	ldi	r21, 0x00	; 0

		// set initial value to zero
		TCNT1 = 0;
 b56:	a4 e8       	ldi	r26, 0x84	; 132
 b58:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
		// set the output compare register
		// to 1 ms
		OCR1A = 125;
 b5a:	51 83       	std	Z+1, r21	; 0x01
 b5c:	40 83       	st	Z, r20

		// set initial value to zero
		TCNT1 = 0;
 b5e:	11 96       	adiw	r26, 0x01	; 1
 b60:	1c 92       	st	X, r1
 b62:	1e 92       	st	-X, r1

		// enable output compare interrupt enable
		//TIMSK1|=0b00000010;

		// begin timer
		TIFR1|=_BV(OCF1A);
 b64:	b1 9a       	sbi	0x16, 1	; 22

		// poll until we reach our number of milliseconds
		while(1) {
			if((TIFR1 & 0x02) == 0x02) break;
 b66:	b1 9b       	sbis	0x16, 1	; 22
 b68:	fe cf       	rjmp	.-4      	; 0xb66 <delaynms+0x34>
	TCCR1B |=_BV(WGM12);
	
	// Set the clock prescaler to 1/64th
	TCCR1B |= 0b00000011;

	for(int i=0; i<n; i++) {
 b6a:	01 96       	adiw	r24, 0x01	; 1
 b6c:	82 17       	cp	r24, r18
 b6e:	93 07       	cpc	r25, r19
 b70:	a1 f7       	brne	.-24     	; 0xb5a <delaynms+0x28>
 b72:	08 95       	ret

00000b74 <__divmodhi4>:
 b74:	97 fb       	bst	r25, 7
 b76:	09 2e       	mov	r0, r25
 b78:	07 26       	eor	r0, r23
 b7a:	0a d0       	rcall	.+20     	; 0xb90 <__divmodhi4_neg1>
 b7c:	77 fd       	sbrc	r23, 7
 b7e:	04 d0       	rcall	.+8      	; 0xb88 <__divmodhi4_neg2>
 b80:	0c d0       	rcall	.+24     	; 0xb9a <__udivmodhi4>
 b82:	06 d0       	rcall	.+12     	; 0xb90 <__divmodhi4_neg1>
 b84:	00 20       	and	r0, r0
 b86:	1a f4       	brpl	.+6      	; 0xb8e <__divmodhi4_exit>

00000b88 <__divmodhi4_neg2>:
 b88:	70 95       	com	r23
 b8a:	61 95       	neg	r22
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b8e <__divmodhi4_exit>:
 b8e:	08 95       	ret

00000b90 <__divmodhi4_neg1>:
 b90:	f6 f7       	brtc	.-4      	; 0xb8e <__divmodhi4_exit>
 b92:	90 95       	com	r25
 b94:	81 95       	neg	r24
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	08 95       	ret

00000b9a <__udivmodhi4>:
 b9a:	aa 1b       	sub	r26, r26
 b9c:	bb 1b       	sub	r27, r27
 b9e:	51 e1       	ldi	r21, 0x11	; 17
 ba0:	07 c0       	rjmp	.+14     	; 0xbb0 <__udivmodhi4_ep>

00000ba2 <__udivmodhi4_loop>:
 ba2:	aa 1f       	adc	r26, r26
 ba4:	bb 1f       	adc	r27, r27
 ba6:	a6 17       	cp	r26, r22
 ba8:	b7 07       	cpc	r27, r23
 baa:	10 f0       	brcs	.+4      	; 0xbb0 <__udivmodhi4_ep>
 bac:	a6 1b       	sub	r26, r22
 bae:	b7 0b       	sbc	r27, r23

00000bb0 <__udivmodhi4_ep>:
 bb0:	88 1f       	adc	r24, r24
 bb2:	99 1f       	adc	r25, r25
 bb4:	5a 95       	dec	r21
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__udivmodhi4_loop>
 bb8:	80 95       	com	r24
 bba:	90 95       	com	r25
 bbc:	bc 01       	movw	r22, r24
 bbe:	cd 01       	movw	r24, r26
 bc0:	08 95       	ret

00000bc2 <_exit>:
 bc2:	f8 94       	cli

00000bc4 <__stop_program>:
 bc4:	ff cf       	rjmp	.-2      	; 0xbc4 <__stop_program>
